IMPLEMENTATION MODULE O;

IMPORT Idents, InOut, OT, Strings, Strings1, SYSTEM;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Ln;
BEGIN (* Ln *)
 InOut.WriteLn;
END Ln;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Spc;
BEGIN (* Spc *)
 Char(' ');
END Spc;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Bool(v : BOOLEAN);
BEGIN (* Bool *)
 IF v
    THEN Str('TRUE');
    ELSE Str('FALSE');
 END; (* IF *)
END Bool;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Char(c : CHAR);
BEGIN (* Char *)
 InOut.Write(c);
END Char;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE oChar(c : OT.oCHAR);
BEGIN (* oChar *)
 Char(OT.CHARofoCHAR(c));
END oChar;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Str(s : ARRAY OF CHAR);
BEGIN (* Str *)
 InOut.WriteString(s);
END Str;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE STR(VAR s : ARRAY OF CHAR);
VAR i, n : INTEGER; 
BEGIN (* STR *)
 n:=Strings1.Length(s); 
 FOR i:=0 TO n DO
  Char(s[i]); 
 END; (* FOR *)
END STR;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE StrLn(s : ARRAY OF CHAR);
BEGIN (* StrLn *)
 Str(s); Ln;
END StrLn;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE String(s : Strings.tString);
VAR a : ARRAY [0..Strings.cMaxStrLength] OF CHAR;
BEGIN (* String *)
 Strings.StringToArray(s,a);
 Str(a);
END String;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE oString(r : OT.oSTRING);
VAR a : ARRAY [0..Strings.cMaxStrLength] OF CHAR;
BEGIN (* oString *)
 OT.oSTRING2ARR(r,a);
 Str(a);
END oString;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Ident(i : Idents.tIdent);
VAR s : Strings.tString;
BEGIN (* Ident *)
 Idents.GetString(i,s);
 String(s);
END Ident;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE ShtCard(v : SHORTCARD);
BEGIN (* ShtCard *)
 LngCard(v);
END ShtCard;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Card(v : CARDINAL);
BEGIN (* Card *)
 LngCard(v);
END Card;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE LngCard(v : LONGCARD);
BEGIN (* LngCard *)
 InOut.WriteCard(v,0);
END LngCard;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE ShtInt(v : SHORTINT);
BEGIN (* ShtInt *)
 LngInt(v);
END ShtInt;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Int(v : INTEGER);
BEGIN (* Int *)
 LngInt(v);
END Int;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE LngInt(v : LONGINT);
BEGIN (* LngInt *)
 InOut.WriteInt(v,0);
END LngInt;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Byte(v : SHORTCARD);
VAR d : SHORTCARD;
BEGIN (* Byte *)
 d:=(v DIV 16) MOD 16;
 IF d>9 THEN INC(d,7); END; (* IF *)
 Char(CHR(48+d));

 d:=v MOD 16;
 IF d>9 THEN INC(d,7); END; (* IF *)
 Char(CHR(48+d));
END Byte;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Word(v : CARDINAL);
BEGIN (* Word *)
 InOut.WriteHex(v,4);
END Word;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE LngWord(v : LONGCARD);
BEGIN (* LngWord *)
 InOut.WriteHex(v,8);
END LngWord;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Addr(v : SYSTEM.ADDRESS);
BEGIN (* Addr *)
 LngWord(v);
END Addr;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Set(v : BITSET);
VAR i : SHORTCARD; f : BOOLEAN;
BEGIN (* Set *)
 f:=FALSE;
 Char('{');
 FOR i:=0 TO 31 DO
  IF i IN v
     THEN IF f THEN Char(','); END; (* IF *)
          ShtCard(i);
          f:=TRUE;
  END; (* IF *)
 END; (* FOR *)
 Char('}');
END Set;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Data(v : ARRAY OF SYSTEM.BYTE);
VAR i      : CARDINAL;
    RETYPE : RECORD
              CASE : CARDINAL OF
              |1: byte : SYSTEM.BYTE;
              |2: char : CHAR;
              END;
             END;
BEGIN (* Data *)
 FOR i:=0 TO HIGH(v) DO
  RETYPE.byte:=v[i];
  Byte(ORD(RETYPE.char));
 END; (* FOR *)
END Data;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE ShtNum(v : SHORTCARD; n : SHORTCARD);
BEGIN (* ShtNum *)
 LngNum(v,n);
END ShtNum;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Num(v : CARDINAL; n : SHORTCARD);
BEGIN (* Num *)
 LngNum(v,n);
END Num;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE LngNum(v : LONGCARD; n : SHORTCARD);
VAR i : SHORTCARD; s : ARRAY [0..100] OF CHAR;
BEGIN (* LngNum *)
 IF n=0 THEN RETURN; END; (* IF *)
 IF n>99 THEN n:=99; END; (* IF *)

 s[n]:=0C;
 LOOP
  IF n=0 THEN EXIT; END; (* IF *)
  DEC(n);
  s[n]:=CHR(48+(v MOD 10)); v:=v DIV 10;
  IF v=0 THEN EXIT; END; (* IF *)
 END; (* LOOP *)

 WHILE n>0 DO
  DEC(n);
  s[n]:='0';
 END; (* WHILE *)

 Str(s);
END LngNum;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE Real(v : REAL; Precision, Length : INTEGER);
BEGIN (* Real *)
 InOut.WriteReal(v,Length,Precision);
END Real;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE LngReal(v : LONGREAL; Precision, Length : INTEGER);
BEGIN (* LngReal *)
 InOut.WriteLongReal(v,Length,Precision);
END LngReal;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE oLngReal(v : OT.oLONGREAL; Precision, Length : INTEGER);
BEGIN (* oLngReal *)
 LngReal(OT.LONGREALofoLONGREAL(v),Precision,Length);
END oLngReal;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE RealSci(v : REAL);
BEGIN (* RealSci *)
 InOut.WriteReal(v,0,-(OT.FLT_DIG));
END RealSci;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE LngRealSci(v : LONGREAL);
BEGIN (* LngRealSci *)
 InOut.WriteLongReal(v,0,-(OT.DBL_DIG));
END LngRealSci;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE oLngRealSci(v : OT.oLONGREAL);
BEGIN (* oLngRealSci *)
 LngRealSci(OT.LONGREALofoLONGREAL(v));
END oLngRealSci;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE CharRep(c : CHAR; count : CARDINAL);
BEGIN (* CharRep *)
 WHILE count>0 DO
  Char(c); DEC(count);
 END; (* WHILE *)
END CharRep;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE BackSpace(n : CARDINAL);
VAR i : CARDINAL;
BEGIN (* BackSpace *)
 FOR i:=1 TO n DO
  Char(BS);
  Char(' ');
  Char(BS);
 END; (* FOR *)
END BackSpace;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St2(s1, s2 : ARRAY OF CHAR);
BEGIN (* St2 *)
 Str(s1);
 Str(s2);
END St2;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St3(s1, s2, s3 : ARRAY OF CHAR);
BEGIN (* St3 *)
 Str(s1);
 Str(s2);
 Str(s3);
END St3;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St4(s1, s2, s3, s4 : ARRAY OF CHAR);
BEGIN (* St4 *)
 Str(s1);
 Str(s2);
 Str(s3);
 Str(s4);
END St4;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St5(s1, s2, s3, s4, s5 : ARRAY OF CHAR);
BEGIN (* St5 *)
 Str(s1);
 Str(s2);
 Str(s3);
 Str(s4);
 Str(s5);
END St5;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St6(s1, s2, s3, s4, s5, s6 : ARRAY OF CHAR);
BEGIN (* St6 *)
 Str(s1);
 Str(s2);
 Str(s3);
 Str(s4);
 Str(s5);
 Str(s6);
END St6;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St7(s1, s2, s3, s4, s5, s6, s7 : ARRAY OF CHAR);
BEGIN (* St7 *)
 Str(s1);
 Str(s2);
 Str(s3);
 Str(s4);
 Str(s5);
 Str(s6);
 Str(s7);
END St7;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St8(s1, s2, s3, s4, s5, s6, s7, s8 : ARRAY OF CHAR);
BEGIN (* St8 *)
 Str(s1);
 Str(s2);
 Str(s3);
 Str(s4);
 Str(s5);
 Str(s6);
 Str(s7);
 Str(s8);
END St8;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE St9(s1, s2, s3, s4, s5, s6, s7, s8, s9 : ARRAY OF CHAR);
BEGIN (* St9 *)
 Str(s1);
 Str(s2);
 Str(s3);
 Str(s4);
 Str(s5);
 Str(s6);
 Str(s7);
 Str(s8);
 Str(s9);
END St9;

(*------------------------------------------------------------------------------------------------------------------------------*)
(*$1*)
PROCEDURE CharVerb(c : CHAR);
BEGIN (* CharVerb *)
 CASE c OF
 |0C..37C
 ,200C..377C: Byte(ORD(c)); Char('X');
 |'"'       : Char('"'); Char("'"); Char('"');
 ELSE         Char("'"); Char(c); Char("'");
 END; (* CASE *)
END CharVerb;

(*------------------------------------------------------------------------------------------------------------------------------*)
END O.

