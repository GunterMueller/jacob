  (**************************************************************) 
  (*   This module was generated by BEG V1.75        *)
  (*        GMD Forschunsstelle an der Universitaet Karlsruhe   *)
  (*        Vincenz-Priessnitz-Str. 1 76131 Karlsruhe Germany   *)
  (**************************************************************)
 MODULE GcgTab;
 IMPORT ConsBase,IR;

 TYPE Register = IR.Register;
      RegisterSet = IR.RegisterSet;
      Rule = IR.Rule;               
      NonTerminal = IR.NonTerminal;
      OpCode = IR.NonTerminal;
 CONST MaxPscArity = IR.MaxPscArity;      

CONST 
      ntBReg         = IR.ntBReg;
      ntWReg         = IR.ntWReg;
      ntLReg         = IR.ntLReg;
      ntReg          = IR.ntReg;
      ntFXReg        = IR.ntFXReg;
      ntFYReg        = IR.ntFYReg;
      ntConstant     = IR.ntConstant;
      ntGv           = IR.ntGv;
      ntIreg         = IR.ntIreg;
      ntBreg         = IR.ntBreg;
      ntBregIreg     = IR.ntBregIreg;
      ntMemory       = IR.ntMemory;
      ntLab          = IR.ntLab;
      ntCond         = IR.ntCond;
      ntBool         = IR.ntBool;
      ntReducedStack = IR.ntReducedStack;
      ntStrCopyArgs  = IR.ntStrCopyArgs;
      ntArgs         = IR.ntArgs;
      ntRetyp        = IR.ntRetyp;
      ntAMem         = IR.ntAMem;
      ntAReg         = IR.ntAReg;
      ntAImm         = IR.ntAImm;
      ntAMemAReg     = IR.ntAMemAReg;
      ntAMemAImm     = IR.ntAMemAImm;
      ntARegAImm     = IR.ntARegAImm;
      ntAMemARegAImm = IR.ntAMemARegAImm;
      ntAVar         = IR.ntAVar;
CONST RegNil = ConsBase.RegNil;
      Regal  = ConsBase.Regal;
      Regah  = ConsBase.Regah;
      Regbl  = ConsBase.Regbl;
      Regbh  = ConsBase.Regbh;
      Regcl  = ConsBase.Regcl;
      Regch  = ConsBase.Regch;
      Regdl  = ConsBase.Regdl;
      Regdh  = ConsBase.Regdh;
      Regax  = ConsBase.Regax;
      Regbx  = ConsBase.Regbx;
      Regcx  = ConsBase.Regcx;
      Regdx  = ConsBase.Regdx;
      Regsi  = ConsBase.Regsi;
      Regdi  = ConsBase.Regdi;
      Regeax = ConsBase.Regeax;
      Regebx = ConsBase.Regebx;
      Regecx = ConsBase.Regecx;
      Regedx = ConsBase.Regedx;
      Regesi = ConsBase.Regesi;
      Regedi = ConsBase.Regedi;
      Regebp = ConsBase.Regebp;
      Regesp = ConsBase.Regesp;
      Regst  = ConsBase.Regst;
      Regst1 = ConsBase.Regst1;
      Regst2 = ConsBase.Regst2;
      Regst3 = ConsBase.Regst3;
      Regst4 = ConsBase.Regst4;
      Regst5 = ConsBase.Regst5;
      Regst6 = ConsBase.Regst6;
      Regst7 = ConsBase.Regst7;

 TYPE     

   Path*        = LONGINT;

   RegKind*     = SHORTINT;
CONST RKRegister*=0; RKAdrmode*=1; RKMemory*=2; RKCalc*=3; MAX_RegKind*=RKCalc;
TYPE 
   RuleDescrRec*   =  RECORD
      register*   : RegKind;
      pscarity*   :SHORTINT; 
      resregs*    : RegisterSet;
      changeregs* : RegisterSet;
      target*     :SHORTINT; 
      closuretarget* : BOOLEAN;
      result*     :SHORTINT; 
      unique*     : BOOLEAN;
      commutative*: BOOLEAN;
      op*         : ARRAY MaxPscArity+1 OF RECORD
        nt*       : NonTerminal;
        path*     : Path;
        calc*     : BOOLEAN;   (* he 3/91 *)
        regs*     : RegisterSet;
      END;
      srcline*    :LONGINT; 
      scrnum*     :SHORTINT; 
      scrrs*      : ARRAY IR.MaxScratch+1 OF RegisterSet;
   END;



   VAR
     RegDestroy*   :  ARRAY ConsBase.MAX_BegRegister+1 OF RegisterSet;
     (* Constant, RegDestroy [r] contains the registers, which *)
     (* are destroyed, if r is altered                         *)
     
     RuleDescr*    :  ARRAY IR.MAX_Rule+1   OF RuleDescrRec;
     (* Constant, contains a description of all rules or       *)
     (* pseudo code statements                                 *)


 VAR  nt : NonTerminal;
 BEGIN
      RegDestroy [Regal][0] := 
      { (Regal)-0,  (Regax)-0,  (Regeax)-0};
      RegDestroy [Regah][0] := 
      { (Regah)-0,  (Regax)-0,  (Regeax)-0};
      RegDestroy [Regbl][0] := 
      { (Regbl)-0,  (Regbx)-0,  (Regebx)-0};
      RegDestroy [Regbh][0] := 
      { (Regbh)-0,  (Regbx)-0,  (Regebx)-0};
      RegDestroy [Regcl][0] := 
      { (Regcl)-0,  (Regcx)-0,  (Regecx)-0};
      RegDestroy [Regch][0] := 
      { (Regch)-0,  (Regcx)-0,  (Regecx)-0};
      RegDestroy [Regdl][0] := 
      { (Regdl)-0,  (Regdx)-0,  (Regedx)-0};
      RegDestroy [Regdh][0] := 
      { (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
      RegDestroy [Regax][0] := 
      { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
      RegDestroy [Regbx][0] := 
      { (Regbl)-0,  (Regbh)-0,  (Regbx)-0,  (Regebx)-0};
      RegDestroy [Regcx][0] := 
      { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regecx)-0};
      RegDestroy [Regdx][0] := 
      { (Regdl)-0,  (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
      RegDestroy [Regsi][0] := 
      { (Regsi)-0,  (Regesi)-0};
      RegDestroy [Regdi][0] := 
      { (Regdi)-0,  (Regedi)-0};
      RegDestroy [Regeax][0] := 
      { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
      RegDestroy [Regebx][0] := 
      { (Regbl)-0,  (Regbh)-0,  (Regbx)-0,  (Regebx)-0};
      RegDestroy [Regecx][0] := 
      { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regecx)-0};
      RegDestroy [Regedx][0] := 
      { (Regdl)-0,  (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
      RegDestroy [Regesi][0] := 
      { (Regsi)-0,  (Regesi)-0};
      RegDestroy [Regedi][0] := 
      { (Regdi)-0,  (Regedi)-0};
      RegDestroy [Regebp][0] := 
      { (Regebp)-0};
      RegDestroy [Regesp][0] := 
      { (Regesp)-0};
      RegDestroy [Regst][0] := 
      { (Regst)-0};
      RegDestroy [Regst1][0] := 
      { (Regst1)-0};
      RegDestroy [Regst2][0] := 
      { (Regst2)-0};
      RegDestroy [Regst3][0] := 
      { (Regst3)-0};
      RegDestroy [Regst4][0] := 
      { (Regst4)-0};
      RegDestroy [Regst5][0] := 
      { (Regst5)-0};
      RegDestroy [Regst6][0] := 
      { (Regst6)-0};
      RegDestroy [Regst7][0] := 
      { (Regst7)-0};

 (*   RULE 1/986  *)
           RuleDescr [1].register := RKRegister;
     RuleDescr [1].pscarity := 1;
     RuleDescr [1].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [1].changeregs[0]  := {};
           RuleDescr [1].op[1].nt   := ntBReg;
           RuleDescr [1].op[1].path := 0;              RuleDescr [1].op[1].calc := FALSE;

           RuleDescr [1].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [1].target   := 1;
     RuleDescr [1].closuretarget := FALSE;
     RuleDescr [1].result   := 0;
     RuleDescr [1].unique := FALSE;
     RuleDescr [1].commutative := FALSE;
     RuleDescr [1].srcline := 986;
     RuleDescr [1].scrnum := 0;
 (*   RULE 2/987  *)
           RuleDescr [2].register := RKRegister;
     RuleDescr [2].pscarity := 1;
     RuleDescr [2].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [2].changeregs[0]  := {};
           RuleDescr [2].op[1].nt   := ntWReg;
           RuleDescr [2].op[1].path := 0;              RuleDescr [2].op[1].calc := FALSE;

           RuleDescr [2].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [2].target   := 1;
     RuleDescr [2].closuretarget := FALSE;
     RuleDescr [2].result   := 0;
     RuleDescr [2].unique := FALSE;
     RuleDescr [2].commutative := FALSE;
     RuleDescr [2].srcline := 987;
     RuleDescr [2].scrnum := 0;
 (*   RULE 3/988  *)
           RuleDescr [3].register := RKRegister;
     RuleDescr [3].pscarity := 1;
     RuleDescr [3].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [3].changeregs[0]  := {};
           RuleDescr [3].op[1].nt   := ntLReg;
           RuleDescr [3].op[1].path := 0;              RuleDescr [3].op[1].calc := FALSE;

           RuleDescr [3].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [3].target   := 1;
     RuleDescr [3].closuretarget := FALSE;
     RuleDescr [3].result   := 0;
     RuleDescr [3].unique := FALSE;
     RuleDescr [3].commutative := FALSE;
     RuleDescr [3].srcline := 988;
     RuleDescr [3].scrnum := 0;
 (*   RULE 4/990  *)
           RuleDescr [4].register := RKRegister;
     RuleDescr [4].pscarity := 1;
     RuleDescr [4].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [4].changeregs[0]  := {};
           RuleDescr [4].op[1].nt   := ntReg;
           RuleDescr [4].op[1].path := 0;              RuleDescr [4].op[1].calc := FALSE;

           RuleDescr [4].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [4].target   := 1;
     RuleDescr [4].closuretarget := FALSE;
     RuleDescr [4].result   := 0;
     RuleDescr [4].unique := FALSE;
     RuleDescr [4].commutative := FALSE;
     RuleDescr [4].srcline := 990;
     RuleDescr [4].scrnum := 0;
 (*   RULE 5/991  *)
           RuleDescr [5].register := RKRegister;
     RuleDescr [5].pscarity := 1;
     RuleDescr [5].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [5].changeregs[0]  := {};
           RuleDescr [5].op[1].nt   := ntReg;
           RuleDescr [5].op[1].path := 0;              RuleDescr [5].op[1].calc := FALSE;

           RuleDescr [5].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [5].target   := 1;
     RuleDescr [5].closuretarget := FALSE;
     RuleDescr [5].result   := 0;
     RuleDescr [5].unique := FALSE;
     RuleDescr [5].commutative := FALSE;
     RuleDescr [5].srcline := 991;
     RuleDescr [5].scrnum := 0;
 (*   RULE 6/992  *)
           RuleDescr [6].register := RKRegister;
     RuleDescr [6].pscarity := 1;
     RuleDescr [6].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [6].changeregs[0]  := {};
           RuleDescr [6].op[1].nt   := ntReg;
           RuleDescr [6].op[1].path := 0;              RuleDescr [6].op[1].calc := FALSE;

           RuleDescr [6].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [6].target   := 1;
     RuleDescr [6].closuretarget := FALSE;
     RuleDescr [6].result   := 0;
     RuleDescr [6].unique := FALSE;
     RuleDescr [6].commutative := FALSE;
     RuleDescr [6].srcline := 992;
     RuleDescr [6].scrnum := 0;
 (*   RULE 7/994  *)
           RuleDescr [7].register := RKAdrmode;
     RuleDescr [7].pscarity := 1;
     RuleDescr [7].resregs   [0]  := {};
     RuleDescr [7].changeregs[0]  := {};
           RuleDescr [7].op[1].nt   := ntGv;
           RuleDescr [7].op[1].path := 0;              RuleDescr [7].op[1].calc := FALSE;

           RuleDescr [7].op[1].regs[0] := {};
     RuleDescr [7].target   := 0;
     RuleDescr [7].closuretarget := FALSE;
     RuleDescr [7].result   := 0;
     RuleDescr [7].unique := FALSE;
     RuleDescr [7].commutative := FALSE;
     RuleDescr [7].srcline := 994;
     RuleDescr [7].scrnum := 0;
 (*   RULE 8/995  *)
           RuleDescr [8].register := RKAdrmode;
     RuleDescr [8].pscarity := 1;
     RuleDescr [8].resregs   [0]  := {};
     RuleDescr [8].changeregs[0]  := {};
           RuleDescr [8].op[1].nt   := ntIreg;
           RuleDescr [8].op[1].path := 0;              RuleDescr [8].op[1].calc := FALSE;

           RuleDescr [8].op[1].regs[0] := {};
     RuleDescr [8].target   := 0;
     RuleDescr [8].closuretarget := FALSE;
     RuleDescr [8].result   := 0;
     RuleDescr [8].unique := FALSE;
     RuleDescr [8].commutative := FALSE;
     RuleDescr [8].srcline := 995;
     RuleDescr [8].scrnum := 0;
 (*   RULE 9/996  *)
           RuleDescr [9].register := RKAdrmode;
     RuleDescr [9].pscarity := 1;
     RuleDescr [9].resregs   [0]  := {};
     RuleDescr [9].changeregs[0]  := {};
           RuleDescr [9].op[1].nt   := ntBreg;
           RuleDescr [9].op[1].path := 0;              RuleDescr [9].op[1].calc := FALSE;

           RuleDescr [9].op[1].regs[0] := {};
     RuleDescr [9].target   := 0;
     RuleDescr [9].closuretarget := FALSE;
     RuleDescr [9].result   := 0;
     RuleDescr [9].unique := FALSE;
     RuleDescr [9].commutative := FALSE;
     RuleDescr [9].srcline := 996;
     RuleDescr [9].scrnum := 0;
 (*   RULE 10/997  *)
           RuleDescr [10].register := RKAdrmode;
     RuleDescr [10].pscarity := 1;
     RuleDescr [10].resregs   [0]  := {};
     RuleDescr [10].changeregs[0]  := {};
           RuleDescr [10].op[1].nt   := ntBregIreg;
           RuleDescr [10].op[1].path := 0;              RuleDescr [10].op[1].calc := FALSE;

           RuleDescr [10].op[1].regs[0] := {};
     RuleDescr [10].target   := 0;
     RuleDescr [10].closuretarget := FALSE;
     RuleDescr [10].result   := 0;
     RuleDescr [10].unique := FALSE;
     RuleDescr [10].commutative := FALSE;
     RuleDescr [10].srcline := 997;
     RuleDescr [10].scrnum := 0;
 (*   RULE 11/1001  *)
           RuleDescr [11].register := RKAdrmode;
     RuleDescr [11].pscarity := 1;
     RuleDescr [11].resregs   [0]  := {};
     RuleDescr [11].changeregs[0]  := {};
           RuleDescr [11].op[1].nt   := ntMemory;
           RuleDescr [11].op[1].path := 0;              RuleDescr [11].op[1].calc := FALSE;

           RuleDescr [11].op[1].regs[0] := {};
     RuleDescr [11].target   := 0;
     RuleDescr [11].closuretarget := FALSE;
     RuleDescr [11].result   := 0;
     RuleDescr [11].unique := FALSE;
     RuleDescr [11].commutative := FALSE;
     RuleDescr [11].srcline := 1001;
     RuleDescr [11].scrnum := 0;
 (*   RULE 12/1002  *)
           RuleDescr [12].register := RKAdrmode;
     RuleDescr [12].pscarity := 1;
     RuleDescr [12].resregs   [0]  := {};
     RuleDescr [12].changeregs[0]  := {};
           RuleDescr [12].op[1].nt   := ntBReg;
           RuleDescr [12].op[1].path := 0;              RuleDescr [12].op[1].calc := FALSE;

           RuleDescr [12].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [12].target   := 0;
     RuleDescr [12].closuretarget := FALSE;
     RuleDescr [12].result   := 0;
     RuleDescr [12].unique := FALSE;
     RuleDescr [12].commutative := FALSE;
     RuleDescr [12].srcline := 1002;
     RuleDescr [12].scrnum := 0;
 (*   RULE 13/1003  *)
           RuleDescr [13].register := RKAdrmode;
     RuleDescr [13].pscarity := 1;
     RuleDescr [13].resregs   [0]  := {};
     RuleDescr [13].changeregs[0]  := {};
           RuleDescr [13].op[1].nt   := ntWReg;
           RuleDescr [13].op[1].path := 0;              RuleDescr [13].op[1].calc := FALSE;

           RuleDescr [13].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [13].target   := 0;
     RuleDescr [13].closuretarget := FALSE;
     RuleDescr [13].result   := 0;
     RuleDescr [13].unique := FALSE;
     RuleDescr [13].commutative := FALSE;
     RuleDescr [13].srcline := 1003;
     RuleDescr [13].scrnum := 0;
 (*   RULE 14/1004  *)
           RuleDescr [14].register := RKAdrmode;
     RuleDescr [14].pscarity := 1;
     RuleDescr [14].resregs   [0]  := {};
     RuleDescr [14].changeregs[0]  := {};
           RuleDescr [14].op[1].nt   := ntLReg;
           RuleDescr [14].op[1].path := 0;              RuleDescr [14].op[1].calc := FALSE;

           RuleDescr [14].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [14].target   := 0;
     RuleDescr [14].closuretarget := FALSE;
     RuleDescr [14].result   := 0;
     RuleDescr [14].unique := FALSE;
     RuleDescr [14].commutative := FALSE;
     RuleDescr [14].srcline := 1004;
     RuleDescr [14].scrnum := 0;
 (*   RULE 15/1005  *)
           RuleDescr [15].register := RKAdrmode;
     RuleDescr [15].pscarity := 1;
     RuleDescr [15].resregs   [0]  := {};
     RuleDescr [15].changeregs[0]  := {};
           RuleDescr [15].op[1].nt   := ntConstant;
           RuleDescr [15].op[1].path := 0;              RuleDescr [15].op[1].calc := FALSE;

           RuleDescr [15].op[1].regs[0] := {};
     RuleDescr [15].target   := 0;
     RuleDescr [15].closuretarget := FALSE;
     RuleDescr [15].result   := 0;
     RuleDescr [15].unique := FALSE;
     RuleDescr [15].commutative := FALSE;
     RuleDescr [15].srcline := 1005;
     RuleDescr [15].scrnum := 0;
 (*   RULE 16/1007  *)
           RuleDescr [16].register := RKAdrmode;
     RuleDescr [16].pscarity := 1;
     RuleDescr [16].resregs   [0]  := {};
     RuleDescr [16].changeregs[0]  := {};
           RuleDescr [16].op[1].nt   := ntAMem;
           RuleDescr [16].op[1].path := 0;              RuleDescr [16].op[1].calc := FALSE;

           RuleDescr [16].op[1].regs[0] := {};
     RuleDescr [16].target   := 0;
     RuleDescr [16].closuretarget := FALSE;
     RuleDescr [16].result   := 0;
     RuleDescr [16].unique := FALSE;
     RuleDescr [16].commutative := FALSE;
     RuleDescr [16].srcline := 1007;
     RuleDescr [16].scrnum := 0;
 (*   RULE 17/1008  *)
           RuleDescr [17].register := RKAdrmode;
     RuleDescr [17].pscarity := 1;
     RuleDescr [17].resregs   [0]  := {};
     RuleDescr [17].changeregs[0]  := {};
           RuleDescr [17].op[1].nt   := ntAReg;
           RuleDescr [17].op[1].path := 0;              RuleDescr [17].op[1].calc := FALSE;

           RuleDescr [17].op[1].regs[0] := {};
     RuleDescr [17].target   := 0;
     RuleDescr [17].closuretarget := FALSE;
     RuleDescr [17].result   := 0;
     RuleDescr [17].unique := FALSE;
     RuleDescr [17].commutative := FALSE;
     RuleDescr [17].srcline := 1008;
     RuleDescr [17].scrnum := 0;
 (*   RULE 18/1010  *)
           RuleDescr [18].register := RKAdrmode;
     RuleDescr [18].pscarity := 1;
     RuleDescr [18].resregs   [0]  := {};
     RuleDescr [18].changeregs[0]  := {};
           RuleDescr [18].op[1].nt   := ntAMem;
           RuleDescr [18].op[1].path := 0;              RuleDescr [18].op[1].calc := FALSE;

           RuleDescr [18].op[1].regs[0] := {};
     RuleDescr [18].target   := 0;
     RuleDescr [18].closuretarget := FALSE;
     RuleDescr [18].result   := 0;
     RuleDescr [18].unique := FALSE;
     RuleDescr [18].commutative := FALSE;
     RuleDescr [18].srcline := 1010;
     RuleDescr [18].scrnum := 0;
 (*   RULE 19/1011  *)
           RuleDescr [19].register := RKAdrmode;
     RuleDescr [19].pscarity := 1;
     RuleDescr [19].resregs   [0]  := {};
     RuleDescr [19].changeregs[0]  := {};
           RuleDescr [19].op[1].nt   := ntAImm;
           RuleDescr [19].op[1].path := 0;              RuleDescr [19].op[1].calc := FALSE;

           RuleDescr [19].op[1].regs[0] := {};
     RuleDescr [19].target   := 0;
     RuleDescr [19].closuretarget := FALSE;
     RuleDescr [19].result   := 0;
     RuleDescr [19].unique := FALSE;
     RuleDescr [19].commutative := FALSE;
     RuleDescr [19].srcline := 1011;
     RuleDescr [19].scrnum := 0;
 (*   RULE 20/1013  *)
           RuleDescr [20].register := RKAdrmode;
     RuleDescr [20].pscarity := 1;
     RuleDescr [20].resregs   [0]  := {};
     RuleDescr [20].changeregs[0]  := {};
           RuleDescr [20].op[1].nt   := ntAReg;
           RuleDescr [20].op[1].path := 0;              RuleDescr [20].op[1].calc := FALSE;

           RuleDescr [20].op[1].regs[0] := {};
     RuleDescr [20].target   := 0;
     RuleDescr [20].closuretarget := FALSE;
     RuleDescr [20].result   := 0;
     RuleDescr [20].unique := FALSE;
     RuleDescr [20].commutative := FALSE;
     RuleDescr [20].srcline := 1013;
     RuleDescr [20].scrnum := 0;
 (*   RULE 21/1014  *)
           RuleDescr [21].register := RKAdrmode;
     RuleDescr [21].pscarity := 1;
     RuleDescr [21].resregs   [0]  := {};
     RuleDescr [21].changeregs[0]  := {};
           RuleDescr [21].op[1].nt   := ntAImm;
           RuleDescr [21].op[1].path := 0;              RuleDescr [21].op[1].calc := FALSE;

           RuleDescr [21].op[1].regs[0] := {};
     RuleDescr [21].target   := 0;
     RuleDescr [21].closuretarget := FALSE;
     RuleDescr [21].result   := 0;
     RuleDescr [21].unique := FALSE;
     RuleDescr [21].commutative := FALSE;
     RuleDescr [21].srcline := 1014;
     RuleDescr [21].scrnum := 0;
 (*   RULE 22/1016  *)
           RuleDescr [22].register := RKAdrmode;
     RuleDescr [22].pscarity := 1;
     RuleDescr [22].resregs   [0]  := {};
     RuleDescr [22].changeregs[0]  := {};
           RuleDescr [22].op[1].nt   := ntAMem;
           RuleDescr [22].op[1].path := 0;              RuleDescr [22].op[1].calc := FALSE;

           RuleDescr [22].op[1].regs[0] := {};
     RuleDescr [22].target   := 0;
     RuleDescr [22].closuretarget := FALSE;
     RuleDescr [22].result   := 0;
     RuleDescr [22].unique := FALSE;
     RuleDescr [22].commutative := FALSE;
     RuleDescr [22].srcline := 1016;
     RuleDescr [22].scrnum := 0;
 (*   RULE 23/1017  *)
           RuleDescr [23].register := RKAdrmode;
     RuleDescr [23].pscarity := 1;
     RuleDescr [23].resregs   [0]  := {};
     RuleDescr [23].changeregs[0]  := {};
           RuleDescr [23].op[1].nt   := ntAReg;
           RuleDescr [23].op[1].path := 0;              RuleDescr [23].op[1].calc := FALSE;

           RuleDescr [23].op[1].regs[0] := {};
     RuleDescr [23].target   := 0;
     RuleDescr [23].closuretarget := FALSE;
     RuleDescr [23].result   := 0;
     RuleDescr [23].unique := FALSE;
     RuleDescr [23].commutative := FALSE;
     RuleDescr [23].srcline := 1017;
     RuleDescr [23].scrnum := 0;
 (*   RULE 24/1018  *)
           RuleDescr [24].register := RKAdrmode;
     RuleDescr [24].pscarity := 1;
     RuleDescr [24].resregs   [0]  := {};
     RuleDescr [24].changeregs[0]  := {};
           RuleDescr [24].op[1].nt   := ntAImm;
           RuleDescr [24].op[1].path := 0;              RuleDescr [24].op[1].calc := FALSE;

           RuleDescr [24].op[1].regs[0] := {};
     RuleDescr [24].target   := 0;
     RuleDescr [24].closuretarget := FALSE;
     RuleDescr [24].result   := 0;
     RuleDescr [24].unique := FALSE;
     RuleDescr [24].commutative := FALSE;
     RuleDescr [24].srcline := 1018;
     RuleDescr [24].scrnum := 0;
 (*   RULE 25/1024  *)
           RuleDescr [25].register := RKAdrmode;
     RuleDescr [25].pscarity := 0;
     RuleDescr [25].resregs   [0]  := {};
     RuleDescr [25].changeregs[0]  := {};
     RuleDescr [25].target   := 0;
     RuleDescr [25].closuretarget := FALSE;
     RuleDescr [25].result   := 0;
     RuleDescr [25].unique := FALSE;
     RuleDescr [25].commutative := FALSE;
     RuleDescr [25].srcline := 1024;
     RuleDescr [25].scrnum := 0;
 (*   RULE 26/1033  *)
           RuleDescr [26].register := RKAdrmode;
     RuleDescr [26].pscarity := 0;
     RuleDescr [26].resregs   [0]  := {};
     RuleDescr [26].changeregs[0]  := {};
     RuleDescr [26].target   := 0;
     RuleDescr [26].closuretarget := FALSE;
     RuleDescr [26].result   := 0;
     RuleDescr [26].unique := FALSE;
     RuleDescr [26].commutative := FALSE;
     RuleDescr [26].srcline := 1033;
     RuleDescr [26].scrnum := 0;
 (*   RULE 27/1043  *)
           RuleDescr [27].register := RKAdrmode;
     RuleDescr [27].pscarity := 1;
     RuleDescr [27].resregs   [0]  := {};
     RuleDescr [27].changeregs[0]  := {};
           RuleDescr [27].op[1].nt   := ntGv;
           RuleDescr [27].op[1].path := 1;              RuleDescr [27].op[1].calc := FALSE;

           RuleDescr [27].op[1].regs[0] := {};
     RuleDescr [27].target   := 0;
     RuleDescr [27].closuretarget := FALSE;
     RuleDescr [27].result   := 0;
     RuleDescr [27].unique := FALSE;
     RuleDescr [27].commutative := FALSE;
     RuleDescr [27].srcline := 1043;
     RuleDescr [27].scrnum := 0;
 (*   RULE 28/1046  *)
           RuleDescr [28].register := RKAdrmode;
     RuleDescr [28].pscarity := 1;
     RuleDescr [28].resregs   [0]  := {};
     RuleDescr [28].changeregs[0]  := {};
           RuleDescr [28].op[1].nt   := ntIreg;
           RuleDescr [28].op[1].path := 1;              RuleDescr [28].op[1].calc := FALSE;

           RuleDescr [28].op[1].regs[0] := {};
     RuleDescr [28].target   := 0;
     RuleDescr [28].closuretarget := FALSE;
     RuleDescr [28].result   := 0;
     RuleDescr [28].unique := FALSE;
     RuleDescr [28].commutative := FALSE;
     RuleDescr [28].srcline := 1046;
     RuleDescr [28].scrnum := 0;
 (*   RULE 29/1049  *)
           RuleDescr [29].register := RKAdrmode;
     RuleDescr [29].pscarity := 1;
     RuleDescr [29].resregs   [0]  := {};
     RuleDescr [29].changeregs[0]  := {};
           RuleDescr [29].op[1].nt   := ntBreg;
           RuleDescr [29].op[1].path := 1;              RuleDescr [29].op[1].calc := FALSE;

           RuleDescr [29].op[1].regs[0] := {};
     RuleDescr [29].target   := 0;
     RuleDescr [29].closuretarget := FALSE;
     RuleDescr [29].result   := 0;
     RuleDescr [29].unique := FALSE;
     RuleDescr [29].commutative := FALSE;
     RuleDescr [29].srcline := 1049;
     RuleDescr [29].scrnum := 0;
 (*   RULE 30/1052  *)
           RuleDescr [30].register := RKAdrmode;
     RuleDescr [30].pscarity := 1;
     RuleDescr [30].resregs   [0]  := {};
     RuleDescr [30].changeregs[0]  := {};
           RuleDescr [30].op[1].nt   := ntBregIreg;
           RuleDescr [30].op[1].path := 1;              RuleDescr [30].op[1].calc := FALSE;

           RuleDescr [30].op[1].regs[0] := {};
     RuleDescr [30].target   := 0;
     RuleDescr [30].closuretarget := FALSE;
     RuleDescr [30].result   := 0;
     RuleDescr [30].unique := FALSE;
     RuleDescr [30].commutative := FALSE;
     RuleDescr [30].srcline := 1052;
     RuleDescr [30].scrnum := 0;
 (*   RULE 31/1056  *)
           RuleDescr [31].register := RKAdrmode;
     RuleDescr [31].pscarity := 2;
     RuleDescr [31].resregs   [0]  := {};
     RuleDescr [31].changeregs[0]  := {};
           RuleDescr [31].op[1].nt   := ntGv;
           RuleDescr [31].op[1].path := 1;              RuleDescr [31].op[1].calc := FALSE;

           RuleDescr [31].op[1].regs[0] := {};
           RuleDescr [31].op[2].nt   := ntLReg;
           RuleDescr [31].op[2].path := 2;              RuleDescr [31].op[2].calc := FALSE;

           RuleDescr [31].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [31].target   := 0;
     RuleDescr [31].closuretarget := FALSE;
     RuleDescr [31].result   := 0;
     RuleDescr [31].unique := FALSE;
     RuleDescr [31].commutative := FALSE;
     RuleDescr [31].srcline := 1056;
     RuleDescr [31].scrnum := 0;
 (*   RULE 32/1062  *)
           RuleDescr [32].register := RKAdrmode;
     RuleDescr [32].pscarity := 2;
     RuleDescr [32].resregs   [0]  := {};
     RuleDescr [32].changeregs[0]  := {};
           RuleDescr [32].op[1].nt   := ntGv;
           RuleDescr [32].op[1].path := 1;              RuleDescr [32].op[1].calc := FALSE;

           RuleDescr [32].op[1].regs[0] := {};
           RuleDescr [32].op[2].nt   := ntLReg;
           RuleDescr [32].op[2].path := 2;              RuleDescr [32].op[2].calc := FALSE;

           RuleDescr [32].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [32].target   := 0;
     RuleDescr [32].closuretarget := FALSE;
     RuleDescr [32].result   := 0;
     RuleDescr [32].unique := FALSE;
     RuleDescr [32].commutative := FALSE;
     RuleDescr [32].srcline := 1062;
     RuleDescr [32].scrnum := 0;
 (*   RULE 33/1067  *)
           RuleDescr [33].register := RKAdrmode;
     RuleDescr [33].pscarity := 2;
     RuleDescr [33].resregs   [0]  := {};
     RuleDescr [33].changeregs[0]  := {};
           RuleDescr [33].op[1].nt   := ntIreg;
           RuleDescr [33].op[1].path := 1;              RuleDescr [33].op[1].calc := FALSE;

           RuleDescr [33].op[1].regs[0] := {};
           RuleDescr [33].op[2].nt   := ntLReg;
           RuleDescr [33].op[2].path := 2;              RuleDescr [33].op[2].calc := FALSE;

           RuleDescr [33].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [33].target   := 0;
     RuleDescr [33].closuretarget := FALSE;
     RuleDescr [33].result   := 0;
     RuleDescr [33].unique := FALSE;
     RuleDescr [33].commutative := FALSE;
     RuleDescr [33].srcline := 1067;
     RuleDescr [33].scrnum := 0;
 (*   RULE 34/1077  *)
           RuleDescr [34].register := RKAdrmode;
     RuleDescr [34].pscarity := 2;
     RuleDescr [34].resregs   [0]  := {};
     RuleDescr [34].changeregs[0]  := {};
           RuleDescr [34].op[1].nt   := ntIreg;
           RuleDescr [34].op[1].path := 1;              RuleDescr [34].op[1].calc := FALSE;

           RuleDescr [34].op[1].regs[0] := {};
           RuleDescr [34].op[2].nt   := ntLReg;
           RuleDescr [34].op[2].path := 2;              RuleDescr [34].op[2].calc := FALSE;

           RuleDescr [34].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [34].target   := 0;
     RuleDescr [34].closuretarget := FALSE;
     RuleDescr [34].result   := 0;
     RuleDescr [34].unique := FALSE;
     RuleDescr [34].commutative := FALSE;
     RuleDescr [34].srcline := 1077;
     RuleDescr [34].scrnum := 0;
 (*   RULE 35/1082  *)
           RuleDescr [35].register := RKAdrmode;
     RuleDescr [35].pscarity := 2;
     RuleDescr [35].resregs   [0]  := {};
     RuleDescr [35].changeregs[0]  := {};
           RuleDescr [35].op[1].nt   := ntBreg;
           RuleDescr [35].op[1].path := 1;              RuleDescr [35].op[1].calc := FALSE;

           RuleDescr [35].op[1].regs[0] := {};
           RuleDescr [35].op[2].nt   := ntLReg;
           RuleDescr [35].op[2].path := 2;              RuleDescr [35].op[2].calc := FALSE;

           RuleDescr [35].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [35].target   := 0;
     RuleDescr [35].closuretarget := FALSE;
     RuleDescr [35].result   := 0;
     RuleDescr [35].unique := FALSE;
     RuleDescr [35].commutative := FALSE;
     RuleDescr [35].srcline := 1082;
     RuleDescr [35].scrnum := 0;
 (*   RULE 36/1087  *)
           RuleDescr [36].register := RKAdrmode;
     RuleDescr [36].pscarity := 2;
     RuleDescr [36].resregs   [0]  := {};
     RuleDescr [36].changeregs[0]  := {};
           RuleDescr [36].op[1].nt   := ntLReg;
           RuleDescr [36].op[1].path := 1;              RuleDescr [36].op[1].calc := FALSE;

           RuleDescr [36].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [36].op[2].nt   := ntLReg;
           RuleDescr [36].op[2].path := 2;              RuleDescr [36].op[2].calc := FALSE;

           RuleDescr [36].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [36].target   := 0;
     RuleDescr [36].closuretarget := FALSE;
     RuleDescr [36].result   := 0;
     RuleDescr [36].unique := FALSE;
     RuleDescr [36].commutative := FALSE;
     RuleDescr [36].srcline := 1087;
     RuleDescr [36].scrnum := 0;
 (*   RULE 37/1095  *)
           RuleDescr [37].register := RKRegister;
     RuleDescr [37].pscarity := 1;
     RuleDescr [37].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [37].changeregs[0]  := {};
           RuleDescr [37].op[1].nt   := ntBregIreg;
           RuleDescr [37].op[1].path := 0;              RuleDescr [37].op[1].calc := FALSE;

           RuleDescr [37].op[1].regs[0] := {};
     RuleDescr [37].target   := 0;
     RuleDescr [37].closuretarget := FALSE;
     RuleDescr [37].result   := 0;
     RuleDescr [37].unique := FALSE;
     RuleDescr [37].commutative := FALSE;
     RuleDescr [37].srcline := 1095;
     RuleDescr [37].scrnum := 0;
 (*   RULE 38/1099  *)
           RuleDescr [38].register := RKAdrmode;
     RuleDescr [38].pscarity := 1;
     RuleDescr [38].resregs   [0]  := {};
     RuleDescr [38].changeregs[0]  := {};
           RuleDescr [38].op[1].nt   := ntLReg;
           RuleDescr [38].op[1].path := 1;              RuleDescr [38].op[1].calc := FALSE;

           RuleDescr [38].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [38].target   := 0;
     RuleDescr [38].closuretarget := FALSE;
     RuleDescr [38].result   := 0;
     RuleDescr [38].unique := FALSE;
     RuleDescr [38].commutative := FALSE;
     RuleDescr [38].srcline := 1099;
     RuleDescr [38].scrnum := 0;
 (*   RULE 39/1108  *)
           RuleDescr [39].register := RKAdrmode;
     RuleDescr [39].pscarity := 1;
     RuleDescr [39].resregs   [0]  := {};
     RuleDescr [39].changeregs[0]  := {};
           RuleDescr [39].op[1].nt   := ntMemory;
           RuleDescr [39].op[1].path := 1;              RuleDescr [39].op[1].calc := FALSE;

           RuleDescr [39].op[1].regs[0] := {};
     RuleDescr [39].target   := 0;
     RuleDescr [39].closuretarget := FALSE;
     RuleDescr [39].result   := 0;
     RuleDescr [39].unique := FALSE;
     RuleDescr [39].commutative := FALSE;
     RuleDescr [39].srcline := 1108;
     RuleDescr [39].scrnum := 0;
 (*   RULE 40/1113  *)
           RuleDescr [40].register := RKRegister;
     RuleDescr [40].pscarity := 1;
     RuleDescr [40].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [40].changeregs[0]  := {};
           RuleDescr [40].op[1].nt   := ntAMemAImm;
           RuleDescr [40].op[1].path := 0;              RuleDescr [40].op[1].calc := FALSE;

           RuleDescr [40].op[1].regs[0] := {};
     RuleDescr [40].target   := 0;
     RuleDescr [40].closuretarget := FALSE;
     RuleDescr [40].result   := 0;
     RuleDescr [40].unique := FALSE;
     RuleDescr [40].commutative := FALSE;
     RuleDescr [40].srcline := 1113;
     RuleDescr [40].scrnum := 0;
 (*   RULE 41/1118  *)
           RuleDescr [41].register := RKRegister;
     RuleDescr [41].pscarity := 1;
     RuleDescr [41].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [41].changeregs[0]  := {};
           RuleDescr [41].op[1].nt   := ntAMemAImm;
           RuleDescr [41].op[1].path := 0;              RuleDescr [41].op[1].calc := FALSE;

           RuleDescr [41].op[1].regs[0] := {};
     RuleDescr [41].target   := 0;
     RuleDescr [41].closuretarget := FALSE;
     RuleDescr [41].result   := 0;
     RuleDescr [41].unique := FALSE;
     RuleDescr [41].commutative := FALSE;
     RuleDescr [41].srcline := 1118;
     RuleDescr [41].scrnum := 0;
 (*   RULE 42/1123  *)
           RuleDescr [42].register := RKRegister;
     RuleDescr [42].pscarity := 1;
     RuleDescr [42].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [42].changeregs[0]  := {};
           RuleDescr [42].op[1].nt   := ntAMemAImm;
           RuleDescr [42].op[1].path := 0;              RuleDescr [42].op[1].calc := FALSE;

           RuleDescr [42].op[1].regs[0] := {};
     RuleDescr [42].target   := 0;
     RuleDescr [42].closuretarget := FALSE;
     RuleDescr [42].result   := 0;
     RuleDescr [42].unique := FALSE;
     RuleDescr [42].commutative := FALSE;
     RuleDescr [42].srcline := 1123;
     RuleDescr [42].scrnum := 0;
 (*   RULE 43/1129  *)
           RuleDescr [43].register := RKRegister;
     RuleDescr [43].pscarity := 1;
     RuleDescr [43].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [43].changeregs[0]  := {};
           RuleDescr [43].op[1].nt   := ntMemory;
           RuleDescr [43].op[1].path := 1;              RuleDescr [43].op[1].calc := FALSE;

           RuleDescr [43].op[1].regs[0] := {};
     RuleDescr [43].target   := 0;
     RuleDescr [43].closuretarget := FALSE;
     RuleDescr [43].result   := 0;
     RuleDescr [43].unique := FALSE;
     RuleDescr [43].commutative := FALSE;
     RuleDescr [43].srcline := 1129;
     RuleDescr [43].scrnum := 0;
 (*   RULE 44/1134  *)
           RuleDescr [44].register := RKMemory;
     RuleDescr [44].pscarity := 2;
     RuleDescr [44].resregs   [0]  := {};
     RuleDescr [44].changeregs[0]  := {};
           RuleDescr [44].op[1].nt   := ntMemory;
           RuleDescr [44].op[1].path := 1;              RuleDescr [44].op[1].calc := FALSE;

           RuleDescr [44].op[1].regs[0] := {};
           RuleDescr [44].op[2].nt   := ntARegAImm;
           RuleDescr [44].op[2].path := 2;              RuleDescr [44].op[2].calc := FALSE;

           RuleDescr [44].op[2].regs[0] := {};
     RuleDescr [44].target   := 0;
     RuleDescr [44].closuretarget := FALSE;
     RuleDescr [44].result   := 0;
     RuleDescr [44].unique := FALSE;
     RuleDescr [44].commutative := FALSE;
     RuleDescr [44].srcline := 1134;
     RuleDescr [44].scrnum := 0;
 (*   RULE 45/1139  *)
           RuleDescr [45].register := RKMemory;
     RuleDescr [45].pscarity := 2;
     RuleDescr [45].resregs   [0]  := {};
     RuleDescr [45].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [45].op[1].nt   := ntMemory;
           RuleDescr [45].op[1].path := 1;              RuleDescr [45].op[1].calc := FALSE;

           RuleDescr [45].op[1].regs[0] := {};
           RuleDescr [45].op[2].nt   := ntMemory;
           RuleDescr [45].op[2].path := 2;              RuleDescr [45].op[2].calc := FALSE;

           RuleDescr [45].op[2].regs[0] := {};
     RuleDescr [45].target   := 0;
     RuleDescr [45].closuretarget := FALSE;
     RuleDescr [45].result   := 0;
     RuleDescr [45].unique := FALSE;
     RuleDescr [45].commutative := FALSE;
     RuleDescr [45].srcline := 1139;
     RuleDescr [45].scrnum := 1;
     RuleDescr [45].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 46/1145  *)
           RuleDescr [46].register := RKMemory;
     RuleDescr [46].pscarity := 1;
     RuleDescr [46].resregs   [0]  := {};
     RuleDescr [46].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regecx)-0};
           RuleDescr [46].op[1].nt   := ntLReg;
           RuleDescr [46].op[1].path := 1;              RuleDescr [46].op[1].calc := FALSE;

           RuleDescr [46].op[1].regs[0] := { (Regedi)-0};
     RuleDescr [46].target   := 0;
     RuleDescr [46].closuretarget := FALSE;
     RuleDescr [46].result   := 0;
     RuleDescr [46].unique := FALSE;
     RuleDescr [46].commutative := FALSE;
     RuleDescr [46].srcline := 1145;
     RuleDescr [46].scrnum := 0;
 (*   RULE 47/1166  *)
           RuleDescr [47].register := RKMemory;
     RuleDescr [47].pscarity := 1;
     RuleDescr [47].resregs   [0]  := {};
     RuleDescr [47].changeregs[0]  := {};
           RuleDescr [47].op[1].nt   := ntStrCopyArgs;
           RuleDescr [47].op[1].path := 1;              RuleDescr [47].op[1].calc := FALSE;

           RuleDescr [47].op[1].regs[0] := {};
     RuleDescr [47].target   := 0;
     RuleDescr [47].closuretarget := FALSE;
     RuleDescr [47].result   := 0;
     RuleDescr [47].unique := FALSE;
     RuleDescr [47].commutative := FALSE;
     RuleDescr [47].srcline := 1166;
     RuleDescr [47].scrnum := 0;
 (*   RULE 48/1182  *)
           RuleDescr [48].register := RKAdrmode;
     RuleDescr [48].pscarity := 2;
     RuleDescr [48].resregs   [0]  := {};
     RuleDescr [48].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regecx)-0};
           RuleDescr [48].op[1].nt   := ntLReg;
           RuleDescr [48].op[1].path := 1;              RuleDescr [48].op[1].calc := FALSE;

           RuleDescr [48].op[1].regs[0] := { (Regesi)-0};
           RuleDescr [48].op[2].nt   := ntLReg;
           RuleDescr [48].op[2].path := 2;              RuleDescr [48].op[2].calc := FALSE;

           RuleDescr [48].op[2].regs[0] := { (Regedi)-0};
     RuleDescr [48].target   := 0;
     RuleDescr [48].closuretarget := FALSE;
     RuleDescr [48].result   := 0;
     RuleDescr [48].unique := FALSE;
     RuleDescr [48].commutative := FALSE;
     RuleDescr [48].srcline := 1182;
     RuleDescr [48].scrnum := 0;
 (*   RULE 49/1192  *)
           RuleDescr [49].register := RKRegister;
     RuleDescr [49].pscarity := 1;
     RuleDescr [49].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [49].changeregs[0]  := {};
           RuleDescr [49].op[1].nt   := ntMemory;
           RuleDescr [49].op[1].path := 1;              RuleDescr [49].op[1].calc := FALSE;

           RuleDescr [49].op[1].regs[0] := {};
     RuleDescr [49].target   := 0;
     RuleDescr [49].closuretarget := FALSE;
     RuleDescr [49].result   := 0;
     RuleDescr [49].unique := FALSE;
     RuleDescr [49].commutative := FALSE;
     RuleDescr [49].srcline := 1192;
     RuleDescr [49].scrnum := 0;
 (*   RULE 50/1197  *)
           RuleDescr [50].register := RKRegister;
     RuleDescr [50].pscarity := 1;
     RuleDescr [50].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [50].changeregs[0]  := {};
           RuleDescr [50].op[1].nt   := ntReducedStack;
           RuleDescr [50].op[1].path := 1;              RuleDescr [50].op[1].calc := FALSE;

           RuleDescr [50].op[1].regs[0] := {};
     RuleDescr [50].target   := 0;
     RuleDescr [50].closuretarget := FALSE;
     RuleDescr [50].result   := 0;
     RuleDescr [50].unique := FALSE;
     RuleDescr [50].commutative := FALSE;
     RuleDescr [50].srcline := 1197;
     RuleDescr [50].scrnum := 0;
 (*   RULE 51/1208  *)
           RuleDescr [51].register := RKRegister;
     RuleDescr [51].pscarity := 1;
     RuleDescr [51].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [51].changeregs[0]  := {};
           RuleDescr [51].op[1].nt   := ntMemory;
           RuleDescr [51].op[1].path := 1;              RuleDescr [51].op[1].calc := FALSE;

           RuleDescr [51].op[1].regs[0] := {};
     RuleDescr [51].target   := 0;
     RuleDescr [51].closuretarget := FALSE;
     RuleDescr [51].result   := 0;
     RuleDescr [51].unique := FALSE;
     RuleDescr [51].commutative := FALSE;
     RuleDescr [51].srcline := 1208;
     RuleDescr [51].scrnum := 0;
 (*   RULE 52/1222  *)
           RuleDescr [52].register := RKMemory;
     RuleDescr [52].pscarity := 1;
     RuleDescr [52].resregs   [0]  := {};
     RuleDescr [52].changeregs[0]  := {};
           RuleDescr [52].op[1].nt   := ntMemory;
           RuleDescr [52].op[1].path := 1;              RuleDescr [52].op[1].calc := FALSE;

           RuleDescr [52].op[1].regs[0] := {};
     RuleDescr [52].target   := 0;
     RuleDescr [52].closuretarget := FALSE;
     RuleDescr [52].result   := 0;
     RuleDescr [52].unique := FALSE;
     RuleDescr [52].commutative := FALSE;
     RuleDescr [52].srcline := 1222;
     RuleDescr [52].scrnum := 0;
 (*   RULE 53/1227  *)
           RuleDescr [53].register := RKMemory;
     RuleDescr [53].pscarity := 1;
     RuleDescr [53].resregs   [0]  := {};
     RuleDescr [53].changeregs[0]  := {};
           RuleDescr [53].op[1].nt   := ntMemory;
           RuleDescr [53].op[1].path := 1;              RuleDescr [53].op[1].calc := FALSE;

           RuleDescr [53].op[1].regs[0] := {};
     RuleDescr [53].target   := 0;
     RuleDescr [53].closuretarget := FALSE;
     RuleDescr [53].result   := 0;
     RuleDescr [53].unique := FALSE;
     RuleDescr [53].commutative := FALSE;
     RuleDescr [53].srcline := 1227;
     RuleDescr [53].scrnum := 0;
 (*   RULE 54/1233  *)
           RuleDescr [54].register := RKMemory;
     RuleDescr [54].pscarity := 0;
     RuleDescr [54].resregs   [0]  := {};
     RuleDescr [54].changeregs[0]  := {};
     RuleDescr [54].target   := 0;
     RuleDescr [54].closuretarget := FALSE;
     RuleDescr [54].result   := 0;
     RuleDescr [54].unique := FALSE;
     RuleDescr [54].commutative := FALSE;
     RuleDescr [54].srcline := 1233;
     RuleDescr [54].scrnum := 0;
 (*   RULE 55/1235  *)
           RuleDescr [55].register := RKMemory;
     RuleDescr [55].pscarity := 2;
     RuleDescr [55].resregs   [0]  := {};
     RuleDescr [55].changeregs[0]  := {};
           RuleDescr [55].op[1].nt   := ntArgs;
           RuleDescr [55].op[1].path := 1;              RuleDescr [55].op[1].calc := FALSE;

           RuleDescr [55].op[1].regs[0] := {};
           RuleDescr [55].op[2].nt   := ntAMemARegAImm;
           RuleDescr [55].op[2].path := 2;              RuleDescr [55].op[2].calc := FALSE;

           RuleDescr [55].op[2].regs[0] := {};
     RuleDescr [55].target   := 0;
     RuleDescr [55].closuretarget := FALSE;
     RuleDescr [55].result   := 0;
     RuleDescr [55].unique := FALSE;
     RuleDescr [55].commutative := FALSE;
     RuleDescr [55].srcline := 1235;
     RuleDescr [55].scrnum := 0;
 (*   RULE 56/1243  *)
           RuleDescr [56].register := RKMemory;
     RuleDescr [56].pscarity := 2;
     RuleDescr [56].resregs   [0]  := {};
     RuleDescr [56].changeregs[0]  := {};
           RuleDescr [56].op[1].nt   := ntArgs;
           RuleDescr [56].op[1].path := 1;              RuleDescr [56].op[1].calc := FALSE;

           RuleDescr [56].op[1].regs[0] := {};
           RuleDescr [56].op[2].nt   := ntReg;
           RuleDescr [56].op[2].path := 2;              RuleDescr [56].op[2].calc := FALSE;

           RuleDescr [56].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [56].target   := 0;
     RuleDescr [56].closuretarget := FALSE;
     RuleDescr [56].result   := 0;
     RuleDescr [56].unique := FALSE;
     RuleDescr [56].commutative := FALSE;
     RuleDescr [56].srcline := 1243;
     RuleDescr [56].scrnum := 0;
 (*   RULE 57/1245  *)
           RuleDescr [57].register := RKMemory;
     RuleDescr [57].pscarity := 1;
     RuleDescr [57].resregs   [0]  := {};
     RuleDescr [57].changeregs[0]  := {};
           RuleDescr [57].op[1].nt   := ntArgs;
           RuleDescr [57].op[1].path := 1;              RuleDescr [57].op[1].calc := FALSE;

           RuleDescr [57].op[1].regs[0] := {};
     RuleDescr [57].target   := 0;
     RuleDescr [57].closuretarget := FALSE;
     RuleDescr [57].result   := 0;
     RuleDescr [57].unique := FALSE;
     RuleDescr [57].commutative := FALSE;
     RuleDescr [57].srcline := 1245;
     RuleDescr [57].scrnum := 0;
 (*   RULE 58/1250  *)
           RuleDescr [58].register := RKMemory;
     RuleDescr [58].pscarity := 2;
     RuleDescr [58].resregs   [0]  := {};
     RuleDescr [58].changeregs[0]  := {};
           RuleDescr [58].op[1].nt   := ntArgs;
           RuleDescr [58].op[1].path := 1;              RuleDescr [58].op[1].calc := FALSE;

           RuleDescr [58].op[1].regs[0] := {};
           RuleDescr [58].op[2].nt   := ntReg;
           RuleDescr [58].op[2].path := 2;              RuleDescr [58].op[2].calc := FALSE;

           RuleDescr [58].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [58].target   := 0;
     RuleDescr [58].closuretarget := FALSE;
     RuleDescr [58].result   := 0;
     RuleDescr [58].unique := FALSE;
     RuleDescr [58].commutative := FALSE;
     RuleDescr [58].srcline := 1250;
     RuleDescr [58].scrnum := 0;
 (*   RULE 59/1256  *)
           RuleDescr [59].register := RKMemory;
     RuleDescr [59].pscarity := 2;
     RuleDescr [59].resregs   [0]  := {};
     RuleDescr [59].changeregs[0]  := {};
           RuleDescr [59].op[1].nt   := ntArgs;
           RuleDescr [59].op[1].path := 1;              RuleDescr [59].op[1].calc := FALSE;

           RuleDescr [59].op[1].regs[0] := {};
           RuleDescr [59].op[2].nt   := ntReg;
           RuleDescr [59].op[2].path := 2;              RuleDescr [59].op[2].calc := FALSE;

           RuleDescr [59].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [59].target   := 0;
     RuleDescr [59].closuretarget := FALSE;
     RuleDescr [59].result   := 0;
     RuleDescr [59].unique := FALSE;
     RuleDescr [59].commutative := FALSE;
     RuleDescr [59].srcline := 1256;
     RuleDescr [59].scrnum := 0;
 (*   RULE 60/1263  *)
           RuleDescr [60].register := RKMemory;
     RuleDescr [60].pscarity := 2;
     RuleDescr [60].resregs   [0]  := {};
     RuleDescr [60].changeregs[0]  := {};
           RuleDescr [60].op[1].nt   := ntArgs;
           RuleDescr [60].op[1].path := 1;              RuleDescr [60].op[1].calc := FALSE;

           RuleDescr [60].op[1].regs[0] := {};
           RuleDescr [60].op[2].nt   := ntReg;
           RuleDescr [60].op[2].path := 2;              RuleDescr [60].op[2].calc := FALSE;

           RuleDescr [60].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [60].target   := 0;
     RuleDescr [60].closuretarget := FALSE;
     RuleDescr [60].result   := 0;
     RuleDescr [60].unique := FALSE;
     RuleDescr [60].commutative := FALSE;
     RuleDescr [60].srcline := 1263;
     RuleDescr [60].scrnum := 1;
     RuleDescr [60].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 61/1292  *)
           RuleDescr [61].register := RKMemory;
     RuleDescr [61].pscarity := 2;
     RuleDescr [61].resregs   [0]  := {};
     RuleDescr [61].changeregs[0]  := {};
           RuleDescr [61].op[1].nt   := ntArgs;
           RuleDescr [61].op[1].path := 1;              RuleDescr [61].op[1].calc := FALSE;

           RuleDescr [61].op[1].regs[0] := {};
           RuleDescr [61].op[2].nt   := ntReg;
           RuleDescr [61].op[2].path := 2;              RuleDescr [61].op[2].calc := FALSE;

           RuleDescr [61].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [61].target   := 0;
     RuleDescr [61].closuretarget := FALSE;
     RuleDescr [61].result   := 0;
     RuleDescr [61].unique := FALSE;
     RuleDescr [61].commutative := FALSE;
     RuleDescr [61].srcline := 1292;
     RuleDescr [61].scrnum := 0;
 (*   RULE 62/1298  *)
           RuleDescr [62].register := RKMemory;
     RuleDescr [62].pscarity := 2;
     RuleDescr [62].resregs   [0]  := {};
     RuleDescr [62].changeregs[0]  := {};
           RuleDescr [62].op[1].nt   := ntArgs;
           RuleDescr [62].op[1].path := 1;              RuleDescr [62].op[1].calc := FALSE;

           RuleDescr [62].op[1].regs[0] := {};
           RuleDescr [62].op[2].nt   := ntReg;
           RuleDescr [62].op[2].path := 2;              RuleDescr [62].op[2].calc := FALSE;

           RuleDescr [62].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [62].target   := 0;
     RuleDescr [62].closuretarget := FALSE;
     RuleDescr [62].result   := 0;
     RuleDescr [62].unique := FALSE;
     RuleDescr [62].commutative := FALSE;
     RuleDescr [62].srcline := 1298;
     RuleDescr [62].scrnum := 1;
     RuleDescr [62].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 63/1327  *)
           RuleDescr [63].register := RKMemory;
     RuleDescr [63].pscarity := 2;
     RuleDescr [63].resregs   [0]  := {};
     RuleDescr [63].changeregs[0]  := {};
           RuleDescr [63].op[1].nt   := ntArgs;
           RuleDescr [63].op[1].path := 1;              RuleDescr [63].op[1].calc := FALSE;

           RuleDescr [63].op[1].regs[0] := {};
           RuleDescr [63].op[2].nt   := ntReg;
           RuleDescr [63].op[2].path := 2;              RuleDescr [63].op[2].calc := FALSE;

           RuleDescr [63].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [63].target   := 0;
     RuleDescr [63].closuretarget := FALSE;
     RuleDescr [63].result   := 0;
     RuleDescr [63].unique := FALSE;
     RuleDescr [63].commutative := FALSE;
     RuleDescr [63].srcline := 1327;
     RuleDescr [63].scrnum := 1;
     RuleDescr [63].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 64/1334  *)
           RuleDescr [64].register := RKMemory;
     RuleDescr [64].pscarity := 2;
     RuleDescr [64].resregs   [0]  := {};
     RuleDescr [64].changeregs[0]  := {};
           RuleDescr [64].op[1].nt   := ntArgs;
           RuleDescr [64].op[1].path := 1;              RuleDescr [64].op[1].calc := FALSE;

           RuleDescr [64].op[1].regs[0] := {};
           RuleDescr [64].op[2].nt   := ntReg;
           RuleDescr [64].op[2].path := 2;              RuleDescr [64].op[2].calc := FALSE;

           RuleDescr [64].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [64].target   := 0;
     RuleDescr [64].closuretarget := FALSE;
     RuleDescr [64].result   := 0;
     RuleDescr [64].unique := FALSE;
     RuleDescr [64].commutative := FALSE;
     RuleDescr [64].srcline := 1334;
     RuleDescr [64].scrnum := 1;
     RuleDescr [64].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 65/1346  *)
           RuleDescr [65].register := RKMemory;
     RuleDescr [65].pscarity := 3;
     RuleDescr [65].resregs   [0]  := {};
     RuleDescr [65].changeregs[0]  := {};
           RuleDescr [65].op[1].nt   := ntArgs;
           RuleDescr [65].op[1].path := 1;              RuleDescr [65].op[1].calc := FALSE;

           RuleDescr [65].op[1].regs[0] := {};
           RuleDescr [65].op[2].nt   := ntReducedStack;
           RuleDescr [65].op[2].path := 2;              RuleDescr [65].op[2].calc := FALSE;

           RuleDescr [65].op[2].regs[0] := {};
           RuleDescr [65].op[3].nt   := ntLReg;
           RuleDescr [65].op[3].path := 3;              RuleDescr [65].op[3].calc := FALSE;

           RuleDescr [65].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [65].target   := 0;
     RuleDescr [65].closuretarget := FALSE;
     RuleDescr [65].result   := 0;
     RuleDescr [65].unique := FALSE;
     RuleDescr [65].commutative := FALSE;
     RuleDescr [65].srcline := 1346;
     RuleDescr [65].scrnum := 0;
 (*   RULE 66/1351  *)
           RuleDescr [66].register := RKMemory;
     RuleDescr [66].pscarity := 2;
     RuleDescr [66].resregs   [0]  := {};
     RuleDescr [66].changeregs[0]  := {};
           RuleDescr [66].op[1].nt   := ntArgs;
           RuleDescr [66].op[1].path := 1;              RuleDescr [66].op[1].calc := FALSE;

           RuleDescr [66].op[1].regs[0] := {};
           RuleDescr [66].op[2].nt   := ntReducedStack;
           RuleDescr [66].op[2].path := 2;              RuleDescr [66].op[2].calc := FALSE;

           RuleDescr [66].op[2].regs[0] := {};
     RuleDescr [66].target   := 0;
     RuleDescr [66].closuretarget := FALSE;
     RuleDescr [66].result   := 0;
     RuleDescr [66].unique := FALSE;
     RuleDescr [66].commutative := FALSE;
     RuleDescr [66].srcline := 1351;
     RuleDescr [66].scrnum := 0;
 (*   RULE 67/1357  *)
           RuleDescr [67].register := RKAdrmode;
     RuleDescr [67].pscarity := 1;
     RuleDescr [67].resregs   [0]  := {};
     RuleDescr [67].changeregs[0]  := {};
           RuleDescr [67].op[1].nt   := ntArgs;
           RuleDescr [67].op[1].path := 1;              RuleDescr [67].op[1].calc := FALSE;

           RuleDescr [67].op[1].regs[0] := {};
     RuleDescr [67].target   := 0;
     RuleDescr [67].closuretarget := FALSE;
     RuleDescr [67].result   := 0;
     RuleDescr [67].unique := FALSE;
     RuleDescr [67].commutative := FALSE;
     RuleDescr [67].srcline := 1357;
     RuleDescr [67].scrnum := 0;
 (*   RULE 68/1365  *)
           RuleDescr [68].register := RKAdrmode;
     RuleDescr [68].pscarity := 2;
     RuleDescr [68].resregs   [0]  := {};
     RuleDescr [68].changeregs[0]  := {};
           RuleDescr [68].op[1].nt   := ntLReg;
           RuleDescr [68].op[1].path := 1;              RuleDescr [68].op[1].calc := FALSE;

           RuleDescr [68].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [68].op[2].nt   := ntArgs;
           RuleDescr [68].op[2].path := 2;              RuleDescr [68].op[2].calc := FALSE;

           RuleDescr [68].op[2].regs[0] := {};
     RuleDescr [68].target   := 0;
     RuleDescr [68].closuretarget := FALSE;
     RuleDescr [68].result   := 0;
     RuleDescr [68].unique := FALSE;
     RuleDescr [68].commutative := FALSE;
     RuleDescr [68].srcline := 1365;
     RuleDescr [68].scrnum := 0;
 (*   RULE 69/1373  *)
           RuleDescr [69].register := RKAdrmode;
     RuleDescr [69].pscarity := 2;
     RuleDescr [69].resregs   [0]  := {};
     RuleDescr [69].changeregs[0]  := {};
           RuleDescr [69].op[1].nt   := ntLReg;
           RuleDescr [69].op[1].path := 1;              RuleDescr [69].op[1].calc := FALSE;

           RuleDescr [69].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [69].op[2].nt   := ntArgs;
           RuleDescr [69].op[2].path := 2;              RuleDescr [69].op[2].calc := FALSE;

           RuleDescr [69].op[2].regs[0] := {};
     RuleDescr [69].target   := 0;
     RuleDescr [69].closuretarget := FALSE;
     RuleDescr [69].result   := 0;
     RuleDescr [69].unique := FALSE;
     RuleDescr [69].commutative := FALSE;
     RuleDescr [69].srcline := 1373;
     RuleDescr [69].scrnum := 0;
 (*   RULE 70/1388  *)
           RuleDescr [70].register := RKAdrmode;
     RuleDescr [70].pscarity := 2;
     RuleDescr [70].resregs   [0]  := {};
     RuleDescr [70].changeregs[0]  := {};
           RuleDescr [70].op[1].nt   := ntLReg;
           RuleDescr [70].op[1].path := 1;              RuleDescr [70].op[1].calc := FALSE;

           RuleDescr [70].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [70].op[2].nt   := ntArgs;
           RuleDescr [70].op[2].path := 2;              RuleDescr [70].op[2].calc := FALSE;

           RuleDescr [70].op[2].regs[0] := {};
     RuleDescr [70].target   := 0;
     RuleDescr [70].closuretarget := FALSE;
     RuleDescr [70].result   := 0;
     RuleDescr [70].unique := FALSE;
     RuleDescr [70].commutative := FALSE;
     RuleDescr [70].srcline := 1388;
     RuleDescr [70].scrnum := 0;
 (*   RULE 71/1404  *)
           RuleDescr [71].register := RKAdrmode;
     RuleDescr [71].pscarity := 2;
     RuleDescr [71].resregs   [0]  := {};
     RuleDescr [71].changeregs[0]  := {};
           RuleDescr [71].op[1].nt   := ntLReg;
           RuleDescr [71].op[1].path := 1;              RuleDescr [71].op[1].calc := FALSE;

           RuleDescr [71].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [71].op[2].nt   := ntArgs;
           RuleDescr [71].op[2].path := 2;              RuleDescr [71].op[2].calc := FALSE;

           RuleDescr [71].op[2].regs[0] := {};
     RuleDescr [71].target   := 0;
     RuleDescr [71].closuretarget := FALSE;
     RuleDescr [71].result   := 0;
     RuleDescr [71].unique := FALSE;
     RuleDescr [71].commutative := FALSE;
     RuleDescr [71].srcline := 1404;
     RuleDescr [71].scrnum := 0;
 (*   RULE 72/1419  *)
           RuleDescr [72].register := RKMemory;
     RuleDescr [72].pscarity := 0;
     RuleDescr [72].resregs   [0]  := {};
     RuleDescr [72].changeregs[0]  := {};
     RuleDescr [72].target   := 0;
     RuleDescr [72].closuretarget := FALSE;
     RuleDescr [72].result   := 0;
     RuleDescr [72].unique := FALSE;
     RuleDescr [72].commutative := FALSE;
     RuleDescr [72].srcline := 1419;
     RuleDescr [72].scrnum := 0;
 (*   RULE 73/1424  *)
           RuleDescr [73].register := RKMemory;
     RuleDescr [73].pscarity := 1;
     RuleDescr [73].resregs   [0]  := {};
     RuleDescr [73].changeregs[0]  := {};
           RuleDescr [73].op[1].nt   := ntBReg;
           RuleDescr [73].op[1].path := 1;              RuleDescr [73].op[1].calc := FALSE;

           RuleDescr [73].op[1].regs[0] := { (Regal)-0};
     RuleDescr [73].target   := 0;
     RuleDescr [73].closuretarget := FALSE;
     RuleDescr [73].result   := 0;
     RuleDescr [73].unique := FALSE;
     RuleDescr [73].commutative := FALSE;
     RuleDescr [73].srcline := 1424;
     RuleDescr [73].scrnum := 0;
 (*   RULE 74/1429  *)
           RuleDescr [74].register := RKMemory;
     RuleDescr [74].pscarity := 1;
     RuleDescr [74].resregs   [0]  := {};
     RuleDescr [74].changeregs[0]  := {};
           RuleDescr [74].op[1].nt   := ntWReg;
           RuleDescr [74].op[1].path := 1;              RuleDescr [74].op[1].calc := FALSE;

           RuleDescr [74].op[1].regs[0] := { (Regax)-0};
     RuleDescr [74].target   := 0;
     RuleDescr [74].closuretarget := FALSE;
     RuleDescr [74].result   := 0;
     RuleDescr [74].unique := FALSE;
     RuleDescr [74].commutative := FALSE;
     RuleDescr [74].srcline := 1429;
     RuleDescr [74].scrnum := 0;
 (*   RULE 75/1434  *)
           RuleDescr [75].register := RKMemory;
     RuleDescr [75].pscarity := 1;
     RuleDescr [75].resregs   [0]  := {};
     RuleDescr [75].changeregs[0]  := {};
           RuleDescr [75].op[1].nt   := ntLReg;
           RuleDescr [75].op[1].path := 1;              RuleDescr [75].op[1].calc := FALSE;

           RuleDescr [75].op[1].regs[0] := { (Regeax)-0};
     RuleDescr [75].target   := 0;
     RuleDescr [75].closuretarget := FALSE;
     RuleDescr [75].result   := 0;
     RuleDescr [75].unique := FALSE;
     RuleDescr [75].commutative := FALSE;
     RuleDescr [75].srcline := 1434;
     RuleDescr [75].scrnum := 0;
 (*   RULE 76/1440  *)
           RuleDescr [76].register := RKMemory;
     RuleDescr [76].pscarity := 1;
     RuleDescr [76].resregs   [0]  := {};
     RuleDescr [76].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [76].op[1].nt   := ntMemory;
           RuleDescr [76].op[1].path := 1;              RuleDescr [76].op[1].calc := FALSE;

           RuleDescr [76].op[1].regs[0] := {};
     RuleDescr [76].target   := 0;
     RuleDescr [76].closuretarget := FALSE;
     RuleDescr [76].result   := 0;
     RuleDescr [76].unique := FALSE;
     RuleDescr [76].commutative := FALSE;
     RuleDescr [76].srcline := 1440;
     RuleDescr [76].scrnum := 0;
 (*   RULE 77/1443  *)
           RuleDescr [77].register := RKRegister;
     RuleDescr [77].pscarity := 1;
     RuleDescr [77].resregs   [0]  := { (Regal)-0};
     RuleDescr [77].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [77].op[1].nt   := ntMemory;
           RuleDescr [77].op[1].path := 1;              RuleDescr [77].op[1].calc := FALSE;

           RuleDescr [77].op[1].regs[0] := {};
     RuleDescr [77].target   := 0;
     RuleDescr [77].closuretarget := FALSE;
     RuleDescr [77].result   := 0;
     RuleDescr [77].unique := FALSE;
     RuleDescr [77].commutative := FALSE;
     RuleDescr [77].srcline := 1443;
     RuleDescr [77].scrnum := 0;
 (*   RULE 78/1447  *)
           RuleDescr [78].register := RKRegister;
     RuleDescr [78].pscarity := 1;
     RuleDescr [78].resregs   [0]  := { (Regax)-0};
     RuleDescr [78].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [78].op[1].nt   := ntMemory;
           RuleDescr [78].op[1].path := 1;              RuleDescr [78].op[1].calc := FALSE;

           RuleDescr [78].op[1].regs[0] := {};
     RuleDescr [78].target   := 0;
     RuleDescr [78].closuretarget := FALSE;
     RuleDescr [78].result   := 0;
     RuleDescr [78].unique := FALSE;
     RuleDescr [78].commutative := FALSE;
     RuleDescr [78].srcline := 1447;
     RuleDescr [78].scrnum := 0;
 (*   RULE 79/1451  *)
           RuleDescr [79].register := RKRegister;
     RuleDescr [79].pscarity := 1;
     RuleDescr [79].resregs   [0]  := { (Regeax)-0};
     RuleDescr [79].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [79].op[1].nt   := ntMemory;
           RuleDescr [79].op[1].path := 1;              RuleDescr [79].op[1].calc := FALSE;

           RuleDescr [79].op[1].regs[0] := {};
     RuleDescr [79].target   := 0;
     RuleDescr [79].closuretarget := FALSE;
     RuleDescr [79].result   := 0;
     RuleDescr [79].unique := FALSE;
     RuleDescr [79].commutative := FALSE;
     RuleDescr [79].srcline := 1451;
     RuleDescr [79].scrnum := 0;
 (*   RULE 80/1458  *)
           RuleDescr [80].register := RKMemory;
     RuleDescr [80].pscarity := 1;
     RuleDescr [80].resregs   [0]  := {};
     RuleDescr [80].changeregs[0]  := {};
           RuleDescr [80].op[1].nt   := ntReg;
           RuleDescr [80].op[1].path := 1;              RuleDescr [80].op[1].calc := FALSE;

           RuleDescr [80].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [80].target   := 0;
     RuleDescr [80].closuretarget := FALSE;
     RuleDescr [80].result   := 0;
     RuleDescr [80].unique := FALSE;
     RuleDescr [80].commutative := FALSE;
     RuleDescr [80].srcline := 1458;
     RuleDescr [80].scrnum := 0;
 (*   RULE 81/1483  *)
           RuleDescr [81].register := RKMemory;
     RuleDescr [81].pscarity := 1;
     RuleDescr [81].resregs   [0]  := {};
     RuleDescr [81].changeregs[0]  := {};
           RuleDescr [81].op[1].nt   := ntMemory;
           RuleDescr [81].op[1].path := 1;              RuleDescr [81].op[1].calc := FALSE;

           RuleDescr [81].op[1].regs[0] := {};
     RuleDescr [81].target   := 0;
     RuleDescr [81].closuretarget := FALSE;
     RuleDescr [81].result   := 0;
     RuleDescr [81].unique := FALSE;
     RuleDescr [81].commutative := FALSE;
     RuleDescr [81].srcline := 1483;
     RuleDescr [81].scrnum := 1;
     RuleDescr [81].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 82/1508  *)
           RuleDescr [82].register := RKRegister;
     RuleDescr [82].pscarity := 1;
     RuleDescr [82].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [82].changeregs[0]  := {};
           RuleDescr [82].op[1].nt   := ntReg;
           RuleDescr [82].op[1].path := 1;              RuleDescr [82].op[1].calc := FALSE;

           RuleDescr [82].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [82].target   := 1;
     RuleDescr [82].closuretarget := FALSE;
     RuleDescr [82].result   := 0;
     RuleDescr [82].unique := FALSE;
     RuleDescr [82].commutative := FALSE;
     RuleDescr [82].srcline := 1508;
     RuleDescr [82].scrnum := 0;
 (*   RULE 83/1515  *)
           RuleDescr [83].register := RKRegister;
     RuleDescr [83].pscarity := 2;
     RuleDescr [83].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [83].changeregs[0]  := {};
           RuleDescr [83].op[1].nt   := ntAMemARegAImm;
           RuleDescr [83].op[1].path := 1;              RuleDescr [83].op[1].calc := FALSE;

           RuleDescr [83].op[1].regs[0] := {};
           RuleDescr [83].op[2].nt   := ntReg;
           RuleDescr [83].op[2].path := 2;              RuleDescr [83].op[2].calc := FALSE;

           RuleDescr [83].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [83].target   := 2;
     RuleDescr [83].closuretarget := FALSE;
     RuleDescr [83].result   := 0;
     RuleDescr [83].unique := FALSE;
     RuleDescr [83].commutative := TRUE;
     RuleDescr [83].srcline := 1515;
     RuleDescr [83].scrnum := 0;
 (*   RULE 84/1515  *)
           RuleDescr [84].register := RKRegister;
     RuleDescr [84].pscarity := 2;
     RuleDescr [84].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [84].changeregs[0]  := {};
           RuleDescr [84].op[1].nt   := ntReg;
           RuleDescr [84].op[1].path := 1;              RuleDescr [84].op[1].calc := FALSE;

           RuleDescr [84].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [84].op[2].nt   := ntAMemARegAImm;
           RuleDescr [84].op[2].path := 2;              RuleDescr [84].op[2].calc := FALSE;

           RuleDescr [84].op[2].regs[0] := {};
     RuleDescr [84].target   := 1;
     RuleDescr [84].closuretarget := FALSE;
     RuleDescr [84].result   := 0;
     RuleDescr [84].unique := FALSE;
     RuleDescr [84].commutative := TRUE;
     RuleDescr [84].srcline := 1515;
     RuleDescr [84].scrnum := 0;
 (*   RULE 85/1522  *)
           RuleDescr [85].register := RKRegister;
     RuleDescr [85].pscarity := 2;
     RuleDescr [85].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [85].changeregs[0]  := {};
           RuleDescr [85].op[1].nt   := ntReg;
           RuleDescr [85].op[1].path := 1;              RuleDescr [85].op[1].calc := FALSE;

           RuleDescr [85].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [85].op[2].nt   := ntAMemARegAImm;
           RuleDescr [85].op[2].path := 2;              RuleDescr [85].op[2].calc := FALSE;

           RuleDescr [85].op[2].regs[0] := {};
     RuleDescr [85].target   := 1;
     RuleDescr [85].closuretarget := FALSE;
     RuleDescr [85].result   := 0;
     RuleDescr [85].unique := FALSE;
     RuleDescr [85].commutative := FALSE;
     RuleDescr [85].srcline := 1522;
     RuleDescr [85].scrnum := 0;
 (*   RULE 86/1529  *)
           RuleDescr [86].register := RKRegister;
     RuleDescr [86].pscarity := 2;
     RuleDescr [86].resregs   [0]  := { (Regal)-0};
     RuleDescr [86].changeregs[0]  := { (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [86].op[1].nt   := ntBReg;
           RuleDescr [86].op[1].path := 1;              RuleDescr [86].op[1].calc := FALSE;

           RuleDescr [86].op[1].regs[0] := { (Regal)-0};
           RuleDescr [86].op[2].nt   := ntBReg;
           RuleDescr [86].op[2].path := 2;              RuleDescr [86].op[2].calc := FALSE;

           RuleDescr [86].op[2].regs[0] := { (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0};
     RuleDescr [86].target   := 1;
     RuleDescr [86].closuretarget := FALSE;
     RuleDescr [86].result   := 0;
     RuleDescr [86].unique := FALSE;
     RuleDescr [86].commutative := FALSE;
     RuleDescr [86].srcline := 1529;
     RuleDescr [86].scrnum := 0;
 (*   RULE 87/1544  *)
           RuleDescr [87].register := RKRegister;
     RuleDescr [87].pscarity := 2;
     RuleDescr [87].resregs   [0]  := { (Regax)-0};
     RuleDescr [87].changeregs[0]  := { (Regdl)-0,  (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
           RuleDescr [87].op[1].nt   := ntWReg;
           RuleDescr [87].op[1].path := 1;              RuleDescr [87].op[1].calc := FALSE;

           RuleDescr [87].op[1].regs[0] := { (Regax)-0};
           RuleDescr [87].op[2].nt   := ntWReg;
           RuleDescr [87].op[2].path := 2;              RuleDescr [87].op[2].calc := FALSE;

           RuleDescr [87].op[2].regs[0] := { (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [87].target   := 1;
     RuleDescr [87].closuretarget := FALSE;
     RuleDescr [87].result   := 0;
     RuleDescr [87].unique := FALSE;
     RuleDescr [87].commutative := FALSE;
     RuleDescr [87].srcline := 1544;
     RuleDescr [87].scrnum := 0;
 (*   RULE 88/1559  *)
           RuleDescr [88].register := RKRegister;
     RuleDescr [88].pscarity := 2;
     RuleDescr [88].resregs   [0]  := { (Regeax)-0};
     RuleDescr [88].changeregs[0]  := { (Regdl)-0,  (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
           RuleDescr [88].op[1].nt   := ntLReg;
           RuleDescr [88].op[1].path := 1;              RuleDescr [88].op[1].calc := FALSE;

           RuleDescr [88].op[1].regs[0] := { (Regeax)-0};
           RuleDescr [88].op[2].nt   := ntLReg;
           RuleDescr [88].op[2].path := 2;              RuleDescr [88].op[2].calc := FALSE;

           RuleDescr [88].op[2].regs[0] := { (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [88].target   := 1;
     RuleDescr [88].closuretarget := FALSE;
     RuleDescr [88].result   := 0;
     RuleDescr [88].unique := FALSE;
     RuleDescr [88].commutative := FALSE;
     RuleDescr [88].srcline := 1559;
     RuleDescr [88].scrnum := 0;
 (*   RULE 89/1575  *)
           RuleDescr [89].register := RKRegister;
     RuleDescr [89].pscarity := 2;
     RuleDescr [89].resregs   [0]  := { (Regah)-0};
     RuleDescr [89].changeregs[0]  := {};
           RuleDescr [89].op[1].nt   := ntBReg;
           RuleDescr [89].op[1].path := 1;              RuleDescr [89].op[1].calc := FALSE;

           RuleDescr [89].op[1].regs[0] := { (Regal)-0};
           RuleDescr [89].op[2].nt   := ntBReg;
           RuleDescr [89].op[2].path := 2;              RuleDescr [89].op[2].calc := FALSE;

           RuleDescr [89].op[2].regs[0] := { (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0};
     RuleDescr [89].target   := 0;
     RuleDescr [89].closuretarget := FALSE;
     RuleDescr [89].result   := 0;
     RuleDescr [89].unique := FALSE;
     RuleDescr [89].commutative := FALSE;
     RuleDescr [89].srcline := 1575;
     RuleDescr [89].scrnum := 0;
 (*   RULE 90/1588  *)
           RuleDescr [90].register := RKRegister;
     RuleDescr [90].pscarity := 2;
     RuleDescr [90].resregs   [0]  := { (Regdx)-0};
     RuleDescr [90].changeregs[0]  := {};
           RuleDescr [90].op[1].nt   := ntWReg;
           RuleDescr [90].op[1].path := 1;              RuleDescr [90].op[1].calc := FALSE;

           RuleDescr [90].op[1].regs[0] := { (Regax)-0};
           RuleDescr [90].op[2].nt   := ntWReg;
           RuleDescr [90].op[2].path := 2;              RuleDescr [90].op[2].calc := FALSE;

           RuleDescr [90].op[2].regs[0] := { (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [90].target   := 0;
     RuleDescr [90].closuretarget := FALSE;
     RuleDescr [90].result   := 0;
     RuleDescr [90].unique := FALSE;
     RuleDescr [90].commutative := FALSE;
     RuleDescr [90].srcline := 1588;
     RuleDescr [90].scrnum := 0;
 (*   RULE 91/1601  *)
           RuleDescr [91].register := RKRegister;
     RuleDescr [91].pscarity := 2;
     RuleDescr [91].resregs   [0]  := { (Regedx)-0};
     RuleDescr [91].changeregs[0]  := {};
           RuleDescr [91].op[1].nt   := ntLReg;
           RuleDescr [91].op[1].path := 1;              RuleDescr [91].op[1].calc := FALSE;

           RuleDescr [91].op[1].regs[0] := { (Regeax)-0};
           RuleDescr [91].op[2].nt   := ntLReg;
           RuleDescr [91].op[2].path := 2;              RuleDescr [91].op[2].calc := FALSE;

           RuleDescr [91].op[2].regs[0] := { (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [91].target   := 0;
     RuleDescr [91].closuretarget := FALSE;
     RuleDescr [91].result   := 0;
     RuleDescr [91].unique := FALSE;
     RuleDescr [91].commutative := FALSE;
     RuleDescr [91].srcline := 1601;
     RuleDescr [91].scrnum := 0;
 (*   RULE 92/1615  *)
           RuleDescr [92].register := RKRegister;
     RuleDescr [92].pscarity := 2;
     RuleDescr [92].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [92].changeregs[0]  := {};
           RuleDescr [92].op[1].nt   := ntAMemARegAImm;
           RuleDescr [92].op[1].path := 1;              RuleDescr [92].op[1].calc := FALSE;

           RuleDescr [92].op[1].regs[0] := {};
           RuleDescr [92].op[2].nt   := ntLReg;
           RuleDescr [92].op[2].path := 2;              RuleDescr [92].op[2].calc := FALSE;

           RuleDescr [92].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [92].target   := 2;
     RuleDescr [92].closuretarget := FALSE;
     RuleDescr [92].result   := 0;
     RuleDescr [92].unique := FALSE;
     RuleDescr [92].commutative := FALSE;
     RuleDescr [92].srcline := 1615;
     RuleDescr [92].scrnum := 0;
 (*   RULE 93/1622  *)
           RuleDescr [93].register := RKRegister;
     RuleDescr [93].pscarity := 2;
     RuleDescr [93].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [93].changeregs[0]  := {};
           RuleDescr [93].op[1].nt   := ntLReg;
           RuleDescr [93].op[1].path := 1;              RuleDescr [93].op[1].calc := FALSE;

           RuleDescr [93].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [93].op[2].nt   := ntLReg;
           RuleDescr [93].op[2].path := 2;              RuleDescr [93].op[2].calc := FALSE;

           RuleDescr [93].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [93].target   := 1;
     RuleDescr [93].closuretarget := FALSE;
     RuleDescr [93].result   := 0;
     RuleDescr [93].unique := FALSE;
     RuleDescr [93].commutative := FALSE;
     RuleDescr [93].srcline := 1622;
     RuleDescr [93].scrnum := 0;
 (*   RULE 94/1630  *)
           RuleDescr [94].register := RKRegister;
     RuleDescr [94].pscarity := 3;
     RuleDescr [94].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [94].changeregs[0]  := {};
           RuleDescr [94].op[1].nt   := ntLReg;
           RuleDescr [94].op[1].path := 1;              RuleDescr [94].op[1].calc := FALSE;

           RuleDescr [94].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [94].op[2].nt   := ntLReg;
           RuleDescr [94].op[2].path := 2;              RuleDescr [94].op[2].calc := FALSE;

           RuleDescr [94].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [94].op[3].nt   := ntLReg;
           RuleDescr [94].op[3].path := 3;              RuleDescr [94].op[3].calc := FALSE;

           RuleDescr [94].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [94].target   := 1;
     RuleDescr [94].closuretarget := FALSE;
     RuleDescr [94].result   := 0;
     RuleDescr [94].unique := FALSE;
     RuleDescr [94].commutative := FALSE;
     RuleDescr [94].srcline := 1630;
     RuleDescr [94].scrnum := 0;
 (*   RULE 95/1651  *)
           RuleDescr [95].register := RKMemory;
     RuleDescr [95].pscarity := 1;
     RuleDescr [95].resregs   [0]  := {};
     RuleDescr [95].changeregs[0]  := {};
           RuleDescr [95].op[1].nt   := ntBool;
           RuleDescr [95].op[1].path := 1;              RuleDescr [95].op[1].calc := FALSE;

           RuleDescr [95].op[1].regs[0] := {};
     RuleDescr [95].target   := 0;
     RuleDescr [95].closuretarget := FALSE;
     RuleDescr [95].result   := 0;
     RuleDescr [95].unique := FALSE;
     RuleDescr [95].commutative := FALSE;
     RuleDescr [95].srcline := 1651;
     RuleDescr [95].scrnum := 0;
 (*   RULE 96/1654  *)
           RuleDescr [96].register := RKRegister;
     RuleDescr [96].pscarity := 1;
     RuleDescr [96].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [96].changeregs[0]  := {};
           RuleDescr [96].op[1].nt   := ntBool;
           RuleDescr [96].op[1].path := 1;              RuleDescr [96].op[1].calc := FALSE;

           RuleDescr [96].op[1].regs[0] := {};
     RuleDescr [96].target   := 0;
     RuleDescr [96].closuretarget := FALSE;
     RuleDescr [96].result   := 0;
     RuleDescr [96].unique := FALSE;
     RuleDescr [96].commutative := FALSE;
     RuleDescr [96].srcline := 1654;
     RuleDescr [96].scrnum := 0;
 (*   RULE 97/1663  *)
           RuleDescr [97].register := RKMemory;
     RuleDescr [97].pscarity := 1;
     RuleDescr [97].resregs   [0]  := {};
     RuleDescr [97].changeregs[0]  := {};
           RuleDescr [97].op[1].nt   := ntBool;
           RuleDescr [97].op[1].path := 1;              RuleDescr [97].op[1].calc := FALSE;

           RuleDescr [97].op[1].regs[0] := {};
     RuleDescr [97].target   := 0;
     RuleDescr [97].closuretarget := FALSE;
     RuleDescr [97].result   := 0;
     RuleDescr [97].unique := FALSE;
     RuleDescr [97].commutative := FALSE;
     RuleDescr [97].srcline := 1663;
     RuleDescr [97].scrnum := 0;
 (*   RULE 98/1664  *)
           RuleDescr [98].register := RKMemory;
     RuleDescr [98].pscarity := 2;
     RuleDescr [98].resregs   [0]  := {};
     RuleDescr [98].changeregs[0]  := {};
           RuleDescr [98].op[1].nt   := ntBool;
           RuleDescr [98].op[1].path := 1;              RuleDescr [98].op[1].calc := FALSE;

           RuleDescr [98].op[1].regs[0] := {};
           RuleDescr [98].op[2].nt   := ntBool;
           RuleDescr [98].op[2].path := 2;              RuleDescr [98].op[2].calc := FALSE;

           RuleDescr [98].op[2].regs[0] := {};
     RuleDescr [98].target   := 0;
     RuleDescr [98].closuretarget := FALSE;
     RuleDescr [98].result   := 0;
     RuleDescr [98].unique := FALSE;
     RuleDescr [98].commutative := FALSE;
     RuleDescr [98].srcline := 1664;
     RuleDescr [98].scrnum := 0;
 (*   RULE 99/1665  *)
           RuleDescr [99].register := RKMemory;
     RuleDescr [99].pscarity := 2;
     RuleDescr [99].resregs   [0]  := {};
     RuleDescr [99].changeregs[0]  := {};
           RuleDescr [99].op[1].nt   := ntBool;
           RuleDescr [99].op[1].path := 1;              RuleDescr [99].op[1].calc := FALSE;

           RuleDescr [99].op[1].regs[0] := {};
           RuleDescr [99].op[2].nt   := ntBool;
           RuleDescr [99].op[2].path := 2;              RuleDescr [99].op[2].calc := FALSE;

           RuleDescr [99].op[2].regs[0] := {};
     RuleDescr [99].target   := 0;
     RuleDescr [99].closuretarget := FALSE;
     RuleDescr [99].result   := 0;
     RuleDescr [99].unique := FALSE;
     RuleDescr [99].commutative := FALSE;
     RuleDescr [99].srcline := 1665;
     RuleDescr [99].scrnum := 0;
 (*   RULE 100/1668  *)
           RuleDescr [100].register := RKMemory;
     RuleDescr [100].pscarity := 1;
     RuleDescr [100].resregs   [0]  := {};
     RuleDescr [100].changeregs[0]  := {};
           RuleDescr [100].op[1].nt   := ntLab;
           RuleDescr [100].op[1].path := 1;              RuleDescr [100].op[1].calc := FALSE;

           RuleDescr [100].op[1].regs[0] := {};
     RuleDescr [100].target   := 0;
     RuleDescr [100].closuretarget := FALSE;
     RuleDescr [100].result   := 0;
     RuleDescr [100].unique := FALSE;
     RuleDescr [100].commutative := FALSE;
     RuleDescr [100].srcline := 1668;
     RuleDescr [100].scrnum := 0;
 (*   RULE 101/1676  *)
           RuleDescr [101].register := RKMemory;
     RuleDescr [101].pscarity := 1;
     RuleDescr [101].resregs   [0]  := {};
     RuleDescr [101].changeregs[0]  := {};
           RuleDescr [101].op[1].nt   := ntCond;
           RuleDescr [101].op[1].path := 1;              RuleDescr [101].op[1].calc := FALSE;

           RuleDescr [101].op[1].regs[0] := {};
     RuleDescr [101].target   := 0;
     RuleDescr [101].closuretarget := FALSE;
     RuleDescr [101].result   := 0;
     RuleDescr [101].unique := FALSE;
     RuleDescr [101].commutative := FALSE;
     RuleDescr [101].srcline := 1676;
     RuleDescr [101].scrnum := 0;
 (*   RULE 102/1683  *)
           RuleDescr [102].register := RKMemory;
     RuleDescr [102].pscarity := 0;
     RuleDescr [102].resregs   [0]  := {};
     RuleDescr [102].changeregs[0]  := {};
     RuleDescr [102].target   := 0;
     RuleDescr [102].closuretarget := FALSE;
     RuleDescr [102].result   := 0;
     RuleDescr [102].unique := FALSE;
     RuleDescr [102].commutative := FALSE;
     RuleDescr [102].srcline := 1683;
     RuleDescr [102].scrnum := 0;
 (*   RULE 103/1687  *)
           RuleDescr [103].register := RKMemory;
     RuleDescr [103].pscarity := 2;
     RuleDescr [103].resregs   [0]  := {};
     RuleDescr [103].changeregs[0]  := {};
           RuleDescr [103].op[1].nt   := ntLab;
           RuleDescr [103].op[1].path := 1;              RuleDescr [103].op[1].calc := FALSE;

           RuleDescr [103].op[1].regs[0] := {};
           RuleDescr [103].op[2].nt   := ntBReg;
           RuleDescr [103].op[2].path := 2;              RuleDescr [103].op[2].calc := FALSE;

           RuleDescr [103].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [103].target   := 0;
     RuleDescr [103].closuretarget := FALSE;
     RuleDescr [103].result   := 0;
     RuleDescr [103].unique := FALSE;
     RuleDescr [103].commutative := FALSE;
     RuleDescr [103].srcline := 1687;
     RuleDescr [103].scrnum := 0;
 (*   RULE 104/1693  *)
           RuleDescr [104].register := RKMemory;
     RuleDescr [104].pscarity := 3;
     RuleDescr [104].resregs   [0]  := {};
     RuleDescr [104].changeregs[0]  := {};
           RuleDescr [104].op[1].nt   := ntLab;
           RuleDescr [104].op[1].path := 1;              RuleDescr [104].op[1].calc := FALSE;

           RuleDescr [104].op[1].regs[0] := {};
           RuleDescr [104].op[2].nt   := ntAMem;
           RuleDescr [104].op[2].path := 2;              RuleDescr [104].op[2].calc := FALSE;

           RuleDescr [104].op[2].regs[0] := {};
           RuleDescr [104].op[3].nt   := ntARegAImm;
           RuleDescr [104].op[3].path := 3;              RuleDescr [104].op[3].calc := FALSE;

           RuleDescr [104].op[3].regs[0] := {};
     RuleDescr [104].target   := 0;
     RuleDescr [104].closuretarget := FALSE;
     RuleDescr [104].result   := 0;
     RuleDescr [104].unique := FALSE;
     RuleDescr [104].commutative := FALSE;
     RuleDescr [104].srcline := 1693;
     RuleDescr [104].scrnum := 0;
 (*   RULE 105/1699  *)
           RuleDescr [105].register := RKMemory;
     RuleDescr [105].pscarity := 3;
     RuleDescr [105].resregs   [0]  := {};
     RuleDescr [105].changeregs[0]  := {};
           RuleDescr [105].op[1].nt   := ntLab;
           RuleDescr [105].op[1].path := 1;              RuleDescr [105].op[1].calc := FALSE;

           RuleDescr [105].op[1].regs[0] := {};
           RuleDescr [105].op[2].nt   := ntAReg;
           RuleDescr [105].op[2].path := 2;              RuleDescr [105].op[2].calc := FALSE;

           RuleDescr [105].op[2].regs[0] := {};
           RuleDescr [105].op[3].nt   := ntAMemARegAImm;
           RuleDescr [105].op[3].path := 3;              RuleDescr [105].op[3].calc := FALSE;

           RuleDescr [105].op[3].regs[0] := {};
     RuleDescr [105].target   := 0;
     RuleDescr [105].closuretarget := FALSE;
     RuleDescr [105].result   := 0;
     RuleDescr [105].unique := FALSE;
     RuleDescr [105].commutative := FALSE;
     RuleDescr [105].srcline := 1699;
     RuleDescr [105].scrnum := 0;
 (*   RULE 106/1705  *)
           RuleDescr [106].register := RKMemory;
     RuleDescr [106].pscarity := 3;
     RuleDescr [106].resregs   [0]  := {};
     RuleDescr [106].changeregs[0]  := {};
           RuleDescr [106].op[1].nt   := ntLab;
           RuleDescr [106].op[1].path := 1;              RuleDescr [106].op[1].calc := FALSE;

           RuleDescr [106].op[1].regs[0] := {};
           RuleDescr [106].op[2].nt   := ntAImm;
           RuleDescr [106].op[2].path := 2;              RuleDescr [106].op[2].calc := FALSE;

           RuleDescr [106].op[2].regs[0] := {};
           RuleDescr [106].op[3].nt   := ntAMemAReg;
           RuleDescr [106].op[3].path := 3;              RuleDescr [106].op[3].calc := FALSE;

           RuleDescr [106].op[3].regs[0] := {};
     RuleDescr [106].target   := 0;
     RuleDescr [106].closuretarget := FALSE;
     RuleDescr [106].result   := 0;
     RuleDescr [106].unique := FALSE;
     RuleDescr [106].commutative := FALSE;
     RuleDescr [106].srcline := 1705;
     RuleDescr [106].scrnum := 0;
 (*   RULE 107/1712  *)
           RuleDescr [107].register := RKMemory;
     RuleDescr [107].pscarity := 3;
     RuleDescr [107].resregs   [0]  := {};
     RuleDescr [107].changeregs[0]  := {};
           RuleDescr [107].op[1].nt   := ntLab;
           RuleDescr [107].op[1].path := 1;              RuleDescr [107].op[1].calc := FALSE;

           RuleDescr [107].op[1].regs[0] := {};
           RuleDescr [107].op[2].nt   := ntLReg;
           RuleDescr [107].op[2].path := 2;              RuleDescr [107].op[2].calc := FALSE;

           RuleDescr [107].op[2].regs[0] := { (Regesi)-0};
           RuleDescr [107].op[3].nt   := ntLReg;
           RuleDescr [107].op[3].path := 3;              RuleDescr [107].op[3].calc := FALSE;

           RuleDescr [107].op[3].regs[0] := { (Regedi)-0};
     RuleDescr [107].target   := 0;
     RuleDescr [107].closuretarget := FALSE;
     RuleDescr [107].result   := 0;
     RuleDescr [107].unique := FALSE;
     RuleDescr [107].commutative := FALSE;
     RuleDescr [107].srcline := 1712;
     RuleDescr [107].scrnum := 1;
     RuleDescr [107].scrrs [1] [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0};
 (*   RULE 108/1730  *)
           RuleDescr [108].register := RKMemory;
     RuleDescr [108].pscarity := 2;
     RuleDescr [108].resregs   [0]  := {};
     RuleDescr [108].changeregs[0]  := {};
           RuleDescr [108].op[1].nt   := ntLab;
           RuleDescr [108].op[1].path := 1;              RuleDescr [108].op[1].calc := FALSE;

           RuleDescr [108].op[1].regs[0] := {};
           RuleDescr [108].op[2].nt   := ntLReg;
           RuleDescr [108].op[2].path := 2;              RuleDescr [108].op[2].calc := FALSE;

           RuleDescr [108].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [108].target   := 0;
     RuleDescr [108].closuretarget := FALSE;
     RuleDescr [108].result   := 0;
     RuleDescr [108].unique := FALSE;
     RuleDescr [108].commutative := FALSE;
     RuleDescr [108].srcline := 1730;
     RuleDescr [108].scrnum := 0;
 (*   RULE 109/1736  *)
           RuleDescr [109].register := RKMemory;
     RuleDescr [109].pscarity := 3;
     RuleDescr [109].resregs   [0]  := {};
     RuleDescr [109].changeregs[0]  := {};
           RuleDescr [109].op[1].nt   := ntLab;
           RuleDescr [109].op[1].path := 1;              RuleDescr [109].op[1].calc := FALSE;

           RuleDescr [109].op[1].regs[0] := {};
           RuleDescr [109].op[2].nt   := ntLReg;
           RuleDescr [109].op[2].path := 2;              RuleDescr [109].op[2].calc := FALSE;

           RuleDescr [109].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [109].op[3].nt   := ntAMemAReg;
           RuleDescr [109].op[3].path := 3;              RuleDescr [109].op[3].calc := FALSE;

           RuleDescr [109].op[3].regs[0] := {};
     RuleDescr [109].target   := 0;
     RuleDescr [109].closuretarget := FALSE;
     RuleDescr [109].result   := 0;
     RuleDescr [109].unique := FALSE;
     RuleDescr [109].commutative := FALSE;
     RuleDescr [109].srcline := 1736;
     RuleDescr [109].scrnum := 0;
 (*   RULE 110/1744  *)
           RuleDescr [110].register := RKMemory;
     RuleDescr [110].pscarity := 2;
     RuleDescr [110].resregs   [0]  := {};
     RuleDescr [110].changeregs[0]  := {};
           RuleDescr [110].op[1].nt   := ntLab;
           RuleDescr [110].op[1].path := 1;              RuleDescr [110].op[1].calc := FALSE;

           RuleDescr [110].op[1].regs[0] := {};
           RuleDescr [110].op[2].nt   := ntLReg;
           RuleDescr [110].op[2].path := 2;              RuleDescr [110].op[2].calc := FALSE;

           RuleDescr [110].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [110].target   := 0;
     RuleDescr [110].closuretarget := FALSE;
     RuleDescr [110].result   := 0;
     RuleDescr [110].unique := FALSE;
     RuleDescr [110].commutative := FALSE;
     RuleDescr [110].srcline := 1744;
     RuleDescr [110].scrnum := 0;
 (*   RULE 111/1751  *)
           RuleDescr [111].register := RKMemory;
     RuleDescr [111].pscarity := 2;
     RuleDescr [111].resregs   [0]  := {};
     RuleDescr [111].changeregs[0]  := {};
           RuleDescr [111].op[1].nt   := ntLab;
           RuleDescr [111].op[1].path := 1;              RuleDescr [111].op[1].calc := FALSE;

           RuleDescr [111].op[1].regs[0] := {};
           RuleDescr [111].op[2].nt   := ntReg;
           RuleDescr [111].op[2].path := 2;              RuleDescr [111].op[2].calc := FALSE;

           RuleDescr [111].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [111].target   := 0;
     RuleDescr [111].closuretarget := FALSE;
     RuleDescr [111].result   := 0;
     RuleDescr [111].unique := FALSE;
     RuleDescr [111].commutative := FALSE;
     RuleDescr [111].srcline := 1751;
     RuleDescr [111].scrnum := 0;
 (*   RULE 112/1757  *)
           RuleDescr [112].register := RKMemory;
     RuleDescr [112].pscarity := 3;
     RuleDescr [112].resregs   [0]  := {};
     RuleDescr [112].changeregs[0]  := {};
           RuleDescr [112].op[1].nt   := ntLab;
           RuleDescr [112].op[1].path := 1;              RuleDescr [112].op[1].calc := FALSE;

           RuleDescr [112].op[1].regs[0] := {};
           RuleDescr [112].op[2].nt   := ntMemory;
           RuleDescr [112].op[2].path := 2;              RuleDescr [112].op[2].calc := FALSE;

           RuleDescr [112].op[2].regs[0] := {};
           RuleDescr [112].op[3].nt   := ntLReg;
           RuleDescr [112].op[3].path := 3;              RuleDescr [112].op[3].calc := FALSE;

           RuleDescr [112].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [112].target   := 0;
     RuleDescr [112].closuretarget := FALSE;
     RuleDescr [112].result   := 0;
     RuleDescr [112].unique := FALSE;
     RuleDescr [112].commutative := FALSE;
     RuleDescr [112].srcline := 1757;
     RuleDescr [112].scrnum := 0;
 (*   RULE 113/1763  *)
           RuleDescr [113].register := RKMemory;
     RuleDescr [113].pscarity := 1;
     RuleDescr [113].resregs   [0]  := {};
     RuleDescr [113].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [113].op[1].nt   := ntLab;
           RuleDescr [113].op[1].path := 1;              RuleDescr [113].op[1].calc := FALSE;

           RuleDescr [113].op[1].regs[0] := {};
     RuleDescr [113].target   := 0;
     RuleDescr [113].closuretarget := FALSE;
     RuleDescr [113].result   := 0;
     RuleDescr [113].unique := FALSE;
     RuleDescr [113].commutative := FALSE;
     RuleDescr [113].srcline := 1763;
     RuleDescr [113].scrnum := 0;
 (*   RULE 114/1781  *)
           RuleDescr [114].register := RKRegister;
     RuleDescr [114].pscarity := 1;
     RuleDescr [114].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [114].changeregs[0]  := {};
           RuleDescr [114].op[1].nt   := ntReg;
           RuleDescr [114].op[1].path := 1;              RuleDescr [114].op[1].calc := FALSE;

           RuleDescr [114].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [114].target   := 1;
     RuleDescr [114].closuretarget := FALSE;
     RuleDescr [114].result   := 0;
     RuleDescr [114].unique := FALSE;
     RuleDescr [114].commutative := FALSE;
     RuleDescr [114].srcline := 1781;
     RuleDescr [114].scrnum := 0;
 (*   RULE 115/1790  *)
           RuleDescr [115].register := RKRegister;
     RuleDescr [115].pscarity := 2;
     RuleDescr [115].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [115].changeregs[0]  := {};
           RuleDescr [115].op[1].nt   := ntLReg;
           RuleDescr [115].op[1].path := 1;              RuleDescr [115].op[1].calc := FALSE;

           RuleDescr [115].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [115].op[2].nt   := ntReg;
           RuleDescr [115].op[2].path := 2;              RuleDescr [115].op[2].calc := FALSE;

           RuleDescr [115].op[2].regs[0] := { (Regcl)-0,  (Regcx)-0,  (Regecx)-0};
     RuleDescr [115].target   := 1;
     RuleDescr [115].closuretarget := FALSE;
     RuleDescr [115].result   := 0;
     RuleDescr [115].unique := FALSE;
     RuleDescr [115].commutative := FALSE;
     RuleDescr [115].srcline := 1790;
     RuleDescr [115].scrnum := 0;
 (*   RULE 116/1803  *)
           RuleDescr [116].register := RKRegister;
     RuleDescr [116].pscarity := 1;
     RuleDescr [116].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [116].changeregs[0]  := {};
           RuleDescr [116].op[1].nt   := ntBReg;
           RuleDescr [116].op[1].path := 1;              RuleDescr [116].op[1].calc := FALSE;

           RuleDescr [116].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [116].target   := 1;
     RuleDescr [116].closuretarget := FALSE;
     RuleDescr [116].result   := 0;
     RuleDescr [116].unique := FALSE;
     RuleDescr [116].commutative := FALSE;
     RuleDescr [116].srcline := 1803;
     RuleDescr [116].scrnum := 0;
 (*   RULE 117/1813  *)
           RuleDescr [117].register := RKMemory;
     RuleDescr [117].pscarity := 2;
     RuleDescr [117].resregs   [0]  := {};
     RuleDescr [117].changeregs[0]  := {};
           RuleDescr [117].op[1].nt   := ntMemory;
           RuleDescr [117].op[1].path := 1;              RuleDescr [117].op[1].calc := FALSE;

           RuleDescr [117].op[1].regs[0] := {};
           RuleDescr [117].op[2].nt   := ntARegAImm;
           RuleDescr [117].op[2].path := 2;              RuleDescr [117].op[2].calc := FALSE;

           RuleDescr [117].op[2].regs[0] := {};
     RuleDescr [117].target   := 0;
     RuleDescr [117].closuretarget := FALSE;
     RuleDescr [117].result   := 0;
     RuleDescr [117].unique := FALSE;
     RuleDescr [117].commutative := FALSE;
     RuleDescr [117].srcline := 1813;
     RuleDescr [117].scrnum := 0;
 (*   RULE 118/1818  *)
           RuleDescr [118].register := RKMemory;
     RuleDescr [118].pscarity := 2;
     RuleDescr [118].resregs   [0]  := {};
     RuleDescr [118].changeregs[0]  := {};
           RuleDescr [118].op[1].nt   := ntMemory;
           RuleDescr [118].op[1].path := 1;              RuleDescr [118].op[1].calc := FALSE;

           RuleDescr [118].op[1].regs[0] := {};
           RuleDescr [118].op[2].nt   := ntLReg;
           RuleDescr [118].op[2].path := 2;              RuleDescr [118].op[2].calc := FALSE;

           RuleDescr [118].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [118].target   := 0;
     RuleDescr [118].closuretarget := FALSE;
     RuleDescr [118].result   := 0;
     RuleDescr [118].unique := FALSE;
     RuleDescr [118].commutative := FALSE;
     RuleDescr [118].srcline := 1818;
     RuleDescr [118].scrnum := 0;
 (*   RULE 119/1826  *)
           RuleDescr [119].register := RKMemory;
     RuleDescr [119].pscarity := 2;
     RuleDescr [119].resregs   [0]  := {};
     RuleDescr [119].changeregs[0]  := {};
           RuleDescr [119].op[1].nt   := ntMemory;
           RuleDescr [119].op[1].path := 1;              RuleDescr [119].op[1].calc := FALSE;

           RuleDescr [119].op[1].regs[0] := {};
           RuleDescr [119].op[2].nt   := ntLReg;
           RuleDescr [119].op[2].path := 2;              RuleDescr [119].op[2].calc := FALSE;

           RuleDescr [119].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [119].target   := 0;
     RuleDescr [119].closuretarget := FALSE;
     RuleDescr [119].result   := 0;
     RuleDescr [119].unique := FALSE;
     RuleDescr [119].commutative := FALSE;
     RuleDescr [119].srcline := 1826;
     RuleDescr [119].scrnum := 0;
 (*   RULE 120/1835  *)
           RuleDescr [120].register := RKRegister;
     RuleDescr [120].pscarity := 2;
     RuleDescr [120].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [120].changeregs[0]  := {};
           RuleDescr [120].op[1].nt   := ntReg;
           RuleDescr [120].op[1].path := 1;              RuleDescr [120].op[1].calc := FALSE;

           RuleDescr [120].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [120].op[2].nt   := ntReg;
           RuleDescr [120].op[2].path := 2;              RuleDescr [120].op[2].calc := FALSE;

           RuleDescr [120].op[2].regs[0] := { (Regcl)-0,  (Regcx)-0,  (Regecx)-0};
     RuleDescr [120].target   := 1;
     RuleDescr [120].closuretarget := FALSE;
     RuleDescr [120].result   := 0;
     RuleDescr [120].unique := FALSE;
     RuleDescr [120].commutative := FALSE;
     RuleDescr [120].srcline := 1835;
     RuleDescr [120].scrnum := 0;
 (*   RULE 121/1850  *)
           RuleDescr [121].register := RKMemory;
     RuleDescr [121].pscarity := 1;
     RuleDescr [121].resregs   [0]  := {};
     RuleDescr [121].changeregs[0]  := {};
           RuleDescr [121].op[1].nt   := ntMemory;
           RuleDescr [121].op[1].path := 1;              RuleDescr [121].op[1].calc := FALSE;

           RuleDescr [121].op[1].regs[0] := {};
     RuleDescr [121].target   := 0;
     RuleDescr [121].closuretarget := FALSE;
     RuleDescr [121].result   := 0;
     RuleDescr [121].unique := FALSE;
     RuleDescr [121].commutative := FALSE;
     RuleDescr [121].srcline := 1850;
     RuleDescr [121].scrnum := 1;
     RuleDescr [121].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 122/1861  *)
           RuleDescr [122].register := RKMemory;
     RuleDescr [122].pscarity := 2;
     RuleDescr [122].resregs   [0]  := {};
     RuleDescr [122].changeregs[0]  := {};
           RuleDescr [122].op[1].nt   := ntArgs;
           RuleDescr [122].op[1].path := 1;              RuleDescr [122].op[1].calc := FALSE;

           RuleDescr [122].op[1].regs[0] := {};
           RuleDescr [122].op[2].nt   := ntMemory;
           RuleDescr [122].op[2].path := 2;              RuleDescr [122].op[2].calc := FALSE;

           RuleDescr [122].op[2].regs[0] := {};
     RuleDescr [122].target   := 0;
     RuleDescr [122].closuretarget := FALSE;
     RuleDescr [122].result   := 0;
     RuleDescr [122].unique := FALSE;
     RuleDescr [122].commutative := FALSE;
     RuleDescr [122].srcline := 1861;
     RuleDescr [122].scrnum := 1;
     RuleDescr [122].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 123/1872  *)
           RuleDescr [123].register := RKRegister;
     RuleDescr [123].pscarity := 1;
     RuleDescr [123].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [123].changeregs[0]  := {};
           RuleDescr [123].op[1].nt   := ntLReg;
           RuleDescr [123].op[1].path := 1;              RuleDescr [123].op[1].calc := FALSE;

           RuleDescr [123].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [123].target   := 1;
     RuleDescr [123].closuretarget := FALSE;
     RuleDescr [123].result   := 0;
     RuleDescr [123].unique := FALSE;
     RuleDescr [123].commutative := FALSE;
     RuleDescr [123].srcline := 1872;
     RuleDescr [123].scrnum := 0;
 (*   RULE 124/1878  *)
           RuleDescr [124].register := RKMemory;
     RuleDescr [124].pscarity := 2;
     RuleDescr [124].resregs   [0]  := {};
     RuleDescr [124].changeregs[0]  := {};
           RuleDescr [124].op[1].nt   := ntLReg;
           RuleDescr [124].op[1].path := 1;              RuleDescr [124].op[1].calc := FALSE;

           RuleDescr [124].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [124].op[2].nt   := ntMemory;
           RuleDescr [124].op[2].path := 2;              RuleDescr [124].op[2].calc := FALSE;

           RuleDescr [124].op[2].regs[0] := {};
     RuleDescr [124].target   := 0;
     RuleDescr [124].closuretarget := FALSE;
     RuleDescr [124].result   := 0;
     RuleDescr [124].unique := FALSE;
     RuleDescr [124].commutative := FALSE;
     RuleDescr [124].srcline := 1878;
     RuleDescr [124].scrnum := 0;
 (*   RULE 125/1886  *)
           RuleDescr [125].register := RKMemory;
     RuleDescr [125].pscarity := 1;
     RuleDescr [125].resregs   [0]  := {};
     RuleDescr [125].changeregs[0]  := {};
           RuleDescr [125].op[1].nt   := ntMemory;
           RuleDescr [125].op[1].path := 1;              RuleDescr [125].op[1].calc := FALSE;

           RuleDescr [125].op[1].regs[0] := {};
     RuleDescr [125].target   := 0;
     RuleDescr [125].closuretarget := FALSE;
     RuleDescr [125].result   := 0;
     RuleDescr [125].unique := FALSE;
     RuleDescr [125].commutative := FALSE;
     RuleDescr [125].srcline := 1886;
     RuleDescr [125].scrnum := 1;
     RuleDescr [125].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 126/1944  *)
           RuleDescr [126].register := RKMemory;
     RuleDescr [126].pscarity := 1;
     RuleDescr [126].resregs   [0]  := {};
     RuleDescr [126].changeregs[0]  := {};
           RuleDescr [126].op[1].nt   := ntReg;
           RuleDescr [126].op[1].path := 1;              RuleDescr [126].op[1].calc := FALSE;

           RuleDescr [126].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [126].target   := 0;
     RuleDescr [126].closuretarget := FALSE;
     RuleDescr [126].result   := 0;
     RuleDescr [126].unique := FALSE;
     RuleDescr [126].commutative := FALSE;
     RuleDescr [126].srcline := 1944;
     RuleDescr [126].scrnum := 0;
 (*   RULE 127/2002  *)
           RuleDescr [127].register := RKMemory;
     RuleDescr [127].pscarity := 1;
     RuleDescr [127].resregs   [0]  := {};
     RuleDescr [127].changeregs[0]  := {};
           RuleDescr [127].op[1].nt   := ntFXReg;
           RuleDescr [127].op[1].path := 1;              RuleDescr [127].op[1].calc := FALSE;

           RuleDescr [127].op[1].regs[0] := { (Regst)-0};
     RuleDescr [127].target   := 0;
     RuleDescr [127].closuretarget := FALSE;
     RuleDescr [127].result   := 0;
     RuleDescr [127].unique := FALSE;
     RuleDescr [127].commutative := FALSE;
     RuleDescr [127].srcline := 2002;
     RuleDescr [127].scrnum := 1;
     RuleDescr [127].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 128/2039  *)
           RuleDescr [128].register := RKMemory;
     RuleDescr [128].pscarity := 3;
     RuleDescr [128].resregs   [0]  := {};
     RuleDescr [128].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regcl)-0,  (Regch)-0,  (Regax)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [128].op[1].nt   := ntLReg;
           RuleDescr [128].op[1].path := 1;              RuleDescr [128].op[1].calc := FALSE;

           RuleDescr [128].op[1].regs[0] := { (Regesi)-0};
           RuleDescr [128].op[2].nt   := ntLReg;
           RuleDescr [128].op[2].path := 2;              RuleDescr [128].op[2].calc := FALSE;

           RuleDescr [128].op[2].regs[0] := { (Regedi)-0};
           RuleDescr [128].op[3].nt   := ntLReg;
           RuleDescr [128].op[3].path := 3;              RuleDescr [128].op[3].calc := FALSE;

           RuleDescr [128].op[3].regs[0] := { (Regecx)-0};
     RuleDescr [128].target   := 0;
     RuleDescr [128].closuretarget := FALSE;
     RuleDescr [128].result   := 0;
     RuleDescr [128].unique := FALSE;
     RuleDescr [128].commutative := FALSE;
     RuleDescr [128].srcline := 2039;
     RuleDescr [128].scrnum := 0;
 (*   RULE 129/2059  *)
           RuleDescr [129].register := RKMemory;
     RuleDescr [129].pscarity := 1;
     RuleDescr [129].resregs   [0]  := {};
     RuleDescr [129].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regdi)-0,  (Regecx)-0,  (Regedi)-0};
           RuleDescr [129].op[1].nt   := ntReg;
           RuleDescr [129].op[1].path := 1;              RuleDescr [129].op[1].calc := FALSE;

           RuleDescr [129].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [129].target   := 0;
     RuleDescr [129].closuretarget := FALSE;
     RuleDescr [129].result   := 0;
     RuleDescr [129].unique := FALSE;
     RuleDescr [129].commutative := FALSE;
     RuleDescr [129].srcline := 2059;
     RuleDescr [129].scrnum := 1;
     RuleDescr [129].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 130/2069  *)
           RuleDescr [130].register := RKMemory;
     RuleDescr [130].pscarity := 1;
     RuleDescr [130].resregs   [0]  := {};
     RuleDescr [130].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regdi)-0,  (Regecx)-0,  (Regedi)-0};
           RuleDescr [130].op[1].nt   := ntFXReg;
           RuleDescr [130].op[1].path := 1;              RuleDescr [130].op[1].calc := FALSE;

           RuleDescr [130].op[1].regs[0] := { (Regst)-0};
     RuleDescr [130].target   := 0;
     RuleDescr [130].closuretarget := FALSE;
     RuleDescr [130].result   := 0;
     RuleDescr [130].unique := FALSE;
     RuleDescr [130].commutative := FALSE;
     RuleDescr [130].srcline := 2069;
     RuleDescr [130].scrnum := 1;
     RuleDescr [130].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 131/2078  *)
           RuleDescr [131].register := RKMemory;
     RuleDescr [131].pscarity := 1;
     RuleDescr [131].resregs   [0]  := {};
     RuleDescr [131].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regdi)-0,  (Regecx)-0,  (Regedi)-0};
           RuleDescr [131].op[1].nt   := ntMemory;
           RuleDescr [131].op[1].path := 1;              RuleDescr [131].op[1].calc := FALSE;

           RuleDescr [131].op[1].regs[0] := {};
     RuleDescr [131].target   := 0;
     RuleDescr [131].closuretarget := FALSE;
     RuleDescr [131].result   := 0;
     RuleDescr [131].unique := FALSE;
     RuleDescr [131].commutative := FALSE;
     RuleDescr [131].srcline := 2078;
     RuleDescr [131].scrnum := 1;
     RuleDescr [131].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 132/2087  *)
           RuleDescr [132].register := RKRegister;
     RuleDescr [132].pscarity := 1;
     RuleDescr [132].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [132].changeregs[0]  := {};
           RuleDescr [132].op[1].nt   := ntRetyp;
           RuleDescr [132].op[1].path := 1;              RuleDescr [132].op[1].calc := FALSE;

           RuleDescr [132].op[1].regs[0] := {};
     RuleDescr [132].target   := 0;
     RuleDescr [132].closuretarget := FALSE;
     RuleDescr [132].result   := 0;
     RuleDescr [132].unique := FALSE;
     RuleDescr [132].commutative := FALSE;
     RuleDescr [132].srcline := 2087;
     RuleDescr [132].scrnum := 0;
 (*   RULE 133/2092  *)
           RuleDescr [133].register := RKRegister;
     RuleDescr [133].pscarity := 1;
     RuleDescr [133].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [133].changeregs[0]  := {};
           RuleDescr [133].op[1].nt   := ntRetyp;
           RuleDescr [133].op[1].path := 1;              RuleDescr [133].op[1].calc := FALSE;

           RuleDescr [133].op[1].regs[0] := {};
     RuleDescr [133].target   := 0;
     RuleDescr [133].closuretarget := FALSE;
     RuleDescr [133].result   := 0;
     RuleDescr [133].unique := FALSE;
     RuleDescr [133].commutative := FALSE;
     RuleDescr [133].srcline := 2092;
     RuleDescr [133].scrnum := 0;
 (*   RULE 134/2097  *)
           RuleDescr [134].register := RKRegister;
     RuleDescr [134].pscarity := 1;
     RuleDescr [134].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [134].changeregs[0]  := {};
           RuleDescr [134].op[1].nt   := ntRetyp;
           RuleDescr [134].op[1].path := 1;              RuleDescr [134].op[1].calc := FALSE;

           RuleDescr [134].op[1].regs[0] := {};
     RuleDescr [134].target   := 0;
     RuleDescr [134].closuretarget := FALSE;
     RuleDescr [134].result   := 0;
     RuleDescr [134].unique := FALSE;
     RuleDescr [134].commutative := FALSE;
     RuleDescr [134].srcline := 2097;
     RuleDescr [134].scrnum := 0;
 (*   RULE 135/2102  *)
           RuleDescr [135].register := RKRegister;
     RuleDescr [135].pscarity := 1;
     RuleDescr [135].resregs   [0]  := { (Regst)-0};
     RuleDescr [135].changeregs[0]  := {};
           RuleDescr [135].op[1].nt   := ntRetyp;
           RuleDescr [135].op[1].path := 1;              RuleDescr [135].op[1].calc := FALSE;

           RuleDescr [135].op[1].regs[0] := {};
     RuleDescr [135].target   := 0;
     RuleDescr [135].closuretarget := FALSE;
     RuleDescr [135].result   := 0;
     RuleDescr [135].unique := FALSE;
     RuleDescr [135].commutative := FALSE;
     RuleDescr [135].srcline := 2102;
     RuleDescr [135].scrnum := 0;
 (*   RULE 136/2106  *)
           RuleDescr [136].register := RKAdrmode;
     RuleDescr [136].pscarity := 1;
     RuleDescr [136].resregs   [0]  := {};
     RuleDescr [136].changeregs[0]  := {};
           RuleDescr [136].op[1].nt   := ntRetyp;
           RuleDescr [136].op[1].path := 1;              RuleDescr [136].op[1].calc := FALSE;

           RuleDescr [136].op[1].regs[0] := {};
     RuleDescr [136].target   := 0;
     RuleDescr [136].closuretarget := FALSE;
     RuleDescr [136].result   := 0;
     RuleDescr [136].unique := FALSE;
     RuleDescr [136].commutative := FALSE;
     RuleDescr [136].srcline := 2106;
     RuleDescr [136].scrnum := 0;
 (*   RULE 137/2119  *)
           RuleDescr [137].register := RKRegister;
     RuleDescr [137].pscarity := 1;
     RuleDescr [137].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [137].changeregs[0]  := {};
           RuleDescr [137].op[1].nt   := ntBReg;
           RuleDescr [137].op[1].path := 1;              RuleDescr [137].op[1].calc := FALSE;

           RuleDescr [137].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [137].target   := 1;
     RuleDescr [137].closuretarget := FALSE;
     RuleDescr [137].result   := 0;
     RuleDescr [137].unique := FALSE;
     RuleDescr [137].commutative := FALSE;
     RuleDescr [137].srcline := 2119;
     RuleDescr [137].scrnum := 0;
 (*   RULE 138/2123  *)
           RuleDescr [138].register := RKRegister;
     RuleDescr [138].pscarity := 1;
     RuleDescr [138].resregs   [0]  := { (Regal)-0};
     RuleDescr [138].changeregs[0]  := {};
           RuleDescr [138].op[1].nt   := ntWReg;
           RuleDescr [138].op[1].path := 1;              RuleDescr [138].op[1].calc := FALSE;

           RuleDescr [138].op[1].regs[0] := { (Regax)-0};
     RuleDescr [138].target   := 0;
     RuleDescr [138].closuretarget := FALSE;
     RuleDescr [138].result   := 0;
     RuleDescr [138].unique := FALSE;
     RuleDescr [138].commutative := FALSE;
     RuleDescr [138].srcline := 2123;
     RuleDescr [138].scrnum := 0;
 (*   RULE 139/2124  *)
           RuleDescr [139].register := RKRegister;
     RuleDescr [139].pscarity := 1;
     RuleDescr [139].resregs   [0]  := { (Regbl)-0};
     RuleDescr [139].changeregs[0]  := {};
           RuleDescr [139].op[1].nt   := ntWReg;
           RuleDescr [139].op[1].path := 1;              RuleDescr [139].op[1].calc := FALSE;

           RuleDescr [139].op[1].regs[0] := { (Regbx)-0};
     RuleDescr [139].target   := 0;
     RuleDescr [139].closuretarget := FALSE;
     RuleDescr [139].result   := 0;
     RuleDescr [139].unique := FALSE;
     RuleDescr [139].commutative := FALSE;
     RuleDescr [139].srcline := 2124;
     RuleDescr [139].scrnum := 0;
 (*   RULE 140/2125  *)
           RuleDescr [140].register := RKRegister;
     RuleDescr [140].pscarity := 1;
     RuleDescr [140].resregs   [0]  := { (Regcl)-0};
     RuleDescr [140].changeregs[0]  := {};
           RuleDescr [140].op[1].nt   := ntWReg;
           RuleDescr [140].op[1].path := 1;              RuleDescr [140].op[1].calc := FALSE;

           RuleDescr [140].op[1].regs[0] := { (Regcx)-0};
     RuleDescr [140].target   := 0;
     RuleDescr [140].closuretarget := FALSE;
     RuleDescr [140].result   := 0;
     RuleDescr [140].unique := FALSE;
     RuleDescr [140].commutative := FALSE;
     RuleDescr [140].srcline := 2125;
     RuleDescr [140].scrnum := 0;
 (*   RULE 141/2126  *)
           RuleDescr [141].register := RKRegister;
     RuleDescr [141].pscarity := 1;
     RuleDescr [141].resregs   [0]  := { (Regdl)-0};
     RuleDescr [141].changeregs[0]  := {};
           RuleDescr [141].op[1].nt   := ntWReg;
           RuleDescr [141].op[1].path := 1;              RuleDescr [141].op[1].calc := FALSE;

           RuleDescr [141].op[1].regs[0] := { (Regdx)-0};
     RuleDescr [141].target   := 0;
     RuleDescr [141].closuretarget := FALSE;
     RuleDescr [141].result   := 0;
     RuleDescr [141].unique := FALSE;
     RuleDescr [141].commutative := FALSE;
     RuleDescr [141].srcline := 2126;
     RuleDescr [141].scrnum := 0;
 (*   RULE 142/2128  *)
           RuleDescr [142].register := RKRegister;
     RuleDescr [142].pscarity := 1;
     RuleDescr [142].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [142].changeregs[0]  := {};
           RuleDescr [142].op[1].nt   := ntWReg;
           RuleDescr [142].op[1].path := 1;              RuleDescr [142].op[1].calc := FALSE;

           RuleDescr [142].op[1].regs[0] := { (Regsi)-0,  (Regdi)-0};
     RuleDescr [142].target   := 0;
     RuleDescr [142].closuretarget := FALSE;
     RuleDescr [142].result   := 0;
     RuleDescr [142].unique := FALSE;
     RuleDescr [142].commutative := FALSE;
     RuleDescr [142].srcline := 2128;
     RuleDescr [142].scrnum := 1;
     RuleDescr [142].scrrs [1] [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0};
 (*   RULE 143/2136  *)
           RuleDescr [143].register := RKRegister;
     RuleDescr [143].pscarity := 1;
     RuleDescr [143].resregs   [0]  := { (Regal)-0};
     RuleDescr [143].changeregs[0]  := {};
           RuleDescr [143].op[1].nt   := ntLReg;
           RuleDescr [143].op[1].path := 1;              RuleDescr [143].op[1].calc := FALSE;

           RuleDescr [143].op[1].regs[0] := { (Regeax)-0};
     RuleDescr [143].target   := 0;
     RuleDescr [143].closuretarget := FALSE;
     RuleDescr [143].result   := 0;
     RuleDescr [143].unique := FALSE;
     RuleDescr [143].commutative := FALSE;
     RuleDescr [143].srcline := 2136;
     RuleDescr [143].scrnum := 0;
 (*   RULE 144/2137  *)
           RuleDescr [144].register := RKRegister;
     RuleDescr [144].pscarity := 1;
     RuleDescr [144].resregs   [0]  := { (Regbl)-0};
     RuleDescr [144].changeregs[0]  := {};
           RuleDescr [144].op[1].nt   := ntLReg;
           RuleDescr [144].op[1].path := 1;              RuleDescr [144].op[1].calc := FALSE;

           RuleDescr [144].op[1].regs[0] := { (Regebx)-0};
     RuleDescr [144].target   := 0;
     RuleDescr [144].closuretarget := FALSE;
     RuleDescr [144].result   := 0;
     RuleDescr [144].unique := FALSE;
     RuleDescr [144].commutative := FALSE;
     RuleDescr [144].srcline := 2137;
     RuleDescr [144].scrnum := 0;
 (*   RULE 145/2138  *)
           RuleDescr [145].register := RKRegister;
     RuleDescr [145].pscarity := 1;
     RuleDescr [145].resregs   [0]  := { (Regcl)-0};
     RuleDescr [145].changeregs[0]  := {};
           RuleDescr [145].op[1].nt   := ntLReg;
           RuleDescr [145].op[1].path := 1;              RuleDescr [145].op[1].calc := FALSE;

           RuleDescr [145].op[1].regs[0] := { (Regecx)-0};
     RuleDescr [145].target   := 0;
     RuleDescr [145].closuretarget := FALSE;
     RuleDescr [145].result   := 0;
     RuleDescr [145].unique := FALSE;
     RuleDescr [145].commutative := FALSE;
     RuleDescr [145].srcline := 2138;
     RuleDescr [145].scrnum := 0;
 (*   RULE 146/2139  *)
           RuleDescr [146].register := RKRegister;
     RuleDescr [146].pscarity := 1;
     RuleDescr [146].resregs   [0]  := { (Regdl)-0};
     RuleDescr [146].changeregs[0]  := {};
           RuleDescr [146].op[1].nt   := ntLReg;
           RuleDescr [146].op[1].path := 1;              RuleDescr [146].op[1].calc := FALSE;

           RuleDescr [146].op[1].regs[0] := { (Regedx)-0};
     RuleDescr [146].target   := 0;
     RuleDescr [146].closuretarget := FALSE;
     RuleDescr [146].result   := 0;
     RuleDescr [146].unique := FALSE;
     RuleDescr [146].commutative := FALSE;
     RuleDescr [146].srcline := 2139;
     RuleDescr [146].scrnum := 0;
 (*   RULE 147/2142  *)
           RuleDescr [147].register := RKAdrmode;
     RuleDescr [147].pscarity := 0;
     RuleDescr [147].resregs   [0]  := {};
     RuleDescr [147].changeregs[0]  := {};
     RuleDescr [147].target   := 0;
     RuleDescr [147].closuretarget := FALSE;
     RuleDescr [147].result   := 0;
     RuleDescr [147].unique := FALSE;
     RuleDescr [147].commutative := FALSE;
     RuleDescr [147].srcline := 2142;
     RuleDescr [147].scrnum := 0;
 (*   RULE 148/2151  *)
           RuleDescr [148].register := RKAdrmode;
     RuleDescr [148].pscarity := 0;
     RuleDescr [148].resregs   [0]  := {};
     RuleDescr [148].changeregs[0]  := {};
     RuleDescr [148].target   := 0;
     RuleDescr [148].closuretarget := FALSE;
     RuleDescr [148].result   := 0;
     RuleDescr [148].unique := FALSE;
     RuleDescr [148].commutative := FALSE;
     RuleDescr [148].srcline := 2151;
     RuleDescr [148].scrnum := 0;
 (*   RULE 149/2161  *)
           RuleDescr [149].register := RKAdrmode;
     RuleDescr [149].pscarity := 1;
     RuleDescr [149].resregs   [0]  := {};
     RuleDescr [149].changeregs[0]  := {};
           RuleDescr [149].op[1].nt   := ntGv;
           RuleDescr [149].op[1].path := 1;              RuleDescr [149].op[1].calc := FALSE;

           RuleDescr [149].op[1].regs[0] := {};
     RuleDescr [149].target   := 0;
     RuleDescr [149].closuretarget := FALSE;
     RuleDescr [149].result   := 0;
     RuleDescr [149].unique := FALSE;
     RuleDescr [149].commutative := FALSE;
     RuleDescr [149].srcline := 2161;
     RuleDescr [149].scrnum := 0;
 (*   RULE 150/2164  *)
           RuleDescr [150].register := RKAdrmode;
     RuleDescr [150].pscarity := 1;
     RuleDescr [150].resregs   [0]  := {};
     RuleDescr [150].changeregs[0]  := {};
           RuleDescr [150].op[1].nt   := ntIreg;
           RuleDescr [150].op[1].path := 1;              RuleDescr [150].op[1].calc := FALSE;

           RuleDescr [150].op[1].regs[0] := {};
     RuleDescr [150].target   := 0;
     RuleDescr [150].closuretarget := FALSE;
     RuleDescr [150].result   := 0;
     RuleDescr [150].unique := FALSE;
     RuleDescr [150].commutative := FALSE;
     RuleDescr [150].srcline := 2164;
     RuleDescr [150].scrnum := 0;
 (*   RULE 151/2167  *)
           RuleDescr [151].register := RKAdrmode;
     RuleDescr [151].pscarity := 1;
     RuleDescr [151].resregs   [0]  := {};
     RuleDescr [151].changeregs[0]  := {};
           RuleDescr [151].op[1].nt   := ntBreg;
           RuleDescr [151].op[1].path := 1;              RuleDescr [151].op[1].calc := FALSE;

           RuleDescr [151].op[1].regs[0] := {};
     RuleDescr [151].target   := 0;
     RuleDescr [151].closuretarget := FALSE;
     RuleDescr [151].result   := 0;
     RuleDescr [151].unique := FALSE;
     RuleDescr [151].commutative := FALSE;
     RuleDescr [151].srcline := 2167;
     RuleDescr [151].scrnum := 0;
 (*   RULE 152/2170  *)
           RuleDescr [152].register := RKAdrmode;
     RuleDescr [152].pscarity := 1;
     RuleDescr [152].resregs   [0]  := {};
     RuleDescr [152].changeregs[0]  := {};
           RuleDescr [152].op[1].nt   := ntBregIreg;
           RuleDescr [152].op[1].path := 1;              RuleDescr [152].op[1].calc := FALSE;

           RuleDescr [152].op[1].regs[0] := {};
     RuleDescr [152].target   := 0;
     RuleDescr [152].closuretarget := FALSE;
     RuleDescr [152].result   := 0;
     RuleDescr [152].unique := FALSE;
     RuleDescr [152].commutative := FALSE;
     RuleDescr [152].srcline := 2170;
     RuleDescr [152].scrnum := 0;
 (*   RULE 153/2174  *)
           RuleDescr [153].register := RKAdrmode;
     RuleDescr [153].pscarity := 2;
     RuleDescr [153].resregs   [0]  := {};
     RuleDescr [153].changeregs[0]  := {};
           RuleDescr [153].op[1].nt   := ntGv;
           RuleDescr [153].op[1].path := 1;              RuleDescr [153].op[1].calc := FALSE;

           RuleDescr [153].op[1].regs[0] := {};
           RuleDescr [153].op[2].nt   := ntLReg;
           RuleDescr [153].op[2].path := 2;              RuleDescr [153].op[2].calc := FALSE;

           RuleDescr [153].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [153].target   := 0;
     RuleDescr [153].closuretarget := FALSE;
     RuleDescr [153].result   := 0;
     RuleDescr [153].unique := FALSE;
     RuleDescr [153].commutative := FALSE;
     RuleDescr [153].srcline := 2174;
     RuleDescr [153].scrnum := 0;
 (*   RULE 154/2180  *)
           RuleDescr [154].register := RKAdrmode;
     RuleDescr [154].pscarity := 2;
     RuleDescr [154].resregs   [0]  := {};
     RuleDescr [154].changeregs[0]  := {};
           RuleDescr [154].op[1].nt   := ntGv;
           RuleDescr [154].op[1].path := 1;              RuleDescr [154].op[1].calc := FALSE;

           RuleDescr [154].op[1].regs[0] := {};
           RuleDescr [154].op[2].nt   := ntLReg;
           RuleDescr [154].op[2].path := 2;              RuleDescr [154].op[2].calc := FALSE;

           RuleDescr [154].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [154].target   := 0;
     RuleDescr [154].closuretarget := FALSE;
     RuleDescr [154].result   := 0;
     RuleDescr [154].unique := FALSE;
     RuleDescr [154].commutative := FALSE;
     RuleDescr [154].srcline := 2180;
     RuleDescr [154].scrnum := 0;
 (*   RULE 155/2185  *)
           RuleDescr [155].register := RKAdrmode;
     RuleDescr [155].pscarity := 2;
     RuleDescr [155].resregs   [0]  := {};
     RuleDescr [155].changeregs[0]  := {};
           RuleDescr [155].op[1].nt   := ntIreg;
           RuleDescr [155].op[1].path := 1;              RuleDescr [155].op[1].calc := FALSE;

           RuleDescr [155].op[1].regs[0] := {};
           RuleDescr [155].op[2].nt   := ntLReg;
           RuleDescr [155].op[2].path := 2;              RuleDescr [155].op[2].calc := FALSE;

           RuleDescr [155].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [155].target   := 0;
     RuleDescr [155].closuretarget := FALSE;
     RuleDescr [155].result   := 0;
     RuleDescr [155].unique := FALSE;
     RuleDescr [155].commutative := FALSE;
     RuleDescr [155].srcline := 2185;
     RuleDescr [155].scrnum := 0;
 (*   RULE 156/2195  *)
           RuleDescr [156].register := RKAdrmode;
     RuleDescr [156].pscarity := 2;
     RuleDescr [156].resregs   [0]  := {};
     RuleDescr [156].changeregs[0]  := {};
           RuleDescr [156].op[1].nt   := ntIreg;
           RuleDescr [156].op[1].path := 1;              RuleDescr [156].op[1].calc := FALSE;

           RuleDescr [156].op[1].regs[0] := {};
           RuleDescr [156].op[2].nt   := ntLReg;
           RuleDescr [156].op[2].path := 2;              RuleDescr [156].op[2].calc := FALSE;

           RuleDescr [156].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [156].target   := 0;
     RuleDescr [156].closuretarget := FALSE;
     RuleDescr [156].result   := 0;
     RuleDescr [156].unique := FALSE;
     RuleDescr [156].commutative := FALSE;
     RuleDescr [156].srcline := 2195;
     RuleDescr [156].scrnum := 0;
 (*   RULE 157/2200  *)
           RuleDescr [157].register := RKAdrmode;
     RuleDescr [157].pscarity := 2;
     RuleDescr [157].resregs   [0]  := {};
     RuleDescr [157].changeregs[0]  := {};
           RuleDescr [157].op[1].nt   := ntBreg;
           RuleDescr [157].op[1].path := 1;              RuleDescr [157].op[1].calc := FALSE;

           RuleDescr [157].op[1].regs[0] := {};
           RuleDescr [157].op[2].nt   := ntLReg;
           RuleDescr [157].op[2].path := 2;              RuleDescr [157].op[2].calc := FALSE;

           RuleDescr [157].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [157].target   := 0;
     RuleDescr [157].closuretarget := FALSE;
     RuleDescr [157].result   := 0;
     RuleDescr [157].unique := FALSE;
     RuleDescr [157].commutative := FALSE;
     RuleDescr [157].srcline := 2200;
     RuleDescr [157].scrnum := 0;
 (*   RULE 158/2205  *)
           RuleDescr [158].register := RKAdrmode;
     RuleDescr [158].pscarity := 2;
     RuleDescr [158].resregs   [0]  := {};
     RuleDescr [158].changeregs[0]  := {};
           RuleDescr [158].op[1].nt   := ntLReg;
           RuleDescr [158].op[1].path := 1;              RuleDescr [158].op[1].calc := FALSE;

           RuleDescr [158].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [158].op[2].nt   := ntLReg;
           RuleDescr [158].op[2].path := 2;              RuleDescr [158].op[2].calc := FALSE;

           RuleDescr [158].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [158].target   := 0;
     RuleDescr [158].closuretarget := FALSE;
     RuleDescr [158].result   := 0;
     RuleDescr [158].unique := FALSE;
     RuleDescr [158].commutative := FALSE;
     RuleDescr [158].srcline := 2205;
     RuleDescr [158].scrnum := 0;
 (*   RULE 159/2213  *)
           RuleDescr [159].register := RKRegister;
     RuleDescr [159].pscarity := 1;
     RuleDescr [159].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [159].changeregs[0]  := {};
           RuleDescr [159].op[1].nt   := ntBregIreg;
           RuleDescr [159].op[1].path := 0;              RuleDescr [159].op[1].calc := FALSE;

           RuleDescr [159].op[1].regs[0] := {};
     RuleDescr [159].target   := 0;
     RuleDescr [159].closuretarget := FALSE;
     RuleDescr [159].result   := 0;
     RuleDescr [159].unique := FALSE;
     RuleDescr [159].commutative := FALSE;
     RuleDescr [159].srcline := 2213;
     RuleDescr [159].scrnum := 0;
 (*   RULE 160/2217  *)
           RuleDescr [160].register := RKAdrmode;
     RuleDescr [160].pscarity := 1;
     RuleDescr [160].resregs   [0]  := {};
     RuleDescr [160].changeregs[0]  := {};
           RuleDescr [160].op[1].nt   := ntLReg;
           RuleDescr [160].op[1].path := 1;              RuleDescr [160].op[1].calc := FALSE;

           RuleDescr [160].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [160].target   := 0;
     RuleDescr [160].closuretarget := FALSE;
     RuleDescr [160].result   := 0;
     RuleDescr [160].unique := FALSE;
     RuleDescr [160].commutative := FALSE;
     RuleDescr [160].srcline := 2217;
     RuleDescr [160].scrnum := 0;
 (*   RULE 161/2226  *)
           RuleDescr [161].register := RKRegister;
     RuleDescr [161].pscarity := 1;
     RuleDescr [161].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [161].changeregs[0]  := {};
           RuleDescr [161].op[1].nt   := ntLReg;
           RuleDescr [161].op[1].path := 1;              RuleDescr [161].op[1].calc := FALSE;

           RuleDescr [161].op[1].regs[0] := { (Regesi)-0,  (Regedi)-0};
     RuleDescr [161].target   := 0;
     RuleDescr [161].closuretarget := FALSE;
     RuleDescr [161].result   := 0;
     RuleDescr [161].unique := FALSE;
     RuleDescr [161].commutative := FALSE;
     RuleDescr [161].srcline := 2226;
     RuleDescr [161].scrnum := 1;
     RuleDescr [161].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
 (*   RULE 162/2235  *)
           RuleDescr [162].register := RKRegister;
     RuleDescr [162].pscarity := 1;
     RuleDescr [162].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [162].changeregs[0]  := {};
           RuleDescr [162].op[1].nt   := ntAMemAReg;
           RuleDescr [162].op[1].path := 1;              RuleDescr [162].op[1].calc := FALSE;

           RuleDescr [162].op[1].regs[0] := {};
     RuleDescr [162].target   := 0;
     RuleDescr [162].closuretarget := FALSE;
     RuleDescr [162].result   := 0;
     RuleDescr [162].unique := FALSE;
     RuleDescr [162].commutative := FALSE;
     RuleDescr [162].srcline := 2235;
     RuleDescr [162].scrnum := 0;
 (*   RULE 163/2242  *)
           RuleDescr [163].register := RKRegister;
     RuleDescr [163].pscarity := 1;
     RuleDescr [163].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [163].changeregs[0]  := {};
           RuleDescr [163].op[1].nt   := ntWReg;
           RuleDescr [163].op[1].path := 1;              RuleDescr [163].op[1].calc := FALSE;

           RuleDescr [163].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [163].target   := 1;
     RuleDescr [163].closuretarget := FALSE;
     RuleDescr [163].result   := 0;
     RuleDescr [163].unique := FALSE;
     RuleDescr [163].commutative := FALSE;
     RuleDescr [163].srcline := 2242;
     RuleDescr [163].scrnum := 0;
 (*   RULE 164/2246  *)
           RuleDescr [164].register := RKRegister;
     RuleDescr [164].pscarity := 1;
     RuleDescr [164].resregs   [0]  := { (Regax)-0};
     RuleDescr [164].changeregs[0]  := {};
           RuleDescr [164].op[1].nt   := ntLReg;
           RuleDescr [164].op[1].path := 1;              RuleDescr [164].op[1].calc := FALSE;

           RuleDescr [164].op[1].regs[0] := { (Regeax)-0};
     RuleDescr [164].target   := 0;
     RuleDescr [164].closuretarget := FALSE;
     RuleDescr [164].result   := 0;
     RuleDescr [164].unique := FALSE;
     RuleDescr [164].commutative := FALSE;
     RuleDescr [164].srcline := 2246;
     RuleDescr [164].scrnum := 0;
 (*   RULE 165/2247  *)
           RuleDescr [165].register := RKRegister;
     RuleDescr [165].pscarity := 1;
     RuleDescr [165].resregs   [0]  := { (Regbx)-0};
     RuleDescr [165].changeregs[0]  := {};
           RuleDescr [165].op[1].nt   := ntLReg;
           RuleDescr [165].op[1].path := 1;              RuleDescr [165].op[1].calc := FALSE;

           RuleDescr [165].op[1].regs[0] := { (Regebx)-0};
     RuleDescr [165].target   := 0;
     RuleDescr [165].closuretarget := FALSE;
     RuleDescr [165].result   := 0;
     RuleDescr [165].unique := FALSE;
     RuleDescr [165].commutative := FALSE;
     RuleDescr [165].srcline := 2247;
     RuleDescr [165].scrnum := 0;
 (*   RULE 166/2248  *)
           RuleDescr [166].register := RKRegister;
     RuleDescr [166].pscarity := 1;
     RuleDescr [166].resregs   [0]  := { (Regcx)-0};
     RuleDescr [166].changeregs[0]  := {};
           RuleDescr [166].op[1].nt   := ntLReg;
           RuleDescr [166].op[1].path := 1;              RuleDescr [166].op[1].calc := FALSE;

           RuleDescr [166].op[1].regs[0] := { (Regecx)-0};
     RuleDescr [166].target   := 0;
     RuleDescr [166].closuretarget := FALSE;
     RuleDescr [166].result   := 0;
     RuleDescr [166].unique := FALSE;
     RuleDescr [166].commutative := FALSE;
     RuleDescr [166].srcline := 2248;
     RuleDescr [166].scrnum := 0;
 (*   RULE 167/2249  *)
           RuleDescr [167].register := RKRegister;
     RuleDescr [167].pscarity := 1;
     RuleDescr [167].resregs   [0]  := { (Regdx)-0};
     RuleDescr [167].changeregs[0]  := {};
           RuleDescr [167].op[1].nt   := ntLReg;
           RuleDescr [167].op[1].path := 1;              RuleDescr [167].op[1].calc := FALSE;

           RuleDescr [167].op[1].regs[0] := { (Regedx)-0};
     RuleDescr [167].target   := 0;
     RuleDescr [167].closuretarget := FALSE;
     RuleDescr [167].result   := 0;
     RuleDescr [167].unique := FALSE;
     RuleDescr [167].commutative := FALSE;
     RuleDescr [167].srcline := 2249;
     RuleDescr [167].scrnum := 0;
 (*   RULE 168/2250  *)
           RuleDescr [168].register := RKRegister;
     RuleDescr [168].pscarity := 1;
     RuleDescr [168].resregs   [0]  := { (Regsi)-0};
     RuleDescr [168].changeregs[0]  := {};
           RuleDescr [168].op[1].nt   := ntLReg;
           RuleDescr [168].op[1].path := 1;              RuleDescr [168].op[1].calc := FALSE;

           RuleDescr [168].op[1].regs[0] := { (Regesi)-0};
     RuleDescr [168].target   := 0;
     RuleDescr [168].closuretarget := FALSE;
     RuleDescr [168].result   := 0;
     RuleDescr [168].unique := FALSE;
     RuleDescr [168].commutative := FALSE;
     RuleDescr [168].srcline := 2250;
     RuleDescr [168].scrnum := 0;
 (*   RULE 169/2251  *)
           RuleDescr [169].register := RKRegister;
     RuleDescr [169].pscarity := 1;
     RuleDescr [169].resregs   [0]  := { (Regdi)-0};
     RuleDescr [169].changeregs[0]  := {};
           RuleDescr [169].op[1].nt   := ntLReg;
           RuleDescr [169].op[1].path := 1;              RuleDescr [169].op[1].calc := FALSE;

           RuleDescr [169].op[1].regs[0] := { (Regedi)-0};
     RuleDescr [169].target   := 0;
     RuleDescr [169].closuretarget := FALSE;
     RuleDescr [169].result   := 0;
     RuleDescr [169].unique := FALSE;
     RuleDescr [169].commutative := FALSE;
     RuleDescr [169].srcline := 2251;
     RuleDescr [169].scrnum := 0;
 (*   RULE 170/2256  *)
           RuleDescr [170].register := RKRegister;
     RuleDescr [170].pscarity := 1;
     RuleDescr [170].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [170].changeregs[0]  := {};
           RuleDescr [170].op[1].nt   := ntAMemAReg;
           RuleDescr [170].op[1].path := 1;              RuleDescr [170].op[1].calc := FALSE;

           RuleDescr [170].op[1].regs[0] := {};
     RuleDescr [170].target   := 0;
     RuleDescr [170].closuretarget := FALSE;
     RuleDescr [170].result   := 0;
     RuleDescr [170].unique := FALSE;
     RuleDescr [170].commutative := FALSE;
     RuleDescr [170].srcline := 2256;
     RuleDescr [170].scrnum := 0;
 (*   RULE 171/2260  *)
           RuleDescr [171].register := RKRegister;
     RuleDescr [171].pscarity := 1;
     RuleDescr [171].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [171].changeregs[0]  := {};
           RuleDescr [171].op[1].nt   := ntAMemAReg;
           RuleDescr [171].op[1].path := 1;              RuleDescr [171].op[1].calc := FALSE;

           RuleDescr [171].op[1].regs[0] := {};
     RuleDescr [171].target   := 0;
     RuleDescr [171].closuretarget := FALSE;
     RuleDescr [171].result   := 0;
     RuleDescr [171].unique := FALSE;
     RuleDescr [171].commutative := FALSE;
     RuleDescr [171].srcline := 2260;
     RuleDescr [171].scrnum := 0;
 (*   RULE 172/2264  *)
           RuleDescr [172].register := RKRegister;
     RuleDescr [172].pscarity := 1;
     RuleDescr [172].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [172].changeregs[0]  := {};
           RuleDescr [172].op[1].nt   := ntLReg;
           RuleDescr [172].op[1].path := 1;              RuleDescr [172].op[1].calc := FALSE;

           RuleDescr [172].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [172].target   := 1;
     RuleDescr [172].closuretarget := FALSE;
     RuleDescr [172].result   := 0;
     RuleDescr [172].unique := FALSE;
     RuleDescr [172].commutative := FALSE;
     RuleDescr [172].srcline := 2264;
     RuleDescr [172].scrnum := 0;
 (*   RULE 173/2269  *)
           RuleDescr [173].register := RKRegister;
     RuleDescr [173].pscarity := 1;
     RuleDescr [173].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [173].changeregs[0]  := {};
           RuleDescr [173].op[1].nt   := ntBReg;
           RuleDescr [173].op[1].path := 1;              RuleDescr [173].op[1].calc := FALSE;

           RuleDescr [173].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [173].target   := 1;
     RuleDescr [173].closuretarget := FALSE;
     RuleDescr [173].result   := 0;
     RuleDescr [173].unique := FALSE;
     RuleDescr [173].commutative := FALSE;
     RuleDescr [173].srcline := 2269;
     RuleDescr [173].scrnum := 0;
 (*   RULE 174/2270  *)
           RuleDescr [174].register := RKRegister;
     RuleDescr [174].pscarity := 1;
     RuleDescr [174].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [174].changeregs[0]  := {};
           RuleDescr [174].op[1].nt   := ntWReg;
           RuleDescr [174].op[1].path := 1;              RuleDescr [174].op[1].calc := FALSE;

           RuleDescr [174].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0};
     RuleDescr [174].target   := 0;
     RuleDescr [174].closuretarget := FALSE;
     RuleDescr [174].result   := 0;
     RuleDescr [174].unique := FALSE;
     RuleDescr [174].commutative := FALSE;
     RuleDescr [174].srcline := 2270;
     RuleDescr [174].scrnum := 0;
 (*   RULE 175/2271  *)
           RuleDescr [175].register := RKRegister;
     RuleDescr [175].pscarity := 1;
     RuleDescr [175].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [175].changeregs[0]  := {};
           RuleDescr [175].op[1].nt   := ntLReg;
           RuleDescr [175].op[1].path := 1;              RuleDescr [175].op[1].calc := FALSE;

           RuleDescr [175].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0};
     RuleDescr [175].target   := 0;
     RuleDescr [175].closuretarget := FALSE;
     RuleDescr [175].result   := 0;
     RuleDescr [175].unique := FALSE;
     RuleDescr [175].commutative := FALSE;
     RuleDescr [175].srcline := 2271;
     RuleDescr [175].scrnum := 0;
 (*   RULE 176/2275  *)
           RuleDescr [176].register := RKRegister;
     RuleDescr [176].pscarity := 1;
     RuleDescr [176].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [176].changeregs[0]  := {};
           RuleDescr [176].op[1].nt   := ntBReg;
           RuleDescr [176].op[1].path := 1;              RuleDescr [176].op[1].calc := FALSE;

           RuleDescr [176].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [176].target   := 0;
     RuleDescr [176].closuretarget := FALSE;
     RuleDescr [176].result   := 0;
     RuleDescr [176].unique := FALSE;
     RuleDescr [176].commutative := FALSE;
     RuleDescr [176].srcline := 2275;
     RuleDescr [176].scrnum := 0;
 (*   RULE 177/2276  *)
           RuleDescr [177].register := RKRegister;
     RuleDescr [177].pscarity := 1;
     RuleDescr [177].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [177].changeregs[0]  := {};
           RuleDescr [177].op[1].nt   := ntWReg;
           RuleDescr [177].op[1].path := 1;              RuleDescr [177].op[1].calc := FALSE;

           RuleDescr [177].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [177].target   := 1;
     RuleDescr [177].closuretarget := FALSE;
     RuleDescr [177].result   := 0;
     RuleDescr [177].unique := FALSE;
     RuleDescr [177].commutative := FALSE;
     RuleDescr [177].srcline := 2276;
     RuleDescr [177].scrnum := 0;
 (*   RULE 178/2277  *)
           RuleDescr [178].register := RKRegister;
     RuleDescr [178].pscarity := 1;
     RuleDescr [178].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [178].changeregs[0]  := {};
           RuleDescr [178].op[1].nt   := ntLReg;
           RuleDescr [178].op[1].path := 1;              RuleDescr [178].op[1].calc := FALSE;

           RuleDescr [178].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [178].target   := 0;
     RuleDescr [178].closuretarget := FALSE;
     RuleDescr [178].result   := 0;
     RuleDescr [178].unique := FALSE;
     RuleDescr [178].commutative := FALSE;
     RuleDescr [178].srcline := 2277;
     RuleDescr [178].scrnum := 0;
 (*   RULE 179/2281  *)
           RuleDescr [179].register := RKRegister;
     RuleDescr [179].pscarity := 1;
     RuleDescr [179].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [179].changeregs[0]  := {};
           RuleDescr [179].op[1].nt   := ntBReg;
           RuleDescr [179].op[1].path := 1;              RuleDescr [179].op[1].calc := FALSE;

           RuleDescr [179].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [179].target   := 0;
     RuleDescr [179].closuretarget := FALSE;
     RuleDescr [179].result   := 0;
     RuleDescr [179].unique := FALSE;
     RuleDescr [179].commutative := FALSE;
     RuleDescr [179].srcline := 2281;
     RuleDescr [179].scrnum := 0;
 (*   RULE 180/2282  *)
           RuleDescr [180].register := RKRegister;
     RuleDescr [180].pscarity := 1;
     RuleDescr [180].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [180].changeregs[0]  := {};
           RuleDescr [180].op[1].nt   := ntWReg;
           RuleDescr [180].op[1].path := 1;              RuleDescr [180].op[1].calc := FALSE;

           RuleDescr [180].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [180].target   := 0;
     RuleDescr [180].closuretarget := FALSE;
     RuleDescr [180].result   := 0;
     RuleDescr [180].unique := FALSE;
     RuleDescr [180].commutative := FALSE;
     RuleDescr [180].srcline := 2282;
     RuleDescr [180].scrnum := 0;
 (*   RULE 181/2283  *)
           RuleDescr [181].register := RKRegister;
     RuleDescr [181].pscarity := 1;
     RuleDescr [181].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [181].changeregs[0]  := {};
           RuleDescr [181].op[1].nt   := ntLReg;
           RuleDescr [181].op[1].path := 1;              RuleDescr [181].op[1].calc := FALSE;

           RuleDescr [181].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [181].target   := 1;
     RuleDescr [181].closuretarget := FALSE;
     RuleDescr [181].result   := 0;
     RuleDescr [181].unique := FALSE;
     RuleDescr [181].commutative := FALSE;
     RuleDescr [181].srcline := 2283;
     RuleDescr [181].scrnum := 0;
 (*   RULE 182/2286  *)
           RuleDescr [182].register := RKMemory;
     RuleDescr [182].pscarity := 0;
     RuleDescr [182].resregs   [0]  := {};
     RuleDescr [182].changeregs[0]  := {};
     RuleDescr [182].target   := 0;
     RuleDescr [182].closuretarget := FALSE;
     RuleDescr [182].result   := 0;
     RuleDescr [182].unique := FALSE;
     RuleDescr [182].commutative := FALSE;
     RuleDescr [182].srcline := 2286;
     RuleDescr [182].scrnum := 0;
 (*   RULE 183/2289  *)
           RuleDescr [183].register := RKMemory;
     RuleDescr [183].pscarity := 0;
     RuleDescr [183].resregs   [0]  := {};
     RuleDescr [183].changeregs[0]  := {};
     RuleDescr [183].target   := 0;
     RuleDescr [183].closuretarget := FALSE;
     RuleDescr [183].result   := 0;
     RuleDescr [183].unique := FALSE;
     RuleDescr [183].commutative := FALSE;
     RuleDescr [183].srcline := 2289;
     RuleDescr [183].scrnum := 0;
 (*   RULE 184/2292  *)
           RuleDescr [184].register := RKMemory;
     RuleDescr [184].pscarity := 0;
     RuleDescr [184].resregs   [0]  := {};
     RuleDescr [184].changeregs[0]  := {};
     RuleDescr [184].target   := 0;
     RuleDescr [184].closuretarget := FALSE;
     RuleDescr [184].result   := 0;
     RuleDescr [184].unique := FALSE;
     RuleDescr [184].commutative := FALSE;
     RuleDescr [184].srcline := 2292;
     RuleDescr [184].scrnum := 0;
 (*   RULE 185/2295  *)
           RuleDescr [185].register := RKMemory;
     RuleDescr [185].pscarity := 0;
     RuleDescr [185].resregs   [0]  := {};
     RuleDescr [185].changeregs[0]  := {};
     RuleDescr [185].target   := 0;
     RuleDescr [185].closuretarget := FALSE;
     RuleDescr [185].result   := 0;
     RuleDescr [185].unique := FALSE;
     RuleDescr [185].commutative := FALSE;
     RuleDescr [185].srcline := 2295;
     RuleDescr [185].scrnum := 0;
 (*   RULE 186/2298  *)
           RuleDescr [186].register := RKMemory;
     RuleDescr [186].pscarity := 0;
     RuleDescr [186].resregs   [0]  := {};
     RuleDescr [186].changeregs[0]  := {};
     RuleDescr [186].target   := 0;
     RuleDescr [186].closuretarget := FALSE;
     RuleDescr [186].result   := 0;
     RuleDescr [186].unique := FALSE;
     RuleDescr [186].commutative := FALSE;
     RuleDescr [186].srcline := 2298;
     RuleDescr [186].scrnum := 0;
 (*   RULE 187/2301  *)
           RuleDescr [187].register := RKMemory;
     RuleDescr [187].pscarity := 0;
     RuleDescr [187].resregs   [0]  := {};
     RuleDescr [187].changeregs[0]  := {};
     RuleDescr [187].target   := 0;
     RuleDescr [187].closuretarget := FALSE;
     RuleDescr [187].result   := 0;
     RuleDescr [187].unique := FALSE;
     RuleDescr [187].commutative := FALSE;
     RuleDescr [187].srcline := 2301;
     RuleDescr [187].scrnum := 0;
 (*   RULE 188/2304  *)
           RuleDescr [188].register := RKMemory;
     RuleDescr [188].pscarity := 0;
     RuleDescr [188].resregs   [0]  := {};
     RuleDescr [188].changeregs[0]  := {};
     RuleDescr [188].target   := 0;
     RuleDescr [188].closuretarget := FALSE;
     RuleDescr [188].result   := 0;
     RuleDescr [188].unique := FALSE;
     RuleDescr [188].commutative := FALSE;
     RuleDescr [188].srcline := 2304;
     RuleDescr [188].scrnum := 0;
 (*   RULE 189/2307  *)
           RuleDescr [189].register := RKMemory;
     RuleDescr [189].pscarity := 0;
     RuleDescr [189].resregs   [0]  := {};
     RuleDescr [189].changeregs[0]  := {};
     RuleDescr [189].target   := 0;
     RuleDescr [189].closuretarget := FALSE;
     RuleDescr [189].result   := 0;
     RuleDescr [189].unique := FALSE;
     RuleDescr [189].commutative := FALSE;
     RuleDescr [189].srcline := 2307;
     RuleDescr [189].scrnum := 0;
 (*   RULE 190/2310  *)
           RuleDescr [190].register := RKAdrmode;
     RuleDescr [190].pscarity := 2;
     RuleDescr [190].resregs   [0]  := {};
     RuleDescr [190].changeregs[0]  := {};
           RuleDescr [190].op[1].nt   := ntMemory;
           RuleDescr [190].op[1].path := 1;              RuleDescr [190].op[1].calc := FALSE;

           RuleDescr [190].op[1].regs[0] := {};
           RuleDescr [190].op[2].nt   := ntLReg;
           RuleDescr [190].op[2].path := 2;              RuleDescr [190].op[2].calc := FALSE;

           RuleDescr [190].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [190].target   := 0;
     RuleDescr [190].closuretarget := FALSE;
     RuleDescr [190].result   := 0;
     RuleDescr [190].unique := FALSE;
     RuleDescr [190].commutative := FALSE;
     RuleDescr [190].srcline := 2310;
     RuleDescr [190].scrnum := 0;
 (*   RULE 191/2322  *)
           RuleDescr [191].register := RKRegister;
     RuleDescr [191].pscarity := 3;
     RuleDescr [191].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [191].changeregs[0]  := {};
           RuleDescr [191].op[1].nt   := ntMemory;
           RuleDescr [191].op[1].path := 1;              RuleDescr [191].op[1].calc := FALSE;

           RuleDescr [191].op[1].regs[0] := {};
           RuleDescr [191].op[2].nt   := ntLReg;
           RuleDescr [191].op[2].path := 2;              RuleDescr [191].op[2].calc := FALSE;

           RuleDescr [191].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [191].op[3].nt   := ntLReg;
           RuleDescr [191].op[3].path := 3;              RuleDescr [191].op[3].calc := FALSE;

           RuleDescr [191].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [191].target   := 2;
     RuleDescr [191].closuretarget := FALSE;
     RuleDescr [191].result   := 0;
     RuleDescr [191].unique := FALSE;
     RuleDescr [191].commutative := FALSE;
     RuleDescr [191].srcline := 2322;
     RuleDescr [191].scrnum := 0;
 (*   RULE 192/2338  *)
           RuleDescr [192].register := RKAdrmode;
     RuleDescr [192].pscarity := 1;
     RuleDescr [192].resregs   [0]  := {};
     RuleDescr [192].changeregs[0]  := {};
           RuleDescr [192].op[1].nt   := ntMemory;
           RuleDescr [192].op[1].path := 1;              RuleDescr [192].op[1].calc := FALSE;

           RuleDescr [192].op[1].regs[0] := {};
     RuleDescr [192].target   := 0;
     RuleDescr [192].closuretarget := FALSE;
     RuleDescr [192].result   := 0;
     RuleDescr [192].unique := FALSE;
     RuleDescr [192].commutative := FALSE;
     RuleDescr [192].srcline := 2338;
     RuleDescr [192].scrnum := 0;
 (*   RULE 193/2350  *)
           RuleDescr [193].register := RKRegister;
     RuleDescr [193].pscarity := 1;
     RuleDescr [193].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [193].changeregs[0]  := {};
           RuleDescr [193].op[1].nt   := ntLReg;
           RuleDescr [193].op[1].path := 1;              RuleDescr [193].op[1].calc := FALSE;

           RuleDescr [193].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [193].target   := 1;
     RuleDescr [193].closuretarget := FALSE;
     RuleDescr [193].result   := 0;
     RuleDescr [193].unique := FALSE;
     RuleDescr [193].commutative := FALSE;
     RuleDescr [193].srcline := 2350;
     RuleDescr [193].scrnum := 0;
 (*   RULE 194/2356  *)
           RuleDescr [194].register := RKRegister;
     RuleDescr [194].pscarity := 1;
     RuleDescr [194].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [194].changeregs[0]  := {};
           RuleDescr [194].op[1].nt   := ntLReg;
           RuleDescr [194].op[1].path := 1;              RuleDescr [194].op[1].calc := FALSE;

           RuleDescr [194].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [194].target   := 1;
     RuleDescr [194].closuretarget := FALSE;
     RuleDescr [194].result   := 0;
     RuleDescr [194].unique := FALSE;
     RuleDescr [194].commutative := FALSE;
     RuleDescr [194].srcline := 2356;
     RuleDescr [194].scrnum := 0;
 (*   RULE 195/2363  *)
           RuleDescr [195].register := RKRegister;
     RuleDescr [195].pscarity := 1;
     RuleDescr [195].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [195].changeregs[0]  := {};
           RuleDescr [195].op[1].nt   := ntReg;
           RuleDescr [195].op[1].path := 1;              RuleDescr [195].op[1].calc := FALSE;

           RuleDescr [195].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [195].target   := 1;
     RuleDescr [195].closuretarget := FALSE;
     RuleDescr [195].result   := 0;
     RuleDescr [195].unique := FALSE;
     RuleDescr [195].commutative := FALSE;
     RuleDescr [195].srcline := 2363;
     RuleDescr [195].scrnum := 0;
 (*   RULE 196/2374  *)
           RuleDescr [196].register := RKRegister;
     RuleDescr [196].pscarity := 1;
     RuleDescr [196].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [196].changeregs[0]  := {};
           RuleDescr [196].op[1].nt   := ntReg;
           RuleDescr [196].op[1].path := 1;              RuleDescr [196].op[1].calc := FALSE;

           RuleDescr [196].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [196].target   := 1;
     RuleDescr [196].closuretarget := FALSE;
     RuleDescr [196].result   := 0;
     RuleDescr [196].unique := FALSE;
     RuleDescr [196].commutative := FALSE;
     RuleDescr [196].srcline := 2374;
     RuleDescr [196].scrnum := 0;
 (*   RULE 197/2385  *)
           RuleDescr [197].register := RKRegister;
     RuleDescr [197].pscarity := 1;
     RuleDescr [197].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [197].changeregs[0]  := {};
           RuleDescr [197].op[1].nt   := ntReg;
           RuleDescr [197].op[1].path := 1;              RuleDescr [197].op[1].calc := FALSE;

           RuleDescr [197].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [197].target   := 1;
     RuleDescr [197].closuretarget := FALSE;
     RuleDescr [197].result   := 0;
     RuleDescr [197].unique := FALSE;
     RuleDescr [197].commutative := FALSE;
     RuleDescr [197].srcline := 2385;
     RuleDescr [197].scrnum := 0;
 (*   RULE 198/2401  *)
           RuleDescr [198].register := RKRegister;
     RuleDescr [198].pscarity := 0;
     RuleDescr [198].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [198].changeregs[0]  := {};
     RuleDescr [198].target   := 0;
     RuleDescr [198].closuretarget := FALSE;
     RuleDescr [198].result   := 0;
     RuleDescr [198].unique := FALSE;
     RuleDescr [198].commutative := FALSE;
     RuleDescr [198].srcline := 2401;
     RuleDescr [198].scrnum := 0;
 (*   RULE 199/2405  *)
           RuleDescr [199].register := RKRegister;
     RuleDescr [199].pscarity := 1;
     RuleDescr [199].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [199].changeregs[0]  := {};
           RuleDescr [199].op[1].nt   := ntMemory;
           RuleDescr [199].op[1].path := 1;              RuleDescr [199].op[1].calc := FALSE;

           RuleDescr [199].op[1].regs[0] := {};
     RuleDescr [199].target   := 0;
     RuleDescr [199].closuretarget := FALSE;
     RuleDescr [199].result   := 0;
     RuleDescr [199].unique := FALSE;
     RuleDescr [199].commutative := FALSE;
     RuleDescr [199].srcline := 2405;
     RuleDescr [199].scrnum := 0;
 (*   RULE 200/2409  *)
           RuleDescr [200].register := RKRegister;
     RuleDescr [200].pscarity := 2;
     RuleDescr [200].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [200].changeregs[0]  := {};
           RuleDescr [200].op[1].nt   := ntLReg;
           RuleDescr [200].op[1].path := 1;              RuleDescr [200].op[1].calc := FALSE;

           RuleDescr [200].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [200].op[2].nt   := ntLReg;
           RuleDescr [200].op[2].path := 2;              RuleDescr [200].op[2].calc := FALSE;

           RuleDescr [200].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [200].target   := 1;
     RuleDescr [200].closuretarget := FALSE;
     RuleDescr [200].result   := 0;
     RuleDescr [200].unique := FALSE;
     RuleDescr [200].commutative := FALSE;
     RuleDescr [200].srcline := 2409;
     RuleDescr [200].scrnum := 0;
 (*   RULE 201/2418  *)
           RuleDescr [201].register := RKAdrmode;
     RuleDescr [201].pscarity := 4;
     RuleDescr [201].resregs   [0]  := {};
     RuleDescr [201].changeregs[0]  := {};
           RuleDescr [201].op[1].nt   := ntLReg;
           RuleDescr [201].op[1].path := 1;              RuleDescr [201].op[1].calc := FALSE;

           RuleDescr [201].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [201].op[2].nt   := ntLReg;
           RuleDescr [201].op[2].path := 2;              RuleDescr [201].op[2].calc := FALSE;

           RuleDescr [201].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [201].op[3].nt   := ntLReg;
           RuleDescr [201].op[3].path := 3;              RuleDescr [201].op[3].calc := FALSE;

           RuleDescr [201].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [201].op[4].nt   := ntLReg;
           RuleDescr [201].op[4].path := 4;              RuleDescr [201].op[4].calc := FALSE;

           RuleDescr [201].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [201].target   := 0;
     RuleDescr [201].closuretarget := FALSE;
     RuleDescr [201].result   := 0;
     RuleDescr [201].unique := FALSE;
     RuleDescr [201].commutative := FALSE;
     RuleDescr [201].srcline := 2418;
     RuleDescr [201].scrnum := 0;
 (*   RULE 202/2434  *)
           RuleDescr [202].register := RKAdrmode;
     RuleDescr [202].pscarity := 1;
     RuleDescr [202].resregs   [0]  := {};
     RuleDescr [202].changeregs[0]  := {};
           RuleDescr [202].op[1].nt   := ntReducedStack;
           RuleDescr [202].op[1].path := 1;              RuleDescr [202].op[1].calc := FALSE;

           RuleDescr [202].op[1].regs[0] := {};
     RuleDescr [202].target   := 0;
     RuleDescr [202].closuretarget := FALSE;
     RuleDescr [202].result   := 0;
     RuleDescr [202].unique := FALSE;
     RuleDescr [202].commutative := FALSE;
     RuleDescr [202].srcline := 2434;
     RuleDescr [202].scrnum := 0;
 (*   RULE 203/2443  *)
           RuleDescr [203].register := RKAdrmode;
     RuleDescr [203].pscarity := 1;
     RuleDescr [203].resregs   [0]  := {};
     RuleDescr [203].changeregs[0]  := {};
           RuleDescr [203].op[1].nt   := ntReducedStack;
           RuleDescr [203].op[1].path := 1;              RuleDescr [203].op[1].calc := FALSE;

           RuleDescr [203].op[1].regs[0] := {};
     RuleDescr [203].target   := 0;
     RuleDescr [203].closuretarget := FALSE;
     RuleDescr [203].result   := 0;
     RuleDescr [203].unique := FALSE;
     RuleDescr [203].commutative := FALSE;
     RuleDescr [203].srcline := 2443;
     RuleDescr [203].scrnum := 0;
 (*   RULE 204/2462  *)
           RuleDescr [204].register := RKAdrmode;
     RuleDescr [204].pscarity := 2;
     RuleDescr [204].resregs   [0]  := {};
     RuleDescr [204].changeregs[0]  := {};
           RuleDescr [204].op[1].nt   := ntReducedStack;
           RuleDescr [204].op[1].path := 1;              RuleDescr [204].op[1].calc := FALSE;

           RuleDescr [204].op[1].regs[0] := {};
           RuleDescr [204].op[2].nt   := ntLReg;
           RuleDescr [204].op[2].path := 2;              RuleDescr [204].op[2].calc := FALSE;

           RuleDescr [204].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [204].target   := 0;
     RuleDescr [204].closuretarget := FALSE;
     RuleDescr [204].result   := 0;
     RuleDescr [204].unique := FALSE;
     RuleDescr [204].commutative := FALSE;
     RuleDescr [204].srcline := 2462;
     RuleDescr [204].scrnum := 0;
 (*   RULE 205/2470  *)
           RuleDescr [205].register := RKAdrmode;
     RuleDescr [205].pscarity := 1;
     RuleDescr [205].resregs   [0]  := {};
     RuleDescr [205].changeregs[0]  := {};
           RuleDescr [205].op[1].nt   := ntReducedStack;
           RuleDescr [205].op[1].path := 1;              RuleDescr [205].op[1].calc := FALSE;

           RuleDescr [205].op[1].regs[0] := {};
     RuleDescr [205].target   := 0;
     RuleDescr [205].closuretarget := FALSE;
     RuleDescr [205].result   := 0;
     RuleDescr [205].unique := FALSE;
     RuleDescr [205].commutative := FALSE;
     RuleDescr [205].srcline := 2470;
     RuleDescr [205].scrnum := 0;
 (*   RULE 206/2478  *)
           RuleDescr [206].register := RKRegister;
     RuleDescr [206].pscarity := 0;
     RuleDescr [206].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [206].changeregs[0]  := {};
     RuleDescr [206].target   := 0;
     RuleDescr [206].closuretarget := FALSE;
     RuleDescr [206].result   := 0;
     RuleDescr [206].unique := FALSE;
     RuleDescr [206].commutative := FALSE;
     RuleDescr [206].srcline := 2478;
     RuleDescr [206].scrnum := 0;
 (*   RULE 207/2488  *)
           RuleDescr [207].register := RKMemory;
     RuleDescr [207].pscarity := 2;
     RuleDescr [207].resregs   [0]  := {};
     RuleDescr [207].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regcl)-0,  (Regch)-0,  (Regax)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [207].op[1].nt   := ntMemory;
           RuleDescr [207].op[1].path := 273;              RuleDescr [207].op[1].calc := FALSE;

           RuleDescr [207].op[1].regs[0] := {};
           RuleDescr [207].op[2].nt   := ntMemory;
           RuleDescr [207].op[2].path := 289;              RuleDescr [207].op[2].calc := FALSE;

           RuleDescr [207].op[2].regs[0] := {};
     RuleDescr [207].target   := 0;
     RuleDescr [207].closuretarget := FALSE;
     RuleDescr [207].result   := 0;
     RuleDescr [207].unique := FALSE;
     RuleDescr [207].commutative := FALSE;
     RuleDescr [207].srcline := 2488;
     RuleDescr [207].scrnum := 0;
 (*   RULE 208/2528  *)
           RuleDescr [208].register := RKAdrmode;
     RuleDescr [208].pscarity := 2;
     RuleDescr [208].resregs   [0]  := {};
     RuleDescr [208].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [208].op[1].nt   := ntMemory;
           RuleDescr [208].op[1].path := 17;              RuleDescr [208].op[1].calc := FALSE;

           RuleDescr [208].op[1].regs[0] := {};
           RuleDescr [208].op[2].nt   := ntMemory;
           RuleDescr [208].op[2].path := 18;              RuleDescr [208].op[2].calc := FALSE;

           RuleDescr [208].op[2].regs[0] := {};
     RuleDescr [208].target   := 0;
     RuleDescr [208].closuretarget := FALSE;
     RuleDescr [208].result   := 0;
     RuleDescr [208].unique := FALSE;
     RuleDescr [208].commutative := FALSE;
     RuleDescr [208].srcline := 2528;
     RuleDescr [208].scrnum := 0;
 (*   RULE 209/2558  *)
           RuleDescr [209].register := RKAdrmode;
     RuleDescr [209].pscarity := 2;
     RuleDescr [209].resregs   [0]  := {};
     RuleDescr [209].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [209].op[1].nt   := ntMemory;
           RuleDescr [209].op[1].path := 17;              RuleDescr [209].op[1].calc := FALSE;

           RuleDescr [209].op[1].regs[0] := {};
           RuleDescr [209].op[2].nt   := ntMemory;
           RuleDescr [209].op[2].path := 18;              RuleDescr [209].op[2].calc := FALSE;

           RuleDescr [209].op[2].regs[0] := {};
     RuleDescr [209].target   := 0;
     RuleDescr [209].closuretarget := FALSE;
     RuleDescr [209].result   := 0;
     RuleDescr [209].unique := FALSE;
     RuleDescr [209].commutative := FALSE;
     RuleDescr [209].srcline := 2558;
     RuleDescr [209].scrnum := 0;
 (*   RULE 210/2580  *)
           RuleDescr [210].register := RKAdrmode;
     RuleDescr [210].pscarity := 2;
     RuleDescr [210].resregs   [0]  := {};
     RuleDescr [210].changeregs[0]  := { (Regcl)-0,  (Regch)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [210].op[1].nt   := ntMemory;
           RuleDescr [210].op[1].path := 17;              RuleDescr [210].op[1].calc := FALSE;

           RuleDescr [210].op[1].regs[0] := {};
           RuleDescr [210].op[2].nt   := ntMemory;
           RuleDescr [210].op[2].path := 18;              RuleDescr [210].op[2].calc := FALSE;

           RuleDescr [210].op[2].regs[0] := {};
     RuleDescr [210].target   := 0;
     RuleDescr [210].closuretarget := FALSE;
     RuleDescr [210].result   := 0;
     RuleDescr [210].unique := FALSE;
     RuleDescr [210].commutative := FALSE;
     RuleDescr [210].srcline := 2580;
     RuleDescr [210].scrnum := 0;
 (*   RULE 211/2603  *)
           RuleDescr [211].register := RKMemory;
     RuleDescr [211].pscarity := 2;
     RuleDescr [211].resregs   [0]  := {};
     RuleDescr [211].changeregs[0]  := {};
           RuleDescr [211].op[1].nt   := ntArgs;
           RuleDescr [211].op[1].path := 1;              RuleDescr [211].op[1].calc := FALSE;

           RuleDescr [211].op[1].regs[0] := {};
           RuleDescr [211].op[2].nt   := ntGv;
           RuleDescr [211].op[2].path := 18;              RuleDescr [211].op[2].calc := FALSE;

           RuleDescr [211].op[2].regs[0] := {};
     RuleDescr [211].target   := 0;
     RuleDescr [211].closuretarget := FALSE;
     RuleDescr [211].result   := 0;
     RuleDescr [211].unique := FALSE;
     RuleDescr [211].commutative := FALSE;
     RuleDescr [211].srcline := 2603;
     RuleDescr [211].scrnum := 0;
 (*   RULE 212/2610  *)
           RuleDescr [212].register := RKMemory;
     RuleDescr [212].pscarity := 2;
     RuleDescr [212].resregs   [0]  := {};
     RuleDescr [212].changeregs[0]  := {};
           RuleDescr [212].op[1].nt   := ntArgs;
           RuleDescr [212].op[1].path := 1;              RuleDescr [212].op[1].calc := FALSE;

           RuleDescr [212].op[1].regs[0] := {};
           RuleDescr [212].op[2].nt   := ntMemory;
           RuleDescr [212].op[2].path := 4370;              RuleDescr [212].op[2].calc := FALSE;

           RuleDescr [212].op[2].regs[0] := {};
     RuleDescr [212].target   := 0;
     RuleDescr [212].closuretarget := FALSE;
     RuleDescr [212].result   := 0;
     RuleDescr [212].unique := FALSE;
     RuleDescr [212].commutative := FALSE;
     RuleDescr [212].srcline := 2610;
     RuleDescr [212].scrnum := 0;
 (*   RULE 213/2620  *)
           RuleDescr [213].register := RKMemory;
     RuleDescr [213].pscarity := 2;
     RuleDescr [213].resregs   [0]  := {};
     RuleDescr [213].changeregs[0]  := {};
           RuleDescr [213].op[1].nt   := ntArgs;
           RuleDescr [213].op[1].path := 1;              RuleDescr [213].op[1].calc := FALSE;

           RuleDescr [213].op[1].regs[0] := {};
           RuleDescr [213].op[2].nt   := ntMemory;
           RuleDescr [213].op[2].path := 69906;              RuleDescr [213].op[2].calc := FALSE;

           RuleDescr [213].op[2].regs[0] := {};
     RuleDescr [213].target   := 0;
     RuleDescr [213].closuretarget := FALSE;
     RuleDescr [213].result   := 0;
     RuleDescr [213].unique := FALSE;
     RuleDescr [213].commutative := FALSE;
     RuleDescr [213].srcline := 2620;
     RuleDescr [213].scrnum := 0;
 (*   RULE 214/2632  *)
           RuleDescr [214].register := RKRegister;
     RuleDescr [214].pscarity := 1;
     RuleDescr [214].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [214].changeregs[0]  := {};
           RuleDescr [214].op[1].nt   := ntMemory;
           RuleDescr [214].op[1].path := 273;              RuleDescr [214].op[1].calc := FALSE;

           RuleDescr [214].op[1].regs[0] := {};
     RuleDescr [214].target   := 0;
     RuleDescr [214].closuretarget := FALSE;
     RuleDescr [214].result   := 0;
     RuleDescr [214].unique := FALSE;
     RuleDescr [214].commutative := FALSE;
     RuleDescr [214].srcline := 2632;
     RuleDescr [214].scrnum := 0;
 (*   RULE 215/2640  *)
           RuleDescr [215].register := RKRegister;
     RuleDescr [215].pscarity := 1;
     RuleDescr [215].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [215].changeregs[0]  := {};
           RuleDescr [215].op[1].nt   := ntMemory;
           RuleDescr [215].op[1].path := 4369;              RuleDescr [215].op[1].calc := FALSE;

           RuleDescr [215].op[1].regs[0] := {};
     RuleDescr [215].target   := 0;
     RuleDescr [215].closuretarget := FALSE;
     RuleDescr [215].result   := 0;
     RuleDescr [215].unique := FALSE;
     RuleDescr [215].commutative := FALSE;
     RuleDescr [215].srcline := 2640;
     RuleDescr [215].scrnum := 0;
 (*   RULE 216/2650  *)
           RuleDescr [216].register := RKRegister;
     RuleDescr [216].pscarity := 2;
     RuleDescr [216].resregs   [0]  := { (Regal)-0};
     RuleDescr [216].changeregs[0]  := { (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [216].op[1].nt   := ntBReg;
           RuleDescr [216].op[1].path := 1;              RuleDescr [216].op[1].calc := FALSE;

           RuleDescr [216].op[1].regs[0] := { (Regal)-0};
           RuleDescr [216].op[2].nt   := ntConstant;
           RuleDescr [216].op[2].path := 2;              RuleDescr [216].op[2].calc := FALSE;

           RuleDescr [216].op[2].regs[0] := {};
     RuleDescr [216].target   := 1;
     RuleDescr [216].closuretarget := FALSE;
     RuleDescr [216].result   := 0;
     RuleDescr [216].unique := FALSE;
     RuleDescr [216].commutative := FALSE;
     RuleDescr [216].srcline := 2650;
     RuleDescr [216].scrnum := 1;
     RuleDescr [216].scrrs [1] [0]  := { (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
 (*   RULE 217/2669  *)
           RuleDescr [217].register := RKRegister;
     RuleDescr [217].pscarity := 2;
     RuleDescr [217].resregs   [0]  := { (Regax)-0};
     RuleDescr [217].changeregs[0]  := { (Regdl)-0,  (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
           RuleDescr [217].op[1].nt   := ntWReg;
           RuleDescr [217].op[1].path := 1;              RuleDescr [217].op[1].calc := FALSE;

           RuleDescr [217].op[1].regs[0] := { (Regax)-0};
           RuleDescr [217].op[2].nt   := ntConstant;
           RuleDescr [217].op[2].path := 2;              RuleDescr [217].op[2].calc := FALSE;

           RuleDescr [217].op[2].regs[0] := {};
     RuleDescr [217].target   := 1;
     RuleDescr [217].closuretarget := FALSE;
     RuleDescr [217].result   := 0;
     RuleDescr [217].unique := FALSE;
     RuleDescr [217].commutative := FALSE;
     RuleDescr [217].srcline := 2669;
     RuleDescr [217].scrnum := 1;
     RuleDescr [217].scrrs [1] [0]  := { (Regbx)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0};
 (*   RULE 218/2688  *)
           RuleDescr [218].register := RKRegister;
     RuleDescr [218].pscarity := 2;
     RuleDescr [218].resregs   [0]  := { (Regeax)-0};
     RuleDescr [218].changeregs[0]  := { (Regdl)-0,  (Regdh)-0,  (Regdx)-0,  (Regedx)-0};
           RuleDescr [218].op[1].nt   := ntLReg;
           RuleDescr [218].op[1].path := 1;              RuleDescr [218].op[1].calc := FALSE;

           RuleDescr [218].op[1].regs[0] := { (Regeax)-0};
           RuleDescr [218].op[2].nt   := ntConstant;
           RuleDescr [218].op[2].path := 2;              RuleDescr [218].op[2].calc := FALSE;

           RuleDescr [218].op[2].regs[0] := {};
     RuleDescr [218].target   := 1;
     RuleDescr [218].closuretarget := FALSE;
     RuleDescr [218].result   := 0;
     RuleDescr [218].unique := FALSE;
     RuleDescr [218].commutative := FALSE;
     RuleDescr [218].srcline := 2688;
     RuleDescr [218].scrnum := 1;
     RuleDescr [218].scrrs [1] [0]  := { (Regebx)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 219/2708  *)
           RuleDescr [219].register := RKRegister;
     RuleDescr [219].pscarity := 2;
     RuleDescr [219].resregs   [0]  := { (Regah)-0};
     RuleDescr [219].changeregs[0]  := {};
           RuleDescr [219].op[1].nt   := ntBReg;
           RuleDescr [219].op[1].path := 1;              RuleDescr [219].op[1].calc := FALSE;

           RuleDescr [219].op[1].regs[0] := { (Regal)-0};
           RuleDescr [219].op[2].nt   := ntConstant;
           RuleDescr [219].op[2].path := 2;              RuleDescr [219].op[2].calc := FALSE;

           RuleDescr [219].op[2].regs[0] := {};
     RuleDescr [219].target   := 0;
     RuleDescr [219].closuretarget := FALSE;
     RuleDescr [219].result   := 0;
     RuleDescr [219].unique := FALSE;
     RuleDescr [219].commutative := FALSE;
     RuleDescr [219].srcline := 2708;
     RuleDescr [219].scrnum := 1;
     RuleDescr [219].scrrs [1] [0]  := { (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
 (*   RULE 220/2726  *)
           RuleDescr [220].register := RKRegister;
     RuleDescr [220].pscarity := 2;
     RuleDescr [220].resregs   [0]  := { (Regdx)-0};
     RuleDescr [220].changeregs[0]  := {};
           RuleDescr [220].op[1].nt   := ntWReg;
           RuleDescr [220].op[1].path := 1;              RuleDescr [220].op[1].calc := FALSE;

           RuleDescr [220].op[1].regs[0] := { (Regax)-0};
           RuleDescr [220].op[2].nt   := ntConstant;
           RuleDescr [220].op[2].path := 2;              RuleDescr [220].op[2].calc := FALSE;

           RuleDescr [220].op[2].regs[0] := {};
     RuleDescr [220].target   := 0;
     RuleDescr [220].closuretarget := FALSE;
     RuleDescr [220].result   := 0;
     RuleDescr [220].unique := FALSE;
     RuleDescr [220].commutative := FALSE;
     RuleDescr [220].srcline := 2726;
     RuleDescr [220].scrnum := 1;
     RuleDescr [220].scrrs [1] [0]  := { (Regbx)-0,  (Regcx)-0,  (Regsi)-0,  (Regdi)-0};
 (*   RULE 221/2744  *)
           RuleDescr [221].register := RKRegister;
     RuleDescr [221].pscarity := 2;
     RuleDescr [221].resregs   [0]  := { (Regedx)-0};
     RuleDescr [221].changeregs[0]  := {};
           RuleDescr [221].op[1].nt   := ntLReg;
           RuleDescr [221].op[1].path := 1;              RuleDescr [221].op[1].calc := FALSE;

           RuleDescr [221].op[1].regs[0] := { (Regeax)-0};
           RuleDescr [221].op[2].nt   := ntConstant;
           RuleDescr [221].op[2].path := 2;              RuleDescr [221].op[2].calc := FALSE;

           RuleDescr [221].op[2].regs[0] := {};
     RuleDescr [221].target   := 0;
     RuleDescr [221].closuretarget := FALSE;
     RuleDescr [221].result   := 0;
     RuleDescr [221].unique := FALSE;
     RuleDescr [221].commutative := FALSE;
     RuleDescr [221].srcline := 2744;
     RuleDescr [221].scrnum := 1;
     RuleDescr [221].scrrs [1] [0]  := { (Regebx)-0,  (Regecx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 222/2763  *)
           RuleDescr [222].register := RKRegister;
     RuleDescr [222].pscarity := 2;
     RuleDescr [222].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [222].changeregs[0]  := {};
           RuleDescr [222].op[1].nt   := ntLReg;
           RuleDescr [222].op[1].path := 1;              RuleDescr [222].op[1].calc := FALSE;

           RuleDescr [222].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [222].op[2].nt   := ntConstant;
           RuleDescr [222].op[2].path := 2;              RuleDescr [222].op[2].calc := FALSE;

           RuleDescr [222].op[2].regs[0] := {};
     RuleDescr [222].target   := 1;
     RuleDescr [222].closuretarget := FALSE;
     RuleDescr [222].result   := 0;
     RuleDescr [222].unique := FALSE;
     RuleDescr [222].commutative := FALSE;
     RuleDescr [222].srcline := 2763;
     RuleDescr [222].scrnum := 0;
 (*   RULE 223/2769  *)
           RuleDescr [223].register := RKRegister;
     RuleDescr [223].pscarity := 3;
     RuleDescr [223].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [223].changeregs[0]  := {};
           RuleDescr [223].op[1].nt   := ntLReg;
           RuleDescr [223].op[1].path := 1;              RuleDescr [223].op[1].calc := FALSE;

           RuleDescr [223].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [223].op[2].nt   := ntConstant;
           RuleDescr [223].op[2].path := 2;              RuleDescr [223].op[2].calc := FALSE;

           RuleDescr [223].op[2].regs[0] := {};
           RuleDescr [223].op[3].nt   := ntLReg;
           RuleDescr [223].op[3].path := 3;              RuleDescr [223].op[3].calc := FALSE;

           RuleDescr [223].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [223].target   := 1;
     RuleDescr [223].closuretarget := FALSE;
     RuleDescr [223].result   := 0;
     RuleDescr [223].unique := FALSE;
     RuleDescr [223].commutative := FALSE;
     RuleDescr [223].srcline := 2769;
     RuleDescr [223].scrnum := 0;
 (*   RULE 224/2795  *)
           RuleDescr [224].register := RKRegister;
     RuleDescr [224].pscarity := 3;
     RuleDescr [224].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [224].changeregs[0]  := {};
           RuleDescr [224].op[1].nt   := ntLReg;
           RuleDescr [224].op[1].path := 1;              RuleDescr [224].op[1].calc := FALSE;

           RuleDescr [224].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [224].op[2].nt   := ntLReg;
           RuleDescr [224].op[2].path := 2;              RuleDescr [224].op[2].calc := FALSE;

           RuleDescr [224].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [224].op[3].nt   := ntConstant;
           RuleDescr [224].op[3].path := 3;              RuleDescr [224].op[3].calc := FALSE;

           RuleDescr [224].op[3].regs[0] := {};
     RuleDescr [224].target   := 1;
     RuleDescr [224].closuretarget := FALSE;
     RuleDescr [224].result   := 0;
     RuleDescr [224].unique := FALSE;
     RuleDescr [224].commutative := FALSE;
     RuleDescr [224].srcline := 2795;
     RuleDescr [224].scrnum := 0;
 (*   RULE 225/2822  *)
           RuleDescr [225].register := RKRegister;
     RuleDescr [225].pscarity := 3;
     RuleDescr [225].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [225].changeregs[0]  := {};
           RuleDescr [225].op[1].nt   := ntConstant;
           RuleDescr [225].op[1].path := 1;              RuleDescr [225].op[1].calc := FALSE;

           RuleDescr [225].op[1].regs[0] := {};
           RuleDescr [225].op[2].nt   := ntLReg;
           RuleDescr [225].op[2].path := 2;              RuleDescr [225].op[2].calc := FALSE;

           RuleDescr [225].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [225].op[3].nt   := ntLReg;
           RuleDescr [225].op[3].path := 3;              RuleDescr [225].op[3].calc := FALSE;

           RuleDescr [225].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [225].target   := 2;
     RuleDescr [225].closuretarget := FALSE;
     RuleDescr [225].result   := 0;
     RuleDescr [225].unique := FALSE;
     RuleDescr [225].commutative := FALSE;
     RuleDescr [225].srcline := 2822;
     RuleDescr [225].scrnum := 0;
 (*   RULE 226/2842  *)
           RuleDescr [226].register := RKRegister;
     RuleDescr [226].pscarity := 3;
     RuleDescr [226].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [226].changeregs[0]  := {};
           RuleDescr [226].op[1].nt   := ntConstant;
           RuleDescr [226].op[1].path := 1;              RuleDescr [226].op[1].calc := FALSE;

           RuleDescr [226].op[1].regs[0] := {};
           RuleDescr [226].op[2].nt   := ntConstant;
           RuleDescr [226].op[2].path := 2;              RuleDescr [226].op[2].calc := FALSE;

           RuleDescr [226].op[2].regs[0] := {};
           RuleDescr [226].op[3].nt   := ntLReg;
           RuleDescr [226].op[3].path := 3;              RuleDescr [226].op[3].calc := FALSE;

           RuleDescr [226].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [226].target   := 3;
     RuleDescr [226].closuretarget := FALSE;
     RuleDescr [226].result   := 0;
     RuleDescr [226].unique := FALSE;
     RuleDescr [226].commutative := FALSE;
     RuleDescr [226].srcline := 2842;
     RuleDescr [226].scrnum := 0;
 (*   RULE 227/2869  *)
           RuleDescr [227].register := RKRegister;
     RuleDescr [227].pscarity := 3;
     RuleDescr [227].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [227].changeregs[0]  := {};
           RuleDescr [227].op[1].nt   := ntConstant;
           RuleDescr [227].op[1].path := 1;              RuleDescr [227].op[1].calc := FALSE;

           RuleDescr [227].op[1].regs[0] := {};
           RuleDescr [227].op[2].nt   := ntLReg;
           RuleDescr [227].op[2].path := 2;              RuleDescr [227].op[2].calc := FALSE;

           RuleDescr [227].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [227].op[3].nt   := ntConstant;
           RuleDescr [227].op[3].path := 3;              RuleDescr [227].op[3].calc := FALSE;

           RuleDescr [227].op[3].regs[0] := {};
     RuleDescr [227].target   := 2;
     RuleDescr [227].closuretarget := FALSE;
     RuleDescr [227].result   := 0;
     RuleDescr [227].unique := FALSE;
     RuleDescr [227].commutative := FALSE;
     RuleDescr [227].srcline := 2869;
     RuleDescr [227].scrnum := 0;
 (*   RULE 228/2897  *)
           RuleDescr [228].register := RKRegister;
     RuleDescr [228].pscarity := 1;
     RuleDescr [228].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [228].changeregs[0]  := {};
           RuleDescr [228].op[1].nt   := ntCond;
           RuleDescr [228].op[1].path := 17;              RuleDescr [228].op[1].calc := FALSE;

           RuleDescr [228].op[1].regs[0] := {};
     RuleDescr [228].target   := 0;
     RuleDescr [228].closuretarget := FALSE;
     RuleDescr [228].result   := 0;
     RuleDescr [228].unique := FALSE;
     RuleDescr [228].commutative := FALSE;
     RuleDescr [228].srcline := 2897;
     RuleDescr [228].scrnum := 0;
 (*   RULE 229/2904  *)
           RuleDescr [229].register := RKRegister;
     RuleDescr [229].pscarity := 2;
     RuleDescr [229].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [229].changeregs[0]  := {};
           RuleDescr [229].op[1].nt   := ntLab;
           RuleDescr [229].op[1].path := 273;              RuleDescr [229].op[1].calc := FALSE;

           RuleDescr [229].op[1].regs[0] := {};
           RuleDescr [229].op[2].nt   := ntBReg;
           RuleDescr [229].op[2].path := 529;              RuleDescr [229].op[2].calc := FALSE;

           RuleDescr [229].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [229].target   := 2;
     RuleDescr [229].closuretarget := FALSE;
     RuleDescr [229].result   := 0;
     RuleDescr [229].unique := FALSE;
     RuleDescr [229].commutative := FALSE;
     RuleDescr [229].srcline := 2904;
     RuleDescr [229].scrnum := 0;
 (*   RULE 230/2912  *)
           RuleDescr [230].register := RKRegister;
     RuleDescr [230].pscarity := 3;
     RuleDescr [230].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [230].changeregs[0]  := {};
           RuleDescr [230].op[1].nt   := ntLab;
           RuleDescr [230].op[1].path := 17;              RuleDescr [230].op[1].calc := FALSE;

           RuleDescr [230].op[1].regs[0] := {};
           RuleDescr [230].op[2].nt   := ntLReg;
           RuleDescr [230].op[2].path := 33;              RuleDescr [230].op[2].calc := FALSE;

           RuleDescr [230].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [230].op[3].nt   := ntAMemAReg;
           RuleDescr [230].op[3].path := 49;              RuleDescr [230].op[3].calc := FALSE;

           RuleDescr [230].op[3].regs[0] := {};
     RuleDescr [230].target   := 0;
     RuleDescr [230].closuretarget := FALSE;
     RuleDescr [230].result   := 0;
     RuleDescr [230].unique := FALSE;
     RuleDescr [230].commutative := FALSE;
     RuleDescr [230].srcline := 2912;
     RuleDescr [230].scrnum := 0;
 (*   RULE 231/2922  *)
           RuleDescr [231].register := RKRegister;
     RuleDescr [231].pscarity := 3;
     RuleDescr [231].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [231].changeregs[0]  := {};
           RuleDescr [231].op[1].nt   := ntLab;
           RuleDescr [231].op[1].path := 17;              RuleDescr [231].op[1].calc := FALSE;

           RuleDescr [231].op[1].regs[0] := {};
           RuleDescr [231].op[2].nt   := ntConstant;
           RuleDescr [231].op[2].path := 33;              RuleDescr [231].op[2].calc := FALSE;

           RuleDescr [231].op[2].regs[0] := {};
           RuleDescr [231].op[3].nt   := ntAMemAReg;
           RuleDescr [231].op[3].path := 49;              RuleDescr [231].op[3].calc := FALSE;

           RuleDescr [231].op[3].regs[0] := {};
     RuleDescr [231].target   := 0;
     RuleDescr [231].closuretarget := FALSE;
     RuleDescr [231].result   := 0;
     RuleDescr [231].unique := FALSE;
     RuleDescr [231].commutative := FALSE;
     RuleDescr [231].srcline := 2922;
     RuleDescr [231].scrnum := 0;
 (*   RULE 232/2930  *)
           RuleDescr [232].register := RKRegister;
     RuleDescr [232].pscarity := 2;
     RuleDescr [232].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [232].changeregs[0]  := {};
           RuleDescr [232].op[1].nt   := ntLab;
           RuleDescr [232].op[1].path := 17;              RuleDescr [232].op[1].calc := FALSE;

           RuleDescr [232].op[1].regs[0] := {};
           RuleDescr [232].op[2].nt   := ntLReg;
           RuleDescr [232].op[2].path := 33;              RuleDescr [232].op[2].calc := FALSE;

           RuleDescr [232].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [232].target   := 0;
     RuleDescr [232].closuretarget := FALSE;
     RuleDescr [232].result   := 0;
     RuleDescr [232].unique := FALSE;
     RuleDescr [232].commutative := FALSE;
     RuleDescr [232].srcline := 2930;
     RuleDescr [232].scrnum := 0;
 (*   RULE 233/2938  *)
           RuleDescr [233].register := RKRegister;
     RuleDescr [233].pscarity := 2;
     RuleDescr [233].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [233].changeregs[0]  := {};
           RuleDescr [233].op[1].nt   := ntLab;
           RuleDescr [233].op[1].path := 17;              RuleDescr [233].op[1].calc := FALSE;

           RuleDescr [233].op[1].regs[0] := {};
           RuleDescr [233].op[2].nt   := ntReg;
           RuleDescr [233].op[2].path := 33;              RuleDescr [233].op[2].calc := FALSE;

           RuleDescr [233].op[2].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [233].target   := 0;
     RuleDescr [233].closuretarget := FALSE;
     RuleDescr [233].result   := 0;
     RuleDescr [233].unique := FALSE;
     RuleDescr [233].commutative := FALSE;
     RuleDescr [233].srcline := 2938;
     RuleDescr [233].scrnum := 0;
 (*   RULE 234/2949  *)
           RuleDescr [234].register := RKRegister;
     RuleDescr [234].pscarity := 2;
     RuleDescr [234].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [234].changeregs[0]  := {};
           RuleDescr [234].op[1].nt   := ntLab;
           RuleDescr [234].op[1].path := 17;              RuleDescr [234].op[1].calc := FALSE;

           RuleDescr [234].op[1].regs[0] := {};
           RuleDescr [234].op[2].nt   := ntAMem;
           RuleDescr [234].op[2].path := 33;              RuleDescr [234].op[2].calc := FALSE;

           RuleDescr [234].op[2].regs[0] := {};
     RuleDescr [234].target   := 0;
     RuleDescr [234].closuretarget := FALSE;
     RuleDescr [234].result   := 0;
     RuleDescr [234].unique := FALSE;
     RuleDescr [234].commutative := FALSE;
     RuleDescr [234].srcline := 2949;
     RuleDescr [234].scrnum := 0;
 (*   RULE 235/2956  *)
           RuleDescr [235].register := RKRegister;
     RuleDescr [235].pscarity := 3;
     RuleDescr [235].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [235].changeregs[0]  := {};
           RuleDescr [235].op[1].nt   := ntLab;
           RuleDescr [235].op[1].path := 17;              RuleDescr [235].op[1].calc := FALSE;

           RuleDescr [235].op[1].regs[0] := {};
           RuleDescr [235].op[2].nt   := ntMemory;
           RuleDescr [235].op[2].path := 33;              RuleDescr [235].op[2].calc := FALSE;

           RuleDescr [235].op[2].regs[0] := {};
           RuleDescr [235].op[3].nt   := ntLReg;
           RuleDescr [235].op[3].path := 49;              RuleDescr [235].op[3].calc := FALSE;

           RuleDescr [235].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [235].target   := 0;
     RuleDescr [235].closuretarget := FALSE;
     RuleDescr [235].result   := 0;
     RuleDescr [235].unique := FALSE;
     RuleDescr [235].commutative := FALSE;
     RuleDescr [235].srcline := 2956;
     RuleDescr [235].scrnum := 0;
 (*   RULE 236/2963  *)
           RuleDescr [236].register := RKRegister;
     RuleDescr [236].pscarity := 1;
     RuleDescr [236].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [236].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [236].op[1].nt   := ntLab;
           RuleDescr [236].op[1].path := 17;              RuleDescr [236].op[1].calc := FALSE;

           RuleDescr [236].op[1].regs[0] := {};
     RuleDescr [236].target   := 0;
     RuleDescr [236].closuretarget := FALSE;
     RuleDescr [236].result   := 0;
     RuleDescr [236].unique := FALSE;
     RuleDescr [236].commutative := FALSE;
     RuleDescr [236].srcline := 2963;
     RuleDescr [236].scrnum := 0;
 (*   RULE 237/2980  *)
           RuleDescr [237].register := RKMemory;
     RuleDescr [237].pscarity := 3;
     RuleDescr [237].resregs   [0]  := {};
     RuleDescr [237].changeregs[0]  := {};
           RuleDescr [237].op[1].nt   := ntLab;
           RuleDescr [237].op[1].path := 1;              RuleDescr [237].op[1].calc := FALSE;

           RuleDescr [237].op[1].regs[0] := {};
           RuleDescr [237].op[2].nt   := ntLReg;
           RuleDescr [237].op[2].path := 2;              RuleDescr [237].op[2].calc := FALSE;

           RuleDescr [237].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [237].op[3].nt   := ntConstant;
           RuleDescr [237].op[3].path := 3;              RuleDescr [237].op[3].calc := FALSE;

           RuleDescr [237].op[3].regs[0] := {};
     RuleDescr [237].target   := 0;
     RuleDescr [237].closuretarget := FALSE;
     RuleDescr [237].result   := 0;
     RuleDescr [237].unique := FALSE;
     RuleDescr [237].commutative := FALSE;
     RuleDescr [237].srcline := 2980;
     RuleDescr [237].scrnum := 0;
 (*   RULE 238/2988  *)
           RuleDescr [238].register := RKMemory;
     RuleDescr [238].pscarity := 3;
     RuleDescr [238].resregs   [0]  := {};
     RuleDescr [238].changeregs[0]  := {};
           RuleDescr [238].op[1].nt   := ntLab;
           RuleDescr [238].op[1].path := 1;              RuleDescr [238].op[1].calc := FALSE;

           RuleDescr [238].op[1].regs[0] := {};
           RuleDescr [238].op[2].nt   := ntConstant;
           RuleDescr [238].op[2].path := 2;              RuleDescr [238].op[2].calc := FALSE;

           RuleDescr [238].op[2].regs[0] := {};
           RuleDescr [238].op[3].nt   := ntAMemAReg;
           RuleDescr [238].op[3].path := 3;              RuleDescr [238].op[3].calc := FALSE;

           RuleDescr [238].op[3].regs[0] := {};
     RuleDescr [238].target   := 0;
     RuleDescr [238].closuretarget := FALSE;
     RuleDescr [238].result   := 0;
     RuleDescr [238].unique := FALSE;
     RuleDescr [238].commutative := FALSE;
     RuleDescr [238].srcline := 2988;
     RuleDescr [238].scrnum := 0;
 (*   RULE 239/2996  *)
           RuleDescr [239].register := RKMemory;
     RuleDescr [239].pscarity := 2;
     RuleDescr [239].resregs   [0]  := {};
     RuleDescr [239].changeregs[0]  := {};
           RuleDescr [239].op[1].nt   := ntLab;
           RuleDescr [239].op[1].path := 1;              RuleDescr [239].op[1].calc := FALSE;

           RuleDescr [239].op[1].regs[0] := {};
           RuleDescr [239].op[2].nt   := ntAMem;
           RuleDescr [239].op[2].path := 2;              RuleDescr [239].op[2].calc := FALSE;

           RuleDescr [239].op[2].regs[0] := {};
     RuleDescr [239].target   := 0;
     RuleDescr [239].closuretarget := FALSE;
     RuleDescr [239].result   := 0;
     RuleDescr [239].unique := FALSE;
     RuleDescr [239].commutative := FALSE;
     RuleDescr [239].srcline := 2996;
     RuleDescr [239].scrnum := 0;
 (*   RULE 240/3003  *)
           RuleDescr [240].register := RKRegister;
     RuleDescr [240].pscarity := 1;
     RuleDescr [240].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [240].changeregs[0]  := {};
           RuleDescr [240].op[1].nt   := ntLReg;
           RuleDescr [240].op[1].path := 1;              RuleDescr [240].op[1].calc := FALSE;

           RuleDescr [240].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [240].target   := 1;
     RuleDescr [240].closuretarget := FALSE;
     RuleDescr [240].result   := 0;
     RuleDescr [240].unique := FALSE;
     RuleDescr [240].commutative := FALSE;
     RuleDescr [240].srcline := 3003;
     RuleDescr [240].scrnum := 0;
 (*   RULE 241/3021  *)
           RuleDescr [241].register := RKMemory;
     RuleDescr [241].pscarity := 1;
     RuleDescr [241].resregs   [0]  := {};
     RuleDescr [241].changeregs[0]  := {};
           RuleDescr [241].op[1].nt   := ntMemory;
           RuleDescr [241].op[1].path := 1;              RuleDescr [241].op[1].calc := FALSE;

           RuleDescr [241].op[1].regs[0] := {};
     RuleDescr [241].target   := 0;
     RuleDescr [241].closuretarget := FALSE;
     RuleDescr [241].result   := 0;
     RuleDescr [241].unique := FALSE;
     RuleDescr [241].commutative := FALSE;
     RuleDescr [241].srcline := 3021;
     RuleDescr [241].scrnum := 0;
 (*   RULE 242/3026  *)
           RuleDescr [242].register := RKMemory;
     RuleDescr [242].pscarity := 1;
     RuleDescr [242].resregs   [0]  := {};
     RuleDescr [242].changeregs[0]  := {};
           RuleDescr [242].op[1].nt   := ntMemory;
           RuleDescr [242].op[1].path := 1;              RuleDescr [242].op[1].calc := FALSE;

           RuleDescr [242].op[1].regs[0] := {};
     RuleDescr [242].target   := 0;
     RuleDescr [242].closuretarget := FALSE;
     RuleDescr [242].result   := 0;
     RuleDescr [242].unique := FALSE;
     RuleDescr [242].commutative := FALSE;
     RuleDescr [242].srcline := 3026;
     RuleDescr [242].scrnum := 0;
 (*   RULE 243/3032  *)
           RuleDescr [243].register := RKRegister;
     RuleDescr [243].pscarity := 1;
     RuleDescr [243].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [243].changeregs[0]  := {};
           RuleDescr [243].op[1].nt   := ntReg;
           RuleDescr [243].op[1].path := 1;              RuleDescr [243].op[1].calc := FALSE;

           RuleDescr [243].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [243].target   := 1;
     RuleDescr [243].closuretarget := FALSE;
     RuleDescr [243].result   := 0;
     RuleDescr [243].unique := FALSE;
     RuleDescr [243].commutative := FALSE;
     RuleDescr [243].srcline := 3032;
     RuleDescr [243].scrnum := 0;
 (*   RULE 244/3048  *)
           RuleDescr [244].register := RKRegister;
     RuleDescr [244].pscarity := 1;
     RuleDescr [244].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [244].changeregs[0]  := {};
           RuleDescr [244].op[1].nt   := ntReg;
           RuleDescr [244].op[1].path := 17;              RuleDescr [244].op[1].calc := FALSE;

           RuleDescr [244].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [244].target   := 0;
     RuleDescr [244].closuretarget := FALSE;
     RuleDescr [244].result   := 0;
     RuleDescr [244].unique := FALSE;
     RuleDescr [244].commutative := FALSE;
     RuleDescr [244].srcline := 3048;
     RuleDescr [244].scrnum := 0;
 (*   RULE 245/3049  *)
           RuleDescr [245].register := RKRegister;
     RuleDescr [245].pscarity := 1;
     RuleDescr [245].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [245].changeregs[0]  := {};
           RuleDescr [245].op[1].nt   := ntReg;
           RuleDescr [245].op[1].path := 17;              RuleDescr [245].op[1].calc := FALSE;

           RuleDescr [245].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [245].target   := 0;
     RuleDescr [245].closuretarget := FALSE;
     RuleDescr [245].result   := 0;
     RuleDescr [245].unique := FALSE;
     RuleDescr [245].commutative := FALSE;
     RuleDescr [245].srcline := 3049;
     RuleDescr [245].scrnum := 0;
 (*   RULE 246/3050  *)
           RuleDescr [246].register := RKRegister;
     RuleDescr [246].pscarity := 1;
     RuleDescr [246].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [246].changeregs[0]  := {};
           RuleDescr [246].op[1].nt   := ntReg;
           RuleDescr [246].op[1].path := 17;              RuleDescr [246].op[1].calc := FALSE;

           RuleDescr [246].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [246].target   := 0;
     RuleDescr [246].closuretarget := FALSE;
     RuleDescr [246].result   := 0;
     RuleDescr [246].unique := FALSE;
     RuleDescr [246].commutative := FALSE;
     RuleDescr [246].srcline := 3050;
     RuleDescr [246].scrnum := 0;
 (*   RULE 247/3053  *)
           RuleDescr [247].register := RKRegister;
     RuleDescr [247].pscarity := 1;
     RuleDescr [247].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [247].changeregs[0]  := {};
           RuleDescr [247].op[1].nt   := ntMemory;
           RuleDescr [247].op[1].path := 17;              RuleDescr [247].op[1].calc := FALSE;

           RuleDescr [247].op[1].regs[0] := {};
     RuleDescr [247].target   := 0;
     RuleDescr [247].closuretarget := FALSE;
     RuleDescr [247].result   := 0;
     RuleDescr [247].unique := FALSE;
     RuleDescr [247].commutative := FALSE;
     RuleDescr [247].srcline := 3053;
     RuleDescr [247].scrnum := 0;
 (*   RULE 248/3057  *)
           RuleDescr [248].register := RKRegister;
     RuleDescr [248].pscarity := 1;
     RuleDescr [248].resregs   [0]  := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [248].changeregs[0]  := {};
           RuleDescr [248].op[1].nt   := ntMemory;
           RuleDescr [248].op[1].path := 17;              RuleDescr [248].op[1].calc := FALSE;

           RuleDescr [248].op[1].regs[0] := {};
     RuleDescr [248].target   := 0;
     RuleDescr [248].closuretarget := FALSE;
     RuleDescr [248].result   := 0;
     RuleDescr [248].unique := FALSE;
     RuleDescr [248].commutative := FALSE;
     RuleDescr [248].srcline := 3057;
     RuleDescr [248].scrnum := 0;
 (*   RULE 249/3065  *)
           RuleDescr [249].register := RKRegister;
     RuleDescr [249].pscarity := 1;
     RuleDescr [249].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [249].changeregs[0]  := {};
           RuleDescr [249].op[1].nt   := ntMemory;
           RuleDescr [249].op[1].path := 17;              RuleDescr [249].op[1].calc := FALSE;

           RuleDescr [249].op[1].regs[0] := {};
     RuleDescr [249].target   := 0;
     RuleDescr [249].closuretarget := FALSE;
     RuleDescr [249].result   := 0;
     RuleDescr [249].unique := FALSE;
     RuleDescr [249].commutative := FALSE;
     RuleDescr [249].srcline := 3065;
     RuleDescr [249].scrnum := 0;
 (*   RULE 250/3079  *)
           RuleDescr [250].register := RKRegister;
     RuleDescr [250].pscarity := 1;
     RuleDescr [250].resregs   [0]  := { (Regst)-0};
     RuleDescr [250].changeregs[0]  := {};
           RuleDescr [250].op[1].nt   := ntMemory;
           RuleDescr [250].op[1].path := 17;              RuleDescr [250].op[1].calc := FALSE;

           RuleDescr [250].op[1].regs[0] := {};
     RuleDescr [250].target   := 0;
     RuleDescr [250].closuretarget := FALSE;
     RuleDescr [250].result   := 0;
     RuleDescr [250].unique := FALSE;
     RuleDescr [250].commutative := FALSE;
     RuleDescr [250].srcline := 3079;
     RuleDescr [250].scrnum := 0;
 (*   RULE 251/3084  *)
           RuleDescr [251].register := RKAdrmode;
     RuleDescr [251].pscarity := 1;
     RuleDescr [251].resregs   [0]  := {};
     RuleDescr [251].changeregs[0]  := {};
           RuleDescr [251].op[1].nt   := ntMemory;
           RuleDescr [251].op[1].path := 17;              RuleDescr [251].op[1].calc := FALSE;

           RuleDescr [251].op[1].regs[0] := {};
     RuleDescr [251].target   := 0;
     RuleDescr [251].closuretarget := FALSE;
     RuleDescr [251].result   := 0;
     RuleDescr [251].unique := FALSE;
     RuleDescr [251].commutative := FALSE;
     RuleDescr [251].srcline := 3084;
     RuleDescr [251].scrnum := 0;
 (*   RULE 252/3089  *)
           RuleDescr [252].register := RKRegister;
     RuleDescr [252].pscarity := 1;
     RuleDescr [252].resregs   [0]  := { (Regax)-0};
     RuleDescr [252].changeregs[0]  := {};
           RuleDescr [252].op[1].nt   := ntBReg;
           RuleDescr [252].op[1].path := 1;              RuleDescr [252].op[1].calc := FALSE;

           RuleDescr [252].op[1].regs[0] := { (Regal)-0};
     RuleDescr [252].target   := 0;
     RuleDescr [252].closuretarget := FALSE;
     RuleDescr [252].result   := 0;
     RuleDescr [252].unique := FALSE;
     RuleDescr [252].commutative := FALSE;
     RuleDescr [252].srcline := 3089;
     RuleDescr [252].scrnum := 0;
 (*   RULE 253/3093  *)
           RuleDescr [253].register := RKRegister;
     RuleDescr [253].pscarity := 1;
     RuleDescr [253].resregs   [0]  := { (Regeax)-0};
     RuleDescr [253].changeregs[0]  := {};
           RuleDescr [253].op[1].nt   := ntWReg;
           RuleDescr [253].op[1].path := 1;              RuleDescr [253].op[1].calc := FALSE;

           RuleDescr [253].op[1].regs[0] := { (Regax)-0};
     RuleDescr [253].target   := 0;
     RuleDescr [253].closuretarget := FALSE;
     RuleDescr [253].result   := 0;
     RuleDescr [253].unique := FALSE;
     RuleDescr [253].commutative := FALSE;
     RuleDescr [253].srcline := 3093;
     RuleDescr [253].scrnum := 0;
 (*   RULE 254/3097  *)
           RuleDescr [254].register := RKRegister;
     RuleDescr [254].pscarity := 1;
     RuleDescr [254].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [254].changeregs[0]  := {};
           RuleDescr [254].op[1].nt   := ntBReg;
           RuleDescr [254].op[1].path := 17;              RuleDescr [254].op[1].calc := FALSE;

           RuleDescr [254].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [254].target   := 0;
     RuleDescr [254].closuretarget := FALSE;
     RuleDescr [254].result   := 0;
     RuleDescr [254].unique := FALSE;
     RuleDescr [254].commutative := FALSE;
     RuleDescr [254].srcline := 3097;
     RuleDescr [254].scrnum := 0;
 (*   RULE 255/3101  *)
           RuleDescr [255].register := RKRegister;
     RuleDescr [255].pscarity := 1;
     RuleDescr [255].resregs   [0]  := { (Regeax)-0};
     RuleDescr [255].changeregs[0]  := {};
           RuleDescr [255].op[1].nt   := ntBReg;
           RuleDescr [255].op[1].path := 17;              RuleDescr [255].op[1].calc := FALSE;

           RuleDescr [255].op[1].regs[0] := { (Regal)-0};
     RuleDescr [255].target   := 0;
     RuleDescr [255].closuretarget := FALSE;
     RuleDescr [255].result   := 0;
     RuleDescr [255].unique := FALSE;
     RuleDescr [255].commutative := FALSE;
     RuleDescr [255].srcline := 3101;
     RuleDescr [255].scrnum := 0;
 (*   RULE 256/3102  *)
           RuleDescr [256].register := RKRegister;
     RuleDescr [256].pscarity := 1;
     RuleDescr [256].resregs   [0]  := { (Regebx)-0};
     RuleDescr [256].changeregs[0]  := {};
           RuleDescr [256].op[1].nt   := ntBReg;
           RuleDescr [256].op[1].path := 17;              RuleDescr [256].op[1].calc := FALSE;

           RuleDescr [256].op[1].regs[0] := { (Regbl)-0};
     RuleDescr [256].target   := 0;
     RuleDescr [256].closuretarget := FALSE;
     RuleDescr [256].result   := 0;
     RuleDescr [256].unique := FALSE;
     RuleDescr [256].commutative := FALSE;
     RuleDescr [256].srcline := 3102;
     RuleDescr [256].scrnum := 0;
 (*   RULE 257/3103  *)
           RuleDescr [257].register := RKRegister;
     RuleDescr [257].pscarity := 1;
     RuleDescr [257].resregs   [0]  := { (Regecx)-0};
     RuleDescr [257].changeregs[0]  := {};
           RuleDescr [257].op[1].nt   := ntBReg;
           RuleDescr [257].op[1].path := 17;              RuleDescr [257].op[1].calc := FALSE;

           RuleDescr [257].op[1].regs[0] := { (Regcl)-0};
     RuleDescr [257].target   := 0;
     RuleDescr [257].closuretarget := FALSE;
     RuleDescr [257].result   := 0;
     RuleDescr [257].unique := FALSE;
     RuleDescr [257].commutative := FALSE;
     RuleDescr [257].srcline := 3103;
     RuleDescr [257].scrnum := 0;
 (*   RULE 258/3104  *)
           RuleDescr [258].register := RKRegister;
     RuleDescr [258].pscarity := 1;
     RuleDescr [258].resregs   [0]  := { (Regedx)-0};
     RuleDescr [258].changeregs[0]  := {};
           RuleDescr [258].op[1].nt   := ntBReg;
           RuleDescr [258].op[1].path := 17;              RuleDescr [258].op[1].calc := FALSE;

           RuleDescr [258].op[1].regs[0] := { (Regdl)-0};
     RuleDescr [258].target   := 0;
     RuleDescr [258].closuretarget := FALSE;
     RuleDescr [258].result   := 0;
     RuleDescr [258].unique := FALSE;
     RuleDescr [258].commutative := FALSE;
     RuleDescr [258].srcline := 3104;
     RuleDescr [258].scrnum := 0;
 (*   RULE 259/3106  *)
           RuleDescr [259].register := RKMemory;
     RuleDescr [259].pscarity := 1;
     RuleDescr [259].resregs   [0]  := {};
     RuleDescr [259].changeregs[0]  := {};
           RuleDescr [259].op[1].nt   := ntConstant;
           RuleDescr [259].op[1].path := 1;              RuleDescr [259].op[1].calc := FALSE;

           RuleDescr [259].op[1].regs[0] := {};
     RuleDescr [259].target   := 0;
     RuleDescr [259].closuretarget := FALSE;
     RuleDescr [259].result   := 0;
     RuleDescr [259].unique := FALSE;
     RuleDescr [259].commutative := FALSE;
     RuleDescr [259].srcline := 3106;
     RuleDescr [259].scrnum := 0;
 (*   RULE 260/3110  *)
           RuleDescr [260].register := RKRegister;
     RuleDescr [260].pscarity := 1;
     RuleDescr [260].resregs   [0]  := { (Regal)-0};
     RuleDescr [260].changeregs[0]  := {};
           RuleDescr [260].op[1].nt   := ntWReg;
           RuleDescr [260].op[1].path := 1;              RuleDescr [260].op[1].calc := FALSE;

           RuleDescr [260].op[1].regs[0] := { (Regax)-0};
     RuleDescr [260].target   := 0;
     RuleDescr [260].closuretarget := FALSE;
     RuleDescr [260].result   := 0;
     RuleDescr [260].unique := FALSE;
     RuleDescr [260].commutative := FALSE;
     RuleDescr [260].srcline := 3110;
     RuleDescr [260].scrnum := 0;
 (*   RULE 261/3111  *)
           RuleDescr [261].register := RKRegister;
     RuleDescr [261].pscarity := 1;
     RuleDescr [261].resregs   [0]  := { (Regbl)-0};
     RuleDescr [261].changeregs[0]  := {};
           RuleDescr [261].op[1].nt   := ntWReg;
           RuleDescr [261].op[1].path := 1;              RuleDescr [261].op[1].calc := FALSE;

           RuleDescr [261].op[1].regs[0] := { (Regbx)-0};
     RuleDescr [261].target   := 0;
     RuleDescr [261].closuretarget := FALSE;
     RuleDescr [261].result   := 0;
     RuleDescr [261].unique := FALSE;
     RuleDescr [261].commutative := FALSE;
     RuleDescr [261].srcline := 3111;
     RuleDescr [261].scrnum := 0;
 (*   RULE 262/3112  *)
           RuleDescr [262].register := RKRegister;
     RuleDescr [262].pscarity := 1;
     RuleDescr [262].resregs   [0]  := { (Regcl)-0};
     RuleDescr [262].changeregs[0]  := {};
           RuleDescr [262].op[1].nt   := ntWReg;
           RuleDescr [262].op[1].path := 1;              RuleDescr [262].op[1].calc := FALSE;

           RuleDescr [262].op[1].regs[0] := { (Regcx)-0};
     RuleDescr [262].target   := 0;
     RuleDescr [262].closuretarget := FALSE;
     RuleDescr [262].result   := 0;
     RuleDescr [262].unique := FALSE;
     RuleDescr [262].commutative := FALSE;
     RuleDescr [262].srcline := 3112;
     RuleDescr [262].scrnum := 0;
 (*   RULE 263/3113  *)
           RuleDescr [263].register := RKRegister;
     RuleDescr [263].pscarity := 1;
     RuleDescr [263].resregs   [0]  := { (Regdl)-0};
     RuleDescr [263].changeregs[0]  := {};
           RuleDescr [263].op[1].nt   := ntWReg;
           RuleDescr [263].op[1].path := 1;              RuleDescr [263].op[1].calc := FALSE;

           RuleDescr [263].op[1].regs[0] := { (Regdx)-0};
     RuleDescr [263].target   := 0;
     RuleDescr [263].closuretarget := FALSE;
     RuleDescr [263].result   := 0;
     RuleDescr [263].unique := FALSE;
     RuleDescr [263].commutative := FALSE;
     RuleDescr [263].srcline := 3113;
     RuleDescr [263].scrnum := 0;
 (*   RULE 264/3115  *)
           RuleDescr [264].register := RKRegister;
     RuleDescr [264].pscarity := 1;
     RuleDescr [264].resregs   [0]  := { (Regal)-0};
     RuleDescr [264].changeregs[0]  := {};
           RuleDescr [264].op[1].nt   := ntLReg;
           RuleDescr [264].op[1].path := 1;              RuleDescr [264].op[1].calc := FALSE;

           RuleDescr [264].op[1].regs[0] := { (Regeax)-0};
     RuleDescr [264].target   := 0;
     RuleDescr [264].closuretarget := FALSE;
     RuleDescr [264].result   := 0;
     RuleDescr [264].unique := FALSE;
     RuleDescr [264].commutative := FALSE;
     RuleDescr [264].srcline := 3115;
     RuleDescr [264].scrnum := 0;
 (*   RULE 265/3116  *)
           RuleDescr [265].register := RKRegister;
     RuleDescr [265].pscarity := 1;
     RuleDescr [265].resregs   [0]  := { (Regbl)-0};
     RuleDescr [265].changeregs[0]  := {};
           RuleDescr [265].op[1].nt   := ntLReg;
           RuleDescr [265].op[1].path := 1;              RuleDescr [265].op[1].calc := FALSE;

           RuleDescr [265].op[1].regs[0] := { (Regebx)-0};
     RuleDescr [265].target   := 0;
     RuleDescr [265].closuretarget := FALSE;
     RuleDescr [265].result   := 0;
     RuleDescr [265].unique := FALSE;
     RuleDescr [265].commutative := FALSE;
     RuleDescr [265].srcline := 3116;
     RuleDescr [265].scrnum := 0;
 (*   RULE 266/3117  *)
           RuleDescr [266].register := RKRegister;
     RuleDescr [266].pscarity := 1;
     RuleDescr [266].resregs   [0]  := { (Regcl)-0};
     RuleDescr [266].changeregs[0]  := {};
           RuleDescr [266].op[1].nt   := ntLReg;
           RuleDescr [266].op[1].path := 1;              RuleDescr [266].op[1].calc := FALSE;

           RuleDescr [266].op[1].regs[0] := { (Regecx)-0};
     RuleDescr [266].target   := 0;
     RuleDescr [266].closuretarget := FALSE;
     RuleDescr [266].result   := 0;
     RuleDescr [266].unique := FALSE;
     RuleDescr [266].commutative := FALSE;
     RuleDescr [266].srcline := 3117;
     RuleDescr [266].scrnum := 0;
 (*   RULE 267/3118  *)
           RuleDescr [267].register := RKRegister;
     RuleDescr [267].pscarity := 1;
     RuleDescr [267].resregs   [0]  := { (Regdl)-0};
     RuleDescr [267].changeregs[0]  := {};
           RuleDescr [267].op[1].nt   := ntLReg;
           RuleDescr [267].op[1].path := 1;              RuleDescr [267].op[1].calc := FALSE;

           RuleDescr [267].op[1].regs[0] := { (Regedx)-0};
     RuleDescr [267].target   := 0;
     RuleDescr [267].closuretarget := FALSE;
     RuleDescr [267].result   := 0;
     RuleDescr [267].unique := FALSE;
     RuleDescr [267].commutative := FALSE;
     RuleDescr [267].srcline := 3118;
     RuleDescr [267].scrnum := 0;
 (*   RULE 268/3120  *)
           RuleDescr [268].register := RKRegister;
     RuleDescr [268].pscarity := 1;
     RuleDescr [268].resregs   [0]  := { (Regax)-0};
     RuleDescr [268].changeregs[0]  := {};
           RuleDescr [268].op[1].nt   := ntBReg;
           RuleDescr [268].op[1].path := 1;              RuleDescr [268].op[1].calc := FALSE;

           RuleDescr [268].op[1].regs[0] := { (Regal)-0};
     RuleDescr [268].target   := 0;
     RuleDescr [268].closuretarget := FALSE;
     RuleDescr [268].result   := 0;
     RuleDescr [268].unique := FALSE;
     RuleDescr [268].commutative := FALSE;
     RuleDescr [268].srcline := 3120;
     RuleDescr [268].scrnum := 0;
 (*   RULE 269/3121  *)
           RuleDescr [269].register := RKRegister;
     RuleDescr [269].pscarity := 1;
     RuleDescr [269].resregs   [0]  := { (Regbx)-0};
     RuleDescr [269].changeregs[0]  := {};
           RuleDescr [269].op[1].nt   := ntBReg;
           RuleDescr [269].op[1].path := 1;              RuleDescr [269].op[1].calc := FALSE;

           RuleDescr [269].op[1].regs[0] := { (Regbl)-0};
     RuleDescr [269].target   := 0;
     RuleDescr [269].closuretarget := FALSE;
     RuleDescr [269].result   := 0;
     RuleDescr [269].unique := FALSE;
     RuleDescr [269].commutative := FALSE;
     RuleDescr [269].srcline := 3121;
     RuleDescr [269].scrnum := 0;
 (*   RULE 270/3122  *)
           RuleDescr [270].register := RKRegister;
     RuleDescr [270].pscarity := 1;
     RuleDescr [270].resregs   [0]  := { (Regcx)-0};
     RuleDescr [270].changeregs[0]  := {};
           RuleDescr [270].op[1].nt   := ntBReg;
           RuleDescr [270].op[1].path := 1;              RuleDescr [270].op[1].calc := FALSE;

           RuleDescr [270].op[1].regs[0] := { (Regcl)-0};
     RuleDescr [270].target   := 0;
     RuleDescr [270].closuretarget := FALSE;
     RuleDescr [270].result   := 0;
     RuleDescr [270].unique := FALSE;
     RuleDescr [270].commutative := FALSE;
     RuleDescr [270].srcline := 3122;
     RuleDescr [270].scrnum := 0;
 (*   RULE 271/3123  *)
           RuleDescr [271].register := RKRegister;
     RuleDescr [271].pscarity := 1;
     RuleDescr [271].resregs   [0]  := { (Regdx)-0};
     RuleDescr [271].changeregs[0]  := {};
           RuleDescr [271].op[1].nt   := ntBReg;
           RuleDescr [271].op[1].path := 1;              RuleDescr [271].op[1].calc := FALSE;

           RuleDescr [271].op[1].regs[0] := { (Regdl)-0};
     RuleDescr [271].target   := 0;
     RuleDescr [271].closuretarget := FALSE;
     RuleDescr [271].result   := 0;
     RuleDescr [271].unique := FALSE;
     RuleDescr [271].commutative := FALSE;
     RuleDescr [271].srcline := 3123;
     RuleDescr [271].scrnum := 0;
 (*   RULE 272/3125  *)
           RuleDescr [272].register := RKRegister;
     RuleDescr [272].pscarity := 1;
     RuleDescr [272].resregs   [0]  := { (Regax)-0};
     RuleDescr [272].changeregs[0]  := {};
           RuleDescr [272].op[1].nt   := ntLReg;
           RuleDescr [272].op[1].path := 1;              RuleDescr [272].op[1].calc := FALSE;

           RuleDescr [272].op[1].regs[0] := { (Regeax)-0};
     RuleDescr [272].target   := 0;
     RuleDescr [272].closuretarget := FALSE;
     RuleDescr [272].result   := 0;
     RuleDescr [272].unique := FALSE;
     RuleDescr [272].commutative := FALSE;
     RuleDescr [272].srcline := 3125;
     RuleDescr [272].scrnum := 0;
 (*   RULE 273/3126  *)
           RuleDescr [273].register := RKRegister;
     RuleDescr [273].pscarity := 1;
     RuleDescr [273].resregs   [0]  := { (Regbx)-0};
     RuleDescr [273].changeregs[0]  := {};
           RuleDescr [273].op[1].nt   := ntLReg;
           RuleDescr [273].op[1].path := 1;              RuleDescr [273].op[1].calc := FALSE;

           RuleDescr [273].op[1].regs[0] := { (Regebx)-0};
     RuleDescr [273].target   := 0;
     RuleDescr [273].closuretarget := FALSE;
     RuleDescr [273].result   := 0;
     RuleDescr [273].unique := FALSE;
     RuleDescr [273].commutative := FALSE;
     RuleDescr [273].srcline := 3126;
     RuleDescr [273].scrnum := 0;
 (*   RULE 274/3127  *)
           RuleDescr [274].register := RKRegister;
     RuleDescr [274].pscarity := 1;
     RuleDescr [274].resregs   [0]  := { (Regcx)-0};
     RuleDescr [274].changeregs[0]  := {};
           RuleDescr [274].op[1].nt   := ntLReg;
           RuleDescr [274].op[1].path := 1;              RuleDescr [274].op[1].calc := FALSE;

           RuleDescr [274].op[1].regs[0] := { (Regecx)-0};
     RuleDescr [274].target   := 0;
     RuleDescr [274].closuretarget := FALSE;
     RuleDescr [274].result   := 0;
     RuleDescr [274].unique := FALSE;
     RuleDescr [274].commutative := FALSE;
     RuleDescr [274].srcline := 3127;
     RuleDescr [274].scrnum := 0;
 (*   RULE 275/3128  *)
           RuleDescr [275].register := RKRegister;
     RuleDescr [275].pscarity := 1;
     RuleDescr [275].resregs   [0]  := { (Regdx)-0};
     RuleDescr [275].changeregs[0]  := {};
           RuleDescr [275].op[1].nt   := ntLReg;
           RuleDescr [275].op[1].path := 1;              RuleDescr [275].op[1].calc := FALSE;

           RuleDescr [275].op[1].regs[0] := { (Regedx)-0};
     RuleDescr [275].target   := 0;
     RuleDescr [275].closuretarget := FALSE;
     RuleDescr [275].result   := 0;
     RuleDescr [275].unique := FALSE;
     RuleDescr [275].commutative := FALSE;
     RuleDescr [275].srcline := 3128;
     RuleDescr [275].scrnum := 0;
 (*   RULE 276/3129  *)
           RuleDescr [276].register := RKRegister;
     RuleDescr [276].pscarity := 1;
     RuleDescr [276].resregs   [0]  := { (Regsi)-0};
     RuleDescr [276].changeregs[0]  := {};
           RuleDescr [276].op[1].nt   := ntLReg;
           RuleDescr [276].op[1].path := 1;              RuleDescr [276].op[1].calc := FALSE;

           RuleDescr [276].op[1].regs[0] := { (Regesi)-0};
     RuleDescr [276].target   := 0;
     RuleDescr [276].closuretarget := FALSE;
     RuleDescr [276].result   := 0;
     RuleDescr [276].unique := FALSE;
     RuleDescr [276].commutative := FALSE;
     RuleDescr [276].srcline := 3129;
     RuleDescr [276].scrnum := 0;
 (*   RULE 277/3130  *)
           RuleDescr [277].register := RKRegister;
     RuleDescr [277].pscarity := 1;
     RuleDescr [277].resregs   [0]  := { (Regdi)-0};
     RuleDescr [277].changeregs[0]  := {};
           RuleDescr [277].op[1].nt   := ntLReg;
           RuleDescr [277].op[1].path := 1;              RuleDescr [277].op[1].calc := FALSE;

           RuleDescr [277].op[1].regs[0] := { (Regedi)-0};
     RuleDescr [277].target   := 0;
     RuleDescr [277].closuretarget := FALSE;
     RuleDescr [277].result   := 0;
     RuleDescr [277].unique := FALSE;
     RuleDescr [277].commutative := FALSE;
     RuleDescr [277].srcline := 3130;
     RuleDescr [277].scrnum := 0;
 (*   RULE 278/3132  *)
           RuleDescr [278].register := RKRegister;
     RuleDescr [278].pscarity := 1;
     RuleDescr [278].resregs   [0]  := { (Regeax)-0};
     RuleDescr [278].changeregs[0]  := {};
           RuleDescr [278].op[1].nt   := ntBReg;
           RuleDescr [278].op[1].path := 1;              RuleDescr [278].op[1].calc := FALSE;

           RuleDescr [278].op[1].regs[0] := { (Regal)-0};
     RuleDescr [278].target   := 0;
     RuleDescr [278].closuretarget := FALSE;
     RuleDescr [278].result   := 0;
     RuleDescr [278].unique := FALSE;
     RuleDescr [278].commutative := FALSE;
     RuleDescr [278].srcline := 3132;
     RuleDescr [278].scrnum := 0;
 (*   RULE 279/3133  *)
           RuleDescr [279].register := RKRegister;
     RuleDescr [279].pscarity := 1;
     RuleDescr [279].resregs   [0]  := { (Regebx)-0};
     RuleDescr [279].changeregs[0]  := {};
           RuleDescr [279].op[1].nt   := ntBReg;
           RuleDescr [279].op[1].path := 1;              RuleDescr [279].op[1].calc := FALSE;

           RuleDescr [279].op[1].regs[0] := { (Regbl)-0};
     RuleDescr [279].target   := 0;
     RuleDescr [279].closuretarget := FALSE;
     RuleDescr [279].result   := 0;
     RuleDescr [279].unique := FALSE;
     RuleDescr [279].commutative := FALSE;
     RuleDescr [279].srcline := 3133;
     RuleDescr [279].scrnum := 0;
 (*   RULE 280/3134  *)
           RuleDescr [280].register := RKRegister;
     RuleDescr [280].pscarity := 1;
     RuleDescr [280].resregs   [0]  := { (Regecx)-0};
     RuleDescr [280].changeregs[0]  := {};
           RuleDescr [280].op[1].nt   := ntBReg;
           RuleDescr [280].op[1].path := 1;              RuleDescr [280].op[1].calc := FALSE;

           RuleDescr [280].op[1].regs[0] := { (Regcl)-0};
     RuleDescr [280].target   := 0;
     RuleDescr [280].closuretarget := FALSE;
     RuleDescr [280].result   := 0;
     RuleDescr [280].unique := FALSE;
     RuleDescr [280].commutative := FALSE;
     RuleDescr [280].srcline := 3134;
     RuleDescr [280].scrnum := 0;
 (*   RULE 281/3135  *)
           RuleDescr [281].register := RKRegister;
     RuleDescr [281].pscarity := 1;
     RuleDescr [281].resregs   [0]  := { (Regedx)-0};
     RuleDescr [281].changeregs[0]  := {};
           RuleDescr [281].op[1].nt   := ntBReg;
           RuleDescr [281].op[1].path := 1;              RuleDescr [281].op[1].calc := FALSE;

           RuleDescr [281].op[1].regs[0] := { (Regdl)-0};
     RuleDescr [281].target   := 0;
     RuleDescr [281].closuretarget := FALSE;
     RuleDescr [281].result   := 0;
     RuleDescr [281].unique := FALSE;
     RuleDescr [281].commutative := FALSE;
     RuleDescr [281].srcline := 3135;
     RuleDescr [281].scrnum := 0;
 (*   RULE 282/3137  *)
           RuleDescr [282].register := RKRegister;
     RuleDescr [282].pscarity := 1;
     RuleDescr [282].resregs   [0]  := { (Regeax)-0};
     RuleDescr [282].changeregs[0]  := {};
           RuleDescr [282].op[1].nt   := ntWReg;
           RuleDescr [282].op[1].path := 1;              RuleDescr [282].op[1].calc := FALSE;

           RuleDescr [282].op[1].regs[0] := { (Regax)-0};
     RuleDescr [282].target   := 0;
     RuleDescr [282].closuretarget := FALSE;
     RuleDescr [282].result   := 0;
     RuleDescr [282].unique := FALSE;
     RuleDescr [282].commutative := FALSE;
     RuleDescr [282].srcline := 3137;
     RuleDescr [282].scrnum := 0;
 (*   RULE 283/3138  *)
           RuleDescr [283].register := RKRegister;
     RuleDescr [283].pscarity := 1;
     RuleDescr [283].resregs   [0]  := { (Regebx)-0};
     RuleDescr [283].changeregs[0]  := {};
           RuleDescr [283].op[1].nt   := ntWReg;
           RuleDescr [283].op[1].path := 1;              RuleDescr [283].op[1].calc := FALSE;

           RuleDescr [283].op[1].regs[0] := { (Regbx)-0};
     RuleDescr [283].target   := 0;
     RuleDescr [283].closuretarget := FALSE;
     RuleDescr [283].result   := 0;
     RuleDescr [283].unique := FALSE;
     RuleDescr [283].commutative := FALSE;
     RuleDescr [283].srcline := 3138;
     RuleDescr [283].scrnum := 0;
 (*   RULE 284/3139  *)
           RuleDescr [284].register := RKRegister;
     RuleDescr [284].pscarity := 1;
     RuleDescr [284].resregs   [0]  := { (Regecx)-0};
     RuleDescr [284].changeregs[0]  := {};
           RuleDescr [284].op[1].nt   := ntWReg;
           RuleDescr [284].op[1].path := 1;              RuleDescr [284].op[1].calc := FALSE;

           RuleDescr [284].op[1].regs[0] := { (Regcx)-0};
     RuleDescr [284].target   := 0;
     RuleDescr [284].closuretarget := FALSE;
     RuleDescr [284].result   := 0;
     RuleDescr [284].unique := FALSE;
     RuleDescr [284].commutative := FALSE;
     RuleDescr [284].srcline := 3139;
     RuleDescr [284].scrnum := 0;
 (*   RULE 285/3140  *)
           RuleDescr [285].register := RKRegister;
     RuleDescr [285].pscarity := 1;
     RuleDescr [285].resregs   [0]  := { (Regedx)-0};
     RuleDescr [285].changeregs[0]  := {};
           RuleDescr [285].op[1].nt   := ntWReg;
           RuleDescr [285].op[1].path := 1;              RuleDescr [285].op[1].calc := FALSE;

           RuleDescr [285].op[1].regs[0] := { (Regdx)-0};
     RuleDescr [285].target   := 0;
     RuleDescr [285].closuretarget := FALSE;
     RuleDescr [285].result   := 0;
     RuleDescr [285].unique := FALSE;
     RuleDescr [285].commutative := FALSE;
     RuleDescr [285].srcline := 3140;
     RuleDescr [285].scrnum := 0;
 (*   RULE 286/3141  *)
           RuleDescr [286].register := RKRegister;
     RuleDescr [286].pscarity := 1;
     RuleDescr [286].resregs   [0]  := { (Regesi)-0};
     RuleDescr [286].changeregs[0]  := {};
           RuleDescr [286].op[1].nt   := ntWReg;
           RuleDescr [286].op[1].path := 1;              RuleDescr [286].op[1].calc := FALSE;

           RuleDescr [286].op[1].regs[0] := { (Regsi)-0};
     RuleDescr [286].target   := 0;
     RuleDescr [286].closuretarget := FALSE;
     RuleDescr [286].result   := 0;
     RuleDescr [286].unique := FALSE;
     RuleDescr [286].commutative := FALSE;
     RuleDescr [286].srcline := 3141;
     RuleDescr [286].scrnum := 0;
 (*   RULE 287/3142  *)
           RuleDescr [287].register := RKRegister;
     RuleDescr [287].pscarity := 1;
     RuleDescr [287].resregs   [0]  := { (Regedi)-0};
     RuleDescr [287].changeregs[0]  := {};
           RuleDescr [287].op[1].nt   := ntWReg;
           RuleDescr [287].op[1].path := 1;              RuleDescr [287].op[1].calc := FALSE;

           RuleDescr [287].op[1].regs[0] := { (Regdi)-0};
     RuleDescr [287].target   := 0;
     RuleDescr [287].closuretarget := FALSE;
     RuleDescr [287].result   := 0;
     RuleDescr [287].unique := FALSE;
     RuleDescr [287].commutative := FALSE;
     RuleDescr [287].srcline := 3142;
     RuleDescr [287].scrnum := 0;
 (*   RULE 288/3145  *)
           RuleDescr [288].register := RKRegister;
     RuleDescr [288].pscarity := 3;
     RuleDescr [288].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [288].changeregs[0]  := {};
           RuleDescr [288].op[1].nt   := ntMemory;
           RuleDescr [288].op[1].path := 273;              RuleDescr [288].op[1].calc := FALSE;

           RuleDescr [288].op[1].regs[0] := {};
           RuleDescr [288].op[2].nt   := ntLReg;
           RuleDescr [288].op[2].path := 529;              RuleDescr [288].op[2].calc := FALSE;

           RuleDescr [288].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [288].op[3].nt   := ntLReg;
           RuleDescr [288].op[3].path := 785;              RuleDescr [288].op[3].calc := FALSE;

           RuleDescr [288].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [288].target   := 2;
     RuleDescr [288].closuretarget := FALSE;
     RuleDescr [288].result   := 0;
     RuleDescr [288].unique := FALSE;
     RuleDescr [288].commutative := FALSE;
     RuleDescr [288].srcline := 3145;
     RuleDescr [288].scrnum := 0;
 (*   RULE 289/3164  *)
           RuleDescr [289].register := RKRegister;
     RuleDescr [289].pscarity := 3;
     RuleDescr [289].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [289].changeregs[0]  := {};
           RuleDescr [289].op[1].nt   := ntMemory;
           RuleDescr [289].op[1].path := 4369;              RuleDescr [289].op[1].calc := FALSE;

           RuleDescr [289].op[1].regs[0] := {};
           RuleDescr [289].op[2].nt   := ntLReg;
           RuleDescr [289].op[2].path := 8465;              RuleDescr [289].op[2].calc := FALSE;

           RuleDescr [289].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [289].op[3].nt   := ntLReg;
           RuleDescr [289].op[3].path := 12561;              RuleDescr [289].op[3].calc := FALSE;

           RuleDescr [289].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [289].target   := 2;
     RuleDescr [289].closuretarget := FALSE;
     RuleDescr [289].result   := 0;
     RuleDescr [289].unique := FALSE;
     RuleDescr [289].commutative := FALSE;
     RuleDescr [289].srcline := 3164;
     RuleDescr [289].scrnum := 0;
 (*   RULE 290/3185  *)
           RuleDescr [290].register := RKRegister;
     RuleDescr [290].pscarity := 1;
     RuleDescr [290].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [290].changeregs[0]  := {};
           RuleDescr [290].op[1].nt   := ntLReg;
           RuleDescr [290].op[1].path := 17;              RuleDescr [290].op[1].calc := FALSE;

           RuleDescr [290].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [290].target   := 1;
     RuleDescr [290].closuretarget := FALSE;
     RuleDescr [290].result   := 0;
     RuleDescr [290].unique := FALSE;
     RuleDescr [290].commutative := FALSE;
     RuleDescr [290].srcline := 3185;
     RuleDescr [290].scrnum := 0;
 (*   RULE 291/3191  *)
           RuleDescr [291].register := RKAdrmode;
     RuleDescr [291].pscarity := 4;
     RuleDescr [291].resregs   [0]  := {};
     RuleDescr [291].changeregs[0]  := {};
           RuleDescr [291].op[1].nt   := ntLReg;
           RuleDescr [291].op[1].path := 17;              RuleDescr [291].op[1].calc := FALSE;

           RuleDescr [291].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [291].op[2].nt   := ntLReg;
           RuleDescr [291].op[2].path := 33;              RuleDescr [291].op[2].calc := FALSE;

           RuleDescr [291].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [291].op[3].nt   := ntLReg;
           RuleDescr [291].op[3].path := 49;              RuleDescr [291].op[3].calc := FALSE;

           RuleDescr [291].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [291].op[4].nt   := ntLReg;
           RuleDescr [291].op[4].path := 65;              RuleDescr [291].op[4].calc := FALSE;

           RuleDescr [291].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [291].target   := 0;
     RuleDescr [291].closuretarget := FALSE;
     RuleDescr [291].result   := 0;
     RuleDescr [291].unique := FALSE;
     RuleDescr [291].commutative := FALSE;
     RuleDescr [291].srcline := 3191;
     RuleDescr [291].scrnum := 0;
 (*   RULE 292/3209  *)
           RuleDescr [292].register := RKAdrmode;
     RuleDescr [292].pscarity := 5;
     RuleDescr [292].resregs   [0]  := {};
     RuleDescr [292].changeregs[0]  := {};
           RuleDescr [292].op[1].nt   := ntLReg;
           RuleDescr [292].op[1].path := 273;              RuleDescr [292].op[1].calc := FALSE;

           RuleDescr [292].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [292].op[2].nt   := ntLReg;
           RuleDescr [292].op[2].path := 529;              RuleDescr [292].op[2].calc := FALSE;

           RuleDescr [292].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [292].op[3].nt   := ntLReg;
           RuleDescr [292].op[3].path := 33;              RuleDescr [292].op[3].calc := FALSE;

           RuleDescr [292].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [292].op[4].nt   := ntLReg;
           RuleDescr [292].op[4].path := 49;              RuleDescr [292].op[4].calc := FALSE;

           RuleDescr [292].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [292].op[5].nt   := ntLReg;
           RuleDescr [292].op[5].path := 65;              RuleDescr [292].op[5].calc := FALSE;

           RuleDescr [292].op[5].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [292].target   := 0;
     RuleDescr [292].closuretarget := FALSE;
     RuleDescr [292].result   := 0;
     RuleDescr [292].unique := FALSE;
     RuleDescr [292].commutative := FALSE;
     RuleDescr [292].srcline := 3209;
     RuleDescr [292].scrnum := 0;
 (*   RULE 293/3239  *)
           RuleDescr [293].register := RKAdrmode;
     RuleDescr [293].pscarity := 4;
     RuleDescr [293].resregs   [0]  := {};
     RuleDescr [293].changeregs[0]  := {};
           RuleDescr [293].op[1].nt   := ntLReg;
           RuleDescr [293].op[1].path := 529;              RuleDescr [293].op[1].calc := FALSE;

           RuleDescr [293].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [293].op[2].nt   := ntLReg;
           RuleDescr [293].op[2].path := 33;              RuleDescr [293].op[2].calc := FALSE;

           RuleDescr [293].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [293].op[3].nt   := ntLReg;
           RuleDescr [293].op[3].path := 49;              RuleDescr [293].op[3].calc := FALSE;

           RuleDescr [293].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [293].op[4].nt   := ntLReg;
           RuleDescr [293].op[4].path := 65;              RuleDescr [293].op[4].calc := FALSE;

           RuleDescr [293].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [293].target   := 0;
     RuleDescr [293].closuretarget := FALSE;
     RuleDescr [293].result   := 0;
     RuleDescr [293].unique := FALSE;
     RuleDescr [293].commutative := FALSE;
     RuleDescr [293].srcline := 3239;
     RuleDescr [293].scrnum := 0;
 (*   RULE 294/3274  *)
           RuleDescr [294].register := RKAdrmode;
     RuleDescr [294].pscarity := 0;
     RuleDescr [294].resregs   [0]  := {};
     RuleDescr [294].changeregs[0]  := {};
     RuleDescr [294].target   := 0;
     RuleDescr [294].closuretarget := FALSE;
     RuleDescr [294].result   := 0;
     RuleDescr [294].unique := FALSE;
     RuleDescr [294].commutative := FALSE;
     RuleDescr [294].srcline := 3274;
     RuleDescr [294].scrnum := 0;
 (*   RULE 295/3281  *)
           RuleDescr [295].register := RKAdrmode;
     RuleDescr [295].pscarity := 0;
     RuleDescr [295].resregs   [0]  := {};
     RuleDescr [295].changeregs[0]  := {};
     RuleDescr [295].target   := 0;
     RuleDescr [295].closuretarget := FALSE;
     RuleDescr [295].result   := 0;
     RuleDescr [295].unique := FALSE;
     RuleDescr [295].commutative := FALSE;
     RuleDescr [295].srcline := 3281;
     RuleDescr [295].scrnum := 0;
 (*   RULE 296/3288  *)
           RuleDescr [296].register := RKAdrmode;
     RuleDescr [296].pscarity := 0;
     RuleDescr [296].resregs   [0]  := {};
     RuleDescr [296].changeregs[0]  := {};
     RuleDescr [296].target   := 0;
     RuleDescr [296].closuretarget := FALSE;
     RuleDescr [296].result   := 0;
     RuleDescr [296].unique := FALSE;
     RuleDescr [296].commutative := FALSE;
     RuleDescr [296].srcline := 3288;
     RuleDescr [296].scrnum := 0;
 (*   RULE 297/3298  *)
           RuleDescr [297].register := RKAdrmode;
     RuleDescr [297].pscarity := 1;
     RuleDescr [297].resregs   [0]  := {};
     RuleDescr [297].changeregs[0]  := {};
           RuleDescr [297].op[1].nt   := ntAVar;
           RuleDescr [297].op[1].path := 1;              RuleDescr [297].op[1].calc := FALSE;

           RuleDescr [297].op[1].regs[0] := {};
     RuleDescr [297].target   := 0;
     RuleDescr [297].closuretarget := FALSE;
     RuleDescr [297].result   := 0;
     RuleDescr [297].unique := FALSE;
     RuleDescr [297].commutative := FALSE;
     RuleDescr [297].srcline := 3298;
     RuleDescr [297].scrnum := 0;
 (*   RULE 298/3302  *)
           RuleDescr [298].register := RKMemory;
     RuleDescr [298].pscarity := 2;
     RuleDescr [298].resregs   [0]  := {};
     RuleDescr [298].changeregs[0]  := {};
           RuleDescr [298].op[1].nt   := ntAVar;
           RuleDescr [298].op[1].path := 1;              RuleDescr [298].op[1].calc := FALSE;

           RuleDescr [298].op[1].regs[0] := {};
           RuleDescr [298].op[2].nt   := ntAVar;
           RuleDescr [298].op[2].path := 274;              RuleDescr [298].op[2].calc := FALSE;

           RuleDescr [298].op[2].regs[0] := {};
     RuleDescr [298].target   := 0;
     RuleDescr [298].closuretarget := FALSE;
     RuleDescr [298].result   := 0;
     RuleDescr [298].unique := FALSE;
     RuleDescr [298].commutative := FALSE;
     RuleDescr [298].srcline := 3302;
     RuleDescr [298].scrnum := 1;
     RuleDescr [298].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 299/3313  *)
           RuleDescr [299].register := RKMemory;
     RuleDescr [299].pscarity := 3;
     RuleDescr [299].resregs   [0]  := {};
     RuleDescr [299].changeregs[0]  := {};
           RuleDescr [299].op[1].nt   := ntAVar;
           RuleDescr [299].op[1].path := 1;              RuleDescr [299].op[1].calc := FALSE;

           RuleDescr [299].op[1].regs[0] := {};
           RuleDescr [299].op[2].nt   := ntConstant;
           RuleDescr [299].op[2].path := 18;              RuleDescr [299].op[2].calc := FALSE;

           RuleDescr [299].op[2].regs[0] := {};
           RuleDescr [299].op[3].nt   := ntAVar;
           RuleDescr [299].op[3].path := 290;              RuleDescr [299].op[3].calc := FALSE;

           RuleDescr [299].op[3].regs[0] := {};
     RuleDescr [299].target   := 0;
     RuleDescr [299].closuretarget := FALSE;
     RuleDescr [299].result   := 0;
     RuleDescr [299].unique := FALSE;
     RuleDescr [299].commutative := FALSE;
     RuleDescr [299].srcline := 3313;
     RuleDescr [299].scrnum := 1;
     RuleDescr [299].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 300/3313  *)
           RuleDescr [300].register := RKMemory;
     RuleDescr [300].pscarity := 3;
     RuleDescr [300].resregs   [0]  := {};
     RuleDescr [300].changeregs[0]  := {};
           RuleDescr [300].op[1].nt   := ntAVar;
           RuleDescr [300].op[1].path := 1;              RuleDescr [300].op[1].calc := FALSE;

           RuleDescr [300].op[1].regs[0] := {};
           RuleDescr [300].op[2].nt   := ntAVar;
           RuleDescr [300].op[2].path := 274;              RuleDescr [300].op[2].calc := FALSE;

           RuleDescr [300].op[2].regs[0] := {};
           RuleDescr [300].op[3].nt   := ntConstant;
           RuleDescr [300].op[3].path := 34;              RuleDescr [300].op[3].calc := FALSE;

           RuleDescr [300].op[3].regs[0] := {};
     RuleDescr [300].target   := 0;
     RuleDescr [300].closuretarget := FALSE;
     RuleDescr [300].result   := 0;
     RuleDescr [300].unique := FALSE;
     RuleDescr [300].commutative := FALSE;
     RuleDescr [300].srcline := 3313;
     RuleDescr [300].scrnum := 1;
     RuleDescr [300].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 301/3324  *)
           RuleDescr [301].register := RKMemory;
     RuleDescr [301].pscarity := 3;
     RuleDescr [301].resregs   [0]  := {};
     RuleDescr [301].changeregs[0]  := {};
           RuleDescr [301].op[1].nt   := ntAVar;
           RuleDescr [301].op[1].path := 1;              RuleDescr [301].op[1].calc := FALSE;

           RuleDescr [301].op[1].regs[0] := {};
           RuleDescr [301].op[2].nt   := ntARegAImm;
           RuleDescr [301].op[2].path := 18;              RuleDescr [301].op[2].calc := FALSE;

           RuleDescr [301].op[2].regs[0] := {};
           RuleDescr [301].op[3].nt   := ntAVar;
           RuleDescr [301].op[3].path := 290;              RuleDescr [301].op[3].calc := FALSE;

           RuleDescr [301].op[3].regs[0] := {};
     RuleDescr [301].target   := 0;
     RuleDescr [301].closuretarget := FALSE;
     RuleDescr [301].result   := 0;
     RuleDescr [301].unique := FALSE;
     RuleDescr [301].commutative := FALSE;
     RuleDescr [301].srcline := 3324;
     RuleDescr [301].scrnum := 1;
     RuleDescr [301].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 302/3324  *)
           RuleDescr [302].register := RKMemory;
     RuleDescr [302].pscarity := 3;
     RuleDescr [302].resregs   [0]  := {};
     RuleDescr [302].changeregs[0]  := {};
           RuleDescr [302].op[1].nt   := ntAVar;
           RuleDescr [302].op[1].path := 1;              RuleDescr [302].op[1].calc := FALSE;

           RuleDescr [302].op[1].regs[0] := {};
           RuleDescr [302].op[2].nt   := ntAVar;
           RuleDescr [302].op[2].path := 274;              RuleDescr [302].op[2].calc := FALSE;

           RuleDescr [302].op[2].regs[0] := {};
           RuleDescr [302].op[3].nt   := ntARegAImm;
           RuleDescr [302].op[3].path := 34;              RuleDescr [302].op[3].calc := FALSE;

           RuleDescr [302].op[3].regs[0] := {};
     RuleDescr [302].target   := 0;
     RuleDescr [302].closuretarget := FALSE;
     RuleDescr [302].result   := 0;
     RuleDescr [302].unique := FALSE;
     RuleDescr [302].commutative := FALSE;
     RuleDescr [302].srcline := 3324;
     RuleDescr [302].scrnum := 1;
     RuleDescr [302].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 303/3336  *)
           RuleDescr [303].register := RKMemory;
     RuleDescr [303].pscarity := 3;
     RuleDescr [303].resregs   [0]  := {};
     RuleDescr [303].changeregs[0]  := {};
           RuleDescr [303].op[1].nt   := ntAVar;
           RuleDescr [303].op[1].path := 1;              RuleDescr [303].op[1].calc := FALSE;

           RuleDescr [303].op[1].regs[0] := {};
           RuleDescr [303].op[2].nt   := ntAVar;
           RuleDescr [303].op[2].path := 274;              RuleDescr [303].op[2].calc := FALSE;

           RuleDescr [303].op[2].regs[0] := {};
           RuleDescr [303].op[3].nt   := ntARegAImm;
           RuleDescr [303].op[3].path := 34;              RuleDescr [303].op[3].calc := FALSE;

           RuleDescr [303].op[3].regs[0] := {};
     RuleDescr [303].target   := 0;
     RuleDescr [303].closuretarget := FALSE;
     RuleDescr [303].result   := 0;
     RuleDescr [303].unique := FALSE;
     RuleDescr [303].commutative := FALSE;
     RuleDescr [303].srcline := 3336;
     RuleDescr [303].scrnum := 1;
     RuleDescr [303].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 304/3348  *)
           RuleDescr [304].register := RKMemory;
     RuleDescr [304].pscarity := 3;
     RuleDescr [304].resregs   [0]  := {};
     RuleDescr [304].changeregs[0]  := {};
           RuleDescr [304].op[1].nt   := ntAVar;
           RuleDescr [304].op[1].path := 1;              RuleDescr [304].op[1].calc := FALSE;

           RuleDescr [304].op[1].regs[0] := {};
           RuleDescr [304].op[2].nt   := ntAVar;
           RuleDescr [304].op[2].path := 274;              RuleDescr [304].op[2].calc := FALSE;

           RuleDescr [304].op[2].regs[0] := {};
           RuleDescr [304].op[3].nt   := ntConstant;
           RuleDescr [304].op[3].path := 34;              RuleDescr [304].op[3].calc := FALSE;

           RuleDescr [304].op[3].regs[0] := {};
     RuleDescr [304].target   := 0;
     RuleDescr [304].closuretarget := FALSE;
     RuleDescr [304].result   := 0;
     RuleDescr [304].unique := FALSE;
     RuleDescr [304].commutative := FALSE;
     RuleDescr [304].srcline := 3348;
     RuleDescr [304].scrnum := 1;
     RuleDescr [304].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 305/3362  *)
           RuleDescr [305].register := RKRegister;
     RuleDescr [305].pscarity := 3;
     RuleDescr [305].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [305].changeregs[0]  := {};
           RuleDescr [305].op[1].nt   := ntConstant;
           RuleDescr [305].op[1].path := 17;              RuleDescr [305].op[1].calc := FALSE;

           RuleDescr [305].op[1].regs[0] := {};
           RuleDescr [305].op[2].nt   := ntLReg;
           RuleDescr [305].op[2].path := 33;              RuleDescr [305].op[2].calc := FALSE;

           RuleDescr [305].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [305].op[3].nt   := ntConstant;
           RuleDescr [305].op[3].path := 2;              RuleDescr [305].op[3].calc := FALSE;

           RuleDescr [305].op[3].regs[0] := {};
     RuleDescr [305].target   := 0;
     RuleDescr [305].closuretarget := FALSE;
     RuleDescr [305].result   := 0;
     RuleDescr [305].unique := FALSE;
     RuleDescr [305].commutative := FALSE;
     RuleDescr [305].srcline := 3362;
     RuleDescr [305].scrnum := 0;
 (*   RULE 306/3362  *)
           RuleDescr [306].register := RKRegister;
     RuleDescr [306].pscarity := 3;
     RuleDescr [306].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [306].changeregs[0]  := {};
           RuleDescr [306].op[1].nt   := ntLReg;
           RuleDescr [306].op[1].path := 17;              RuleDescr [306].op[1].calc := FALSE;

           RuleDescr [306].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [306].op[2].nt   := ntConstant;
           RuleDescr [306].op[2].path := 33;              RuleDescr [306].op[2].calc := FALSE;

           RuleDescr [306].op[2].regs[0] := {};
           RuleDescr [306].op[3].nt   := ntConstant;
           RuleDescr [306].op[3].path := 2;              RuleDescr [306].op[3].calc := FALSE;

           RuleDescr [306].op[3].regs[0] := {};
     RuleDescr [306].target   := 0;
     RuleDescr [306].closuretarget := FALSE;
     RuleDescr [306].result   := 0;
     RuleDescr [306].unique := FALSE;
     RuleDescr [306].commutative := FALSE;
     RuleDescr [306].srcline := 3362;
     RuleDescr [306].scrnum := 0;
 (*   RULE 307/3362  *)
           RuleDescr [307].register := RKRegister;
     RuleDescr [307].pscarity := 3;
     RuleDescr [307].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [307].changeregs[0]  := {};
           RuleDescr [307].op[1].nt   := ntConstant;
           RuleDescr [307].op[1].path := 1;              RuleDescr [307].op[1].calc := FALSE;

           RuleDescr [307].op[1].regs[0] := {};
           RuleDescr [307].op[2].nt   := ntConstant;
           RuleDescr [307].op[2].path := 18;              RuleDescr [307].op[2].calc := FALSE;

           RuleDescr [307].op[2].regs[0] := {};
           RuleDescr [307].op[3].nt   := ntLReg;
           RuleDescr [307].op[3].path := 34;              RuleDescr [307].op[3].calc := FALSE;

           RuleDescr [307].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [307].target   := 0;
     RuleDescr [307].closuretarget := FALSE;
     RuleDescr [307].result   := 0;
     RuleDescr [307].unique := FALSE;
     RuleDescr [307].commutative := FALSE;
     RuleDescr [307].srcline := 3362;
     RuleDescr [307].scrnum := 0;
 (*   RULE 308/3362  *)
           RuleDescr [308].register := RKRegister;
     RuleDescr [308].pscarity := 3;
     RuleDescr [308].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [308].changeregs[0]  := {};
           RuleDescr [308].op[1].nt   := ntConstant;
           RuleDescr [308].op[1].path := 1;              RuleDescr [308].op[1].calc := FALSE;

           RuleDescr [308].op[1].regs[0] := {};
           RuleDescr [308].op[2].nt   := ntLReg;
           RuleDescr [308].op[2].path := 18;              RuleDescr [308].op[2].calc := FALSE;

           RuleDescr [308].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [308].op[3].nt   := ntConstant;
           RuleDescr [308].op[3].path := 34;              RuleDescr [308].op[3].calc := FALSE;

           RuleDescr [308].op[3].regs[0] := {};
     RuleDescr [308].target   := 0;
     RuleDescr [308].closuretarget := FALSE;
     RuleDescr [308].result   := 0;
     RuleDescr [308].unique := FALSE;
     RuleDescr [308].commutative := FALSE;
     RuleDescr [308].srcline := 3362;
     RuleDescr [308].scrnum := 0;
 (*   RULE 309/3372  *)
           RuleDescr [309].register := RKRegister;
     RuleDescr [309].pscarity := 3;
     RuleDescr [309].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [309].changeregs[0]  := {};
           RuleDescr [309].op[1].nt   := ntConstant;
           RuleDescr [309].op[1].path := 17;              RuleDescr [309].op[1].calc := FALSE;

           RuleDescr [309].op[1].regs[0] := {};
           RuleDescr [309].op[2].nt   := ntLReg;
           RuleDescr [309].op[2].path := 33;              RuleDescr [309].op[2].calc := FALSE;

           RuleDescr [309].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [309].op[3].nt   := ntConstant;
           RuleDescr [309].op[3].path := 2;              RuleDescr [309].op[3].calc := FALSE;

           RuleDescr [309].op[3].regs[0] := {};
     RuleDescr [309].target   := 0;
     RuleDescr [309].closuretarget := FALSE;
     RuleDescr [309].result   := 0;
     RuleDescr [309].unique := FALSE;
     RuleDescr [309].commutative := FALSE;
     RuleDescr [309].srcline := 3372;
     RuleDescr [309].scrnum := 0;
 (*   RULE 310/3372  *)
           RuleDescr [310].register := RKRegister;
     RuleDescr [310].pscarity := 3;
     RuleDescr [310].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [310].changeregs[0]  := {};
           RuleDescr [310].op[1].nt   := ntLReg;
           RuleDescr [310].op[1].path := 17;              RuleDescr [310].op[1].calc := FALSE;

           RuleDescr [310].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [310].op[2].nt   := ntConstant;
           RuleDescr [310].op[2].path := 33;              RuleDescr [310].op[2].calc := FALSE;

           RuleDescr [310].op[2].regs[0] := {};
           RuleDescr [310].op[3].nt   := ntConstant;
           RuleDescr [310].op[3].path := 2;              RuleDescr [310].op[3].calc := FALSE;

           RuleDescr [310].op[3].regs[0] := {};
     RuleDescr [310].target   := 0;
     RuleDescr [310].closuretarget := FALSE;
     RuleDescr [310].result   := 0;
     RuleDescr [310].unique := FALSE;
     RuleDescr [310].commutative := FALSE;
     RuleDescr [310].srcline := 3372;
     RuleDescr [310].scrnum := 0;
 (*   RULE 311/3372  *)
           RuleDescr [311].register := RKRegister;
     RuleDescr [311].pscarity := 3;
     RuleDescr [311].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [311].changeregs[0]  := {};
           RuleDescr [311].op[1].nt   := ntConstant;
           RuleDescr [311].op[1].path := 1;              RuleDescr [311].op[1].calc := FALSE;

           RuleDescr [311].op[1].regs[0] := {};
           RuleDescr [311].op[2].nt   := ntConstant;
           RuleDescr [311].op[2].path := 18;              RuleDescr [311].op[2].calc := FALSE;

           RuleDescr [311].op[2].regs[0] := {};
           RuleDescr [311].op[3].nt   := ntLReg;
           RuleDescr [311].op[3].path := 34;              RuleDescr [311].op[3].calc := FALSE;

           RuleDescr [311].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [311].target   := 0;
     RuleDescr [311].closuretarget := FALSE;
     RuleDescr [311].result   := 0;
     RuleDescr [311].unique := FALSE;
     RuleDescr [311].commutative := FALSE;
     RuleDescr [311].srcline := 3372;
     RuleDescr [311].scrnum := 0;
 (*   RULE 312/3372  *)
           RuleDescr [312].register := RKRegister;
     RuleDescr [312].pscarity := 3;
     RuleDescr [312].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [312].changeregs[0]  := {};
           RuleDescr [312].op[1].nt   := ntConstant;
           RuleDescr [312].op[1].path := 1;              RuleDescr [312].op[1].calc := FALSE;

           RuleDescr [312].op[1].regs[0] := {};
           RuleDescr [312].op[2].nt   := ntLReg;
           RuleDescr [312].op[2].path := 18;              RuleDescr [312].op[2].calc := FALSE;

           RuleDescr [312].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [312].op[3].nt   := ntConstant;
           RuleDescr [312].op[3].path := 34;              RuleDescr [312].op[3].calc := FALSE;

           RuleDescr [312].op[3].regs[0] := {};
     RuleDescr [312].target   := 0;
     RuleDescr [312].closuretarget := FALSE;
     RuleDescr [312].result   := 0;
     RuleDescr [312].unique := FALSE;
     RuleDescr [312].commutative := FALSE;
     RuleDescr [312].srcline := 3372;
     RuleDescr [312].scrnum := 0;
 (*   RULE 313/3382  *)
           RuleDescr [313].register := RKRegister;
     RuleDescr [313].pscarity := 4;
     RuleDescr [313].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [313].changeregs[0]  := {};
           RuleDescr [313].op[1].nt   := ntConstant;
           RuleDescr [313].op[1].path := 273;              RuleDescr [313].op[1].calc := FALSE;

           RuleDescr [313].op[1].regs[0] := {};
           RuleDescr [313].op[2].nt   := ntLReg;
           RuleDescr [313].op[2].path := 529;              RuleDescr [313].op[2].calc := FALSE;

           RuleDescr [313].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [313].op[3].nt   := ntLReg;
           RuleDescr [313].op[3].path := 33;              RuleDescr [313].op[3].calc := FALSE;

           RuleDescr [313].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [313].op[4].nt   := ntConstant;
           RuleDescr [313].op[4].path := 2;              RuleDescr [313].op[4].calc := FALSE;

           RuleDescr [313].op[4].regs[0] := {};
     RuleDescr [313].target   := 0;
     RuleDescr [313].closuretarget := FALSE;
     RuleDescr [313].result   := 0;
     RuleDescr [313].unique := FALSE;
     RuleDescr [313].commutative := FALSE;
     RuleDescr [313].srcline := 3382;
     RuleDescr [313].scrnum := 0;
 (*   RULE 314/3382  *)
           RuleDescr [314].register := RKRegister;
     RuleDescr [314].pscarity := 4;
     RuleDescr [314].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [314].changeregs[0]  := {};
           RuleDescr [314].op[1].nt   := ntLReg;
           RuleDescr [314].op[1].path := 273;              RuleDescr [314].op[1].calc := FALSE;

           RuleDescr [314].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [314].op[2].nt   := ntConstant;
           RuleDescr [314].op[2].path := 529;              RuleDescr [314].op[2].calc := FALSE;

           RuleDescr [314].op[2].regs[0] := {};
           RuleDescr [314].op[3].nt   := ntLReg;
           RuleDescr [314].op[3].path := 33;              RuleDescr [314].op[3].calc := FALSE;

           RuleDescr [314].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [314].op[4].nt   := ntConstant;
           RuleDescr [314].op[4].path := 2;              RuleDescr [314].op[4].calc := FALSE;

           RuleDescr [314].op[4].regs[0] := {};
     RuleDescr [314].target   := 0;
     RuleDescr [314].closuretarget := FALSE;
     RuleDescr [314].result   := 0;
     RuleDescr [314].unique := FALSE;
     RuleDescr [314].commutative := FALSE;
     RuleDescr [314].srcline := 3382;
     RuleDescr [314].scrnum := 0;
 (*   RULE 315/3382  *)
           RuleDescr [315].register := RKRegister;
     RuleDescr [315].pscarity := 4;
     RuleDescr [315].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [315].changeregs[0]  := {};
           RuleDescr [315].op[1].nt   := ntLReg;
           RuleDescr [315].op[1].path := 17;              RuleDescr [315].op[1].calc := FALSE;

           RuleDescr [315].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [315].op[2].nt   := ntConstant;
           RuleDescr [315].op[2].path := 289;              RuleDescr [315].op[2].calc := FALSE;

           RuleDescr [315].op[2].regs[0] := {};
           RuleDescr [315].op[3].nt   := ntLReg;
           RuleDescr [315].op[3].path := 545;              RuleDescr [315].op[3].calc := FALSE;

           RuleDescr [315].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [315].op[4].nt   := ntConstant;
           RuleDescr [315].op[4].path := 2;              RuleDescr [315].op[4].calc := FALSE;

           RuleDescr [315].op[4].regs[0] := {};
     RuleDescr [315].target   := 0;
     RuleDescr [315].closuretarget := FALSE;
     RuleDescr [315].result   := 0;
     RuleDescr [315].unique := FALSE;
     RuleDescr [315].commutative := FALSE;
     RuleDescr [315].srcline := 3382;
     RuleDescr [315].scrnum := 0;
 (*   RULE 316/3382  *)
           RuleDescr [316].register := RKRegister;
     RuleDescr [316].pscarity := 4;
     RuleDescr [316].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [316].changeregs[0]  := {};
           RuleDescr [316].op[1].nt   := ntLReg;
           RuleDescr [316].op[1].path := 17;              RuleDescr [316].op[1].calc := FALSE;

           RuleDescr [316].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [316].op[2].nt   := ntLReg;
           RuleDescr [316].op[2].path := 289;              RuleDescr [316].op[2].calc := FALSE;

           RuleDescr [316].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [316].op[3].nt   := ntConstant;
           RuleDescr [316].op[3].path := 545;              RuleDescr [316].op[3].calc := FALSE;

           RuleDescr [316].op[3].regs[0] := {};
           RuleDescr [316].op[4].nt   := ntConstant;
           RuleDescr [316].op[4].path := 2;              RuleDescr [316].op[4].calc := FALSE;

           RuleDescr [316].op[4].regs[0] := {};
     RuleDescr [316].target   := 0;
     RuleDescr [316].closuretarget := FALSE;
     RuleDescr [316].result   := 0;
     RuleDescr [316].unique := FALSE;
     RuleDescr [316].commutative := FALSE;
     RuleDescr [316].srcline := 3382;
     RuleDescr [316].scrnum := 0;
 (*   RULE 317/3382  *)
           RuleDescr [317].register := RKRegister;
     RuleDescr [317].pscarity := 4;
     RuleDescr [317].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [317].changeregs[0]  := {};
           RuleDescr [317].op[1].nt   := ntConstant;
           RuleDescr [317].op[1].path := 1;              RuleDescr [317].op[1].calc := FALSE;

           RuleDescr [317].op[1].regs[0] := {};
           RuleDescr [317].op[2].nt   := ntConstant;
           RuleDescr [317].op[2].path := 274;              RuleDescr [317].op[2].calc := FALSE;

           RuleDescr [317].op[2].regs[0] := {};
           RuleDescr [317].op[3].nt   := ntLReg;
           RuleDescr [317].op[3].path := 530;              RuleDescr [317].op[3].calc := FALSE;

           RuleDescr [317].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [317].op[4].nt   := ntLReg;
           RuleDescr [317].op[4].path := 34;              RuleDescr [317].op[4].calc := FALSE;

           RuleDescr [317].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [317].target   := 0;
     RuleDescr [317].closuretarget := FALSE;
     RuleDescr [317].result   := 0;
     RuleDescr [317].unique := FALSE;
     RuleDescr [317].commutative := FALSE;
     RuleDescr [317].srcline := 3382;
     RuleDescr [317].scrnum := 0;
 (*   RULE 318/3382  *)
           RuleDescr [318].register := RKRegister;
     RuleDescr [318].pscarity := 4;
     RuleDescr [318].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [318].changeregs[0]  := {};
           RuleDescr [318].op[1].nt   := ntConstant;
           RuleDescr [318].op[1].path := 1;              RuleDescr [318].op[1].calc := FALSE;

           RuleDescr [318].op[1].regs[0] := {};
           RuleDescr [318].op[2].nt   := ntLReg;
           RuleDescr [318].op[2].path := 274;              RuleDescr [318].op[2].calc := FALSE;

           RuleDescr [318].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [318].op[3].nt   := ntConstant;
           RuleDescr [318].op[3].path := 530;              RuleDescr [318].op[3].calc := FALSE;

           RuleDescr [318].op[3].regs[0] := {};
           RuleDescr [318].op[4].nt   := ntLReg;
           RuleDescr [318].op[4].path := 34;              RuleDescr [318].op[4].calc := FALSE;

           RuleDescr [318].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [318].target   := 0;
     RuleDescr [318].closuretarget := FALSE;
     RuleDescr [318].result   := 0;
     RuleDescr [318].unique := FALSE;
     RuleDescr [318].commutative := FALSE;
     RuleDescr [318].srcline := 3382;
     RuleDescr [318].scrnum := 0;
 (*   RULE 319/3382  *)
           RuleDescr [319].register := RKRegister;
     RuleDescr [319].pscarity := 4;
     RuleDescr [319].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [319].changeregs[0]  := {};
           RuleDescr [319].op[1].nt   := ntConstant;
           RuleDescr [319].op[1].path := 1;              RuleDescr [319].op[1].calc := FALSE;

           RuleDescr [319].op[1].regs[0] := {};
           RuleDescr [319].op[2].nt   := ntLReg;
           RuleDescr [319].op[2].path := 18;              RuleDescr [319].op[2].calc := FALSE;

           RuleDescr [319].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [319].op[3].nt   := ntConstant;
           RuleDescr [319].op[3].path := 290;              RuleDescr [319].op[3].calc := FALSE;

           RuleDescr [319].op[3].regs[0] := {};
           RuleDescr [319].op[4].nt   := ntLReg;
           RuleDescr [319].op[4].path := 546;              RuleDescr [319].op[4].calc := FALSE;

           RuleDescr [319].op[4].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [319].target   := 0;
     RuleDescr [319].closuretarget := FALSE;
     RuleDescr [319].result   := 0;
     RuleDescr [319].unique := FALSE;
     RuleDescr [319].commutative := FALSE;
     RuleDescr [319].srcline := 3382;
     RuleDescr [319].scrnum := 0;
 (*   RULE 320/3382  *)
           RuleDescr [320].register := RKRegister;
     RuleDescr [320].pscarity := 4;
     RuleDescr [320].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [320].changeregs[0]  := {};
           RuleDescr [320].op[1].nt   := ntConstant;
           RuleDescr [320].op[1].path := 1;              RuleDescr [320].op[1].calc := FALSE;

           RuleDescr [320].op[1].regs[0] := {};
           RuleDescr [320].op[2].nt   := ntLReg;
           RuleDescr [320].op[2].path := 18;              RuleDescr [320].op[2].calc := FALSE;

           RuleDescr [320].op[2].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [320].op[3].nt   := ntLReg;
           RuleDescr [320].op[3].path := 290;              RuleDescr [320].op[3].calc := FALSE;

           RuleDescr [320].op[3].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [320].op[4].nt   := ntConstant;
           RuleDescr [320].op[4].path := 546;              RuleDescr [320].op[4].calc := FALSE;

           RuleDescr [320].op[4].regs[0] := {};
     RuleDescr [320].target   := 0;
     RuleDescr [320].closuretarget := FALSE;
     RuleDescr [320].result   := 0;
     RuleDescr [320].unique := FALSE;
     RuleDescr [320].commutative := FALSE;
     RuleDescr [320].srcline := 3382;
     RuleDescr [320].scrnum := 0;
 (*   RULE 321/3402  *)
           RuleDescr [321].register := RKRegister;
     RuleDescr [321].pscarity := 1;
     RuleDescr [321].resregs   [0]  := { (Regst1)-0};
     RuleDescr [321].changeregs[0]  := {};
           RuleDescr [321].op[1].nt   := ntFXReg;
           RuleDescr [321].op[1].path := 0;              RuleDescr [321].op[1].calc := FALSE;

           RuleDescr [321].op[1].regs[0] := { (Regst)-0};
     RuleDescr [321].target   := 0;
     RuleDescr [321].closuretarget := FALSE;
     RuleDescr [321].result   := 0;
     RuleDescr [321].unique := FALSE;
     RuleDescr [321].commutative := FALSE;
     RuleDescr [321].srcline := 3402;
     RuleDescr [321].scrnum := 0;
 (*   RULE 322/3407  *)
           RuleDescr [322].register := RKMemory;
     RuleDescr [322].pscarity := 2;
     RuleDescr [322].resregs   [0]  := {};
     RuleDescr [322].changeregs[0]  := {};
           RuleDescr [322].op[1].nt   := ntMemory;
           RuleDescr [322].op[1].path := 1;              RuleDescr [322].op[1].calc := FALSE;

           RuleDescr [322].op[1].regs[0] := {};
           RuleDescr [322].op[2].nt   := ntFXReg;
           RuleDescr [322].op[2].path := 2;              RuleDescr [322].op[2].calc := FALSE;

           RuleDescr [322].op[2].regs[0] := { (Regst)-0};
     RuleDescr [322].target   := 0;
     RuleDescr [322].closuretarget := FALSE;
     RuleDescr [322].result   := 0;
     RuleDescr [322].unique := FALSE;
     RuleDescr [322].commutative := FALSE;
     RuleDescr [322].srcline := 3407;
     RuleDescr [322].scrnum := 0;
 (*   RULE 323/3412  *)
           RuleDescr [323].register := RKAdrmode;
     RuleDescr [323].pscarity := 1;
     RuleDescr [323].resregs   [0]  := {};
     RuleDescr [323].changeregs[0]  := {};
           RuleDescr [323].op[1].nt   := ntMemory;
           RuleDescr [323].op[1].path := 1;              RuleDescr [323].op[1].calc := FALSE;

           RuleDescr [323].op[1].regs[0] := {};
     RuleDescr [323].target   := 0;
     RuleDescr [323].closuretarget := FALSE;
     RuleDescr [323].result   := 0;
     RuleDescr [323].unique := FALSE;
     RuleDescr [323].commutative := FALSE;
     RuleDescr [323].srcline := 3412;
     RuleDescr [323].scrnum := 0;
 (*   RULE 324/3418  *)
           RuleDescr [324].register := RKRegister;
     RuleDescr [324].pscarity := 1;
     RuleDescr [324].resregs   [0]  := { (Regst)-0};
     RuleDescr [324].changeregs[0]  := {};
           RuleDescr [324].op[1].nt   := ntAMem;
           RuleDescr [324].op[1].path := 0;              RuleDescr [324].op[1].calc := FALSE;

           RuleDescr [324].op[1].regs[0] := {};
     RuleDescr [324].target   := 0;
     RuleDescr [324].closuretarget := FALSE;
     RuleDescr [324].result   := 0;
     RuleDescr [324].unique := FALSE;
     RuleDescr [324].commutative := FALSE;
     RuleDescr [324].srcline := 3418;
     RuleDescr [324].scrnum := 0;
 (*   RULE 325/3423  *)
           RuleDescr [325].register := RKMemory;
     RuleDescr [325].pscarity := 2;
     RuleDescr [325].resregs   [0]  := {};
     RuleDescr [325].changeregs[0]  := {};
           RuleDescr [325].op[1].nt   := ntArgs;
           RuleDescr [325].op[1].path := 1;              RuleDescr [325].op[1].calc := FALSE;

           RuleDescr [325].op[1].regs[0] := {};
           RuleDescr [325].op[2].nt   := ntFXReg;
           RuleDescr [325].op[2].path := 2;              RuleDescr [325].op[2].calc := FALSE;

           RuleDescr [325].op[2].regs[0] := { (Regst)-0};
     RuleDescr [325].target   := 0;
     RuleDescr [325].closuretarget := FALSE;
     RuleDescr [325].result   := 0;
     RuleDescr [325].unique := FALSE;
     RuleDescr [325].commutative := FALSE;
     RuleDescr [325].srcline := 3423;
     RuleDescr [325].scrnum := 0;
 (*   RULE 326/3429  *)
           RuleDescr [326].register := RKMemory;
     RuleDescr [326].pscarity := 1;
     RuleDescr [326].resregs   [0]  := {};
     RuleDescr [326].changeregs[0]  := {};
           RuleDescr [326].op[1].nt   := ntFXReg;
           RuleDescr [326].op[1].path := 1;              RuleDescr [326].op[1].calc := FALSE;

           RuleDescr [326].op[1].regs[0] := { (Regst)-0};
     RuleDescr [326].target   := 0;
     RuleDescr [326].closuretarget := FALSE;
     RuleDescr [326].result   := 0;
     RuleDescr [326].unique := FALSE;
     RuleDescr [326].commutative := FALSE;
     RuleDescr [326].srcline := 3429;
     RuleDescr [326].scrnum := 0;
 (*   RULE 327/3435  *)
           RuleDescr [327].register := RKRegister;
     RuleDescr [327].pscarity := 1;
     RuleDescr [327].resregs   [0]  := { (Regst)-0};
     RuleDescr [327].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0,  (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0,  (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
           RuleDescr [327].op[1].nt   := ntMemory;
           RuleDescr [327].op[1].path := 1;              RuleDescr [327].op[1].calc := FALSE;

           RuleDescr [327].op[1].regs[0] := {};
     RuleDescr [327].target   := 0;
     RuleDescr [327].closuretarget := FALSE;
     RuleDescr [327].result   := 0;
     RuleDescr [327].unique := FALSE;
     RuleDescr [327].commutative := FALSE;
     RuleDescr [327].srcline := 3435;
     RuleDescr [327].scrnum := 0;
 (*   RULE 328/3440  *)
           RuleDescr [328].register := RKRegister;
     RuleDescr [328].pscarity := 1;
     RuleDescr [328].resregs   [0]  := { (Regst)-0};
     RuleDescr [328].changeregs[0]  := {};
           RuleDescr [328].op[1].nt   := ntFXReg;
           RuleDescr [328].op[1].path := 1;              RuleDescr [328].op[1].calc := FALSE;

           RuleDescr [328].op[1].regs[0] := { (Regst)-0};
     RuleDescr [328].target   := 1;
     RuleDescr [328].closuretarget := FALSE;
     RuleDescr [328].result   := 0;
     RuleDescr [328].unique := FALSE;
     RuleDescr [328].commutative := FALSE;
     RuleDescr [328].srcline := 3440;
     RuleDescr [328].scrnum := 0;
 (*   RULE 329/3445  *)
           RuleDescr [329].register := RKRegister;
     RuleDescr [329].pscarity := 2;
     RuleDescr [329].resregs   [0]  := { (Regst)-0};
     RuleDescr [329].changeregs[0]  := {};
           RuleDescr [329].op[1].nt   := ntFXReg;
           RuleDescr [329].op[1].path := 1;              RuleDescr [329].op[1].calc := FALSE;

           RuleDescr [329].op[1].regs[0] := { (Regst)-0};
           RuleDescr [329].op[2].nt   := ntFYReg;
           RuleDescr [329].op[2].path := 2;              RuleDescr [329].op[2].calc := FALSE;

           RuleDescr [329].op[2].regs[0] := { (Regst1)-0};
     RuleDescr [329].target   := 1;
     RuleDescr [329].closuretarget := FALSE;
     RuleDescr [329].result   := 0;
     RuleDescr [329].unique := FALSE;
     RuleDescr [329].commutative := TRUE;
     RuleDescr [329].srcline := 3445;
     RuleDescr [329].scrnum := 0;
 (*   RULE 330/3445  *)
           RuleDescr [330].register := RKRegister;
     RuleDescr [330].pscarity := 2;
     RuleDescr [330].resregs   [0]  := { (Regst)-0};
     RuleDescr [330].changeregs[0]  := {};
           RuleDescr [330].op[1].nt   := ntFYReg;
           RuleDescr [330].op[1].path := 1;              RuleDescr [330].op[1].calc := FALSE;

           RuleDescr [330].op[1].regs[0] := { (Regst1)-0};
           RuleDescr [330].op[2].nt   := ntFXReg;
           RuleDescr [330].op[2].path := 2;              RuleDescr [330].op[2].calc := FALSE;

           RuleDescr [330].op[2].regs[0] := { (Regst)-0};
     RuleDescr [330].target   := 2;
     RuleDescr [330].closuretarget := FALSE;
     RuleDescr [330].result   := 0;
     RuleDescr [330].unique := FALSE;
     RuleDescr [330].commutative := TRUE;
     RuleDescr [330].srcline := 3445;
     RuleDescr [330].scrnum := 0;
 (*   RULE 331/3451  *)
           RuleDescr [331].register := RKRegister;
     RuleDescr [331].pscarity := 2;
     RuleDescr [331].resregs   [0]  := { (Regst)-0};
     RuleDescr [331].changeregs[0]  := {};
           RuleDescr [331].op[1].nt   := ntFYReg;
           RuleDescr [331].op[1].path := 1;              RuleDescr [331].op[1].calc := FALSE;

           RuleDescr [331].op[1].regs[0] := { (Regst1)-0};
           RuleDescr [331].op[2].nt   := ntFXReg;
           RuleDescr [331].op[2].path := 2;              RuleDescr [331].op[2].calc := FALSE;

           RuleDescr [331].op[2].regs[0] := { (Regst)-0};
     RuleDescr [331].target   := 2;
     RuleDescr [331].closuretarget := FALSE;
     RuleDescr [331].result   := 0;
     RuleDescr [331].unique := FALSE;
     RuleDescr [331].commutative := FALSE;
     RuleDescr [331].srcline := 3451;
     RuleDescr [331].scrnum := 0;
 (*   RULE 332/3456  *)
           RuleDescr [332].register := RKRegister;
     RuleDescr [332].pscarity := 2;
     RuleDescr [332].resregs   [0]  := { (Regst)-0};
     RuleDescr [332].changeregs[0]  := {};
           RuleDescr [332].op[1].nt   := ntFXReg;
           RuleDescr [332].op[1].path := 1;              RuleDescr [332].op[1].calc := FALSE;

           RuleDescr [332].op[1].regs[0] := { (Regst)-0};
           RuleDescr [332].op[2].nt   := ntFYReg;
           RuleDescr [332].op[2].path := 2;              RuleDescr [332].op[2].calc := FALSE;

           RuleDescr [332].op[2].regs[0] := { (Regst1)-0};
     RuleDescr [332].target   := 1;
     RuleDescr [332].closuretarget := FALSE;
     RuleDescr [332].result   := 0;
     RuleDescr [332].unique := FALSE;
     RuleDescr [332].commutative := FALSE;
     RuleDescr [332].srcline := 3456;
     RuleDescr [332].scrnum := 0;
 (*   RULE 333/3462  *)
           RuleDescr [333].register := RKMemory;
     RuleDescr [333].pscarity := 3;
     RuleDescr [333].resregs   [0]  := {};
     RuleDescr [333].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [333].op[1].nt   := ntLab;
           RuleDescr [333].op[1].path := 17;              RuleDescr [333].op[1].calc := FALSE;

           RuleDescr [333].op[1].regs[0] := {};
           RuleDescr [333].op[2].nt   := ntFXReg;
           RuleDescr [333].op[2].path := 33;              RuleDescr [333].op[2].calc := FALSE;

           RuleDescr [333].op[2].regs[0] := { (Regst)-0};
           RuleDescr [333].op[3].nt   := ntFYReg;
           RuleDescr [333].op[3].path := 49;              RuleDescr [333].op[3].calc := FALSE;

           RuleDescr [333].op[3].regs[0] := { (Regst1)-0};
     RuleDescr [333].target   := 0;
     RuleDescr [333].closuretarget := FALSE;
     RuleDescr [333].result   := 0;
     RuleDescr [333].unique := FALSE;
     RuleDescr [333].commutative := FALSE;
     RuleDescr [333].srcline := 3462;
     RuleDescr [333].scrnum := 0;
 (*   RULE 334/3474  *)
           RuleDescr [334].register := RKMemory;
     RuleDescr [334].pscarity := 3;
     RuleDescr [334].resregs   [0]  := {};
     RuleDescr [334].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [334].op[1].nt   := ntLab;
           RuleDescr [334].op[1].path := 17;              RuleDescr [334].op[1].calc := FALSE;

           RuleDescr [334].op[1].regs[0] := {};
           RuleDescr [334].op[2].nt   := ntFYReg;
           RuleDescr [334].op[2].path := 33;              RuleDescr [334].op[2].calc := FALSE;

           RuleDescr [334].op[2].regs[0] := { (Regst1)-0};
           RuleDescr [334].op[3].nt   := ntFXReg;
           RuleDescr [334].op[3].path := 49;              RuleDescr [334].op[3].calc := FALSE;

           RuleDescr [334].op[3].regs[0] := { (Regst)-0};
     RuleDescr [334].target   := 0;
     RuleDescr [334].closuretarget := FALSE;
     RuleDescr [334].result   := 0;
     RuleDescr [334].unique := FALSE;
     RuleDescr [334].commutative := FALSE;
     RuleDescr [334].srcline := 3474;
     RuleDescr [334].scrnum := 0;
 (*   RULE 335/3487  *)
           RuleDescr [335].register := RKRegister;
     RuleDescr [335].pscarity := 3;
     RuleDescr [335].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [335].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [335].op[1].nt   := ntLab;
           RuleDescr [335].op[1].path := 273;              RuleDescr [335].op[1].calc := FALSE;

           RuleDescr [335].op[1].regs[0] := {};
           RuleDescr [335].op[2].nt   := ntFXReg;
           RuleDescr [335].op[2].path := 529;              RuleDescr [335].op[2].calc := FALSE;

           RuleDescr [335].op[2].regs[0] := { (Regst)-0};
           RuleDescr [335].op[3].nt   := ntFYReg;
           RuleDescr [335].op[3].path := 785;              RuleDescr [335].op[3].calc := FALSE;

           RuleDescr [335].op[3].regs[0] := { (Regst1)-0};
     RuleDescr [335].target   := 0;
     RuleDescr [335].closuretarget := FALSE;
     RuleDescr [335].result   := 0;
     RuleDescr [335].unique := FALSE;
     RuleDescr [335].commutative := FALSE;
     RuleDescr [335].srcline := 3487;
     RuleDescr [335].scrnum := 0;
 (*   RULE 336/3499  *)
           RuleDescr [336].register := RKRegister;
     RuleDescr [336].pscarity := 3;
     RuleDescr [336].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [336].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [336].op[1].nt   := ntLab;
           RuleDescr [336].op[1].path := 273;              RuleDescr [336].op[1].calc := FALSE;

           RuleDescr [336].op[1].regs[0] := {};
           RuleDescr [336].op[2].nt   := ntFYReg;
           RuleDescr [336].op[2].path := 529;              RuleDescr [336].op[2].calc := FALSE;

           RuleDescr [336].op[2].regs[0] := { (Regst1)-0};
           RuleDescr [336].op[3].nt   := ntFXReg;
           RuleDescr [336].op[3].path := 785;              RuleDescr [336].op[3].calc := FALSE;

           RuleDescr [336].op[3].regs[0] := { (Regst)-0};
     RuleDescr [336].target   := 0;
     RuleDescr [336].closuretarget := FALSE;
     RuleDescr [336].result   := 0;
     RuleDescr [336].unique := FALSE;
     RuleDescr [336].commutative := FALSE;
     RuleDescr [336].srcline := 3499;
     RuleDescr [336].scrnum := 0;
 (*   RULE 337/3512  *)
           RuleDescr [337].register := RKRegister;
     RuleDescr [337].pscarity := 1;
     RuleDescr [337].resregs   [0]  := { (Regst)-0};
     RuleDescr [337].changeregs[0]  := {};
           RuleDescr [337].op[1].nt   := ntFXReg;
           RuleDescr [337].op[1].path := 1;              RuleDescr [337].op[1].calc := FALSE;

           RuleDescr [337].op[1].regs[0] := { (Regst)-0};
     RuleDescr [337].target   := 1;
     RuleDescr [337].closuretarget := FALSE;
     RuleDescr [337].result   := 0;
     RuleDescr [337].unique := FALSE;
     RuleDescr [337].commutative := FALSE;
     RuleDescr [337].srcline := 3512;
     RuleDescr [337].scrnum := 0;
 (*   RULE 338/3517  *)
           RuleDescr [338].register := RKRegister;
     RuleDescr [338].pscarity := 1;
     RuleDescr [338].resregs   [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [338].changeregs[0]  := {};
           RuleDescr [338].op[1].nt   := ntFXReg;
           RuleDescr [338].op[1].path := 1;              RuleDescr [338].op[1].calc := FALSE;

           RuleDescr [338].op[1].regs[0] := { (Regst)-0};
     RuleDescr [338].target   := 0;
     RuleDescr [338].closuretarget := FALSE;
     RuleDescr [338].result   := 0;
     RuleDescr [338].unique := FALSE;
     RuleDescr [338].commutative := FALSE;
     RuleDescr [338].srcline := 3517;
     RuleDescr [338].scrnum := 0;
 (*   RULE 339/3524  *)
           RuleDescr [339].register := RKRegister;
     RuleDescr [339].pscarity := 1;
     RuleDescr [339].resregs   [0]  := { (Regst)-0};
     RuleDescr [339].changeregs[0]  := {};
           RuleDescr [339].op[1].nt   := ntBReg;
           RuleDescr [339].op[1].path := 1;              RuleDescr [339].op[1].calc := FALSE;

           RuleDescr [339].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [339].target   := 0;
     RuleDescr [339].closuretarget := FALSE;
     RuleDescr [339].result   := 0;
     RuleDescr [339].unique := FALSE;
     RuleDescr [339].commutative := FALSE;
     RuleDescr [339].srcline := 3524;
     RuleDescr [339].scrnum := 1;
     RuleDescr [339].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 340/3532  *)
           RuleDescr [340].register := RKRegister;
     RuleDescr [340].pscarity := 1;
     RuleDescr [340].resregs   [0]  := { (Regst)-0};
     RuleDescr [340].changeregs[0]  := {};
           RuleDescr [340].op[1].nt   := ntWReg;
           RuleDescr [340].op[1].path := 1;              RuleDescr [340].op[1].calc := FALSE;

           RuleDescr [340].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [340].target   := 0;
     RuleDescr [340].closuretarget := FALSE;
     RuleDescr [340].result   := 0;
     RuleDescr [340].unique := FALSE;
     RuleDescr [340].commutative := FALSE;
     RuleDescr [340].srcline := 3532;
     RuleDescr [340].scrnum := 0;
 (*   RULE 341/3538  *)
           RuleDescr [341].register := RKRegister;
     RuleDescr [341].pscarity := 1;
     RuleDescr [341].resregs   [0]  := { (Regst)-0};
     RuleDescr [341].changeregs[0]  := {};
           RuleDescr [341].op[1].nt   := ntLReg;
           RuleDescr [341].op[1].path := 1;              RuleDescr [341].op[1].calc := FALSE;

           RuleDescr [341].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [341].target   := 0;
     RuleDescr [341].closuretarget := FALSE;
     RuleDescr [341].result   := 0;
     RuleDescr [341].unique := FALSE;
     RuleDescr [341].commutative := FALSE;
     RuleDescr [341].srcline := 3538;
     RuleDescr [341].scrnum := 0;
 (*   RULE 342/3545  *)
           RuleDescr [342].register := RKRegister;
     RuleDescr [342].pscarity := 1;
     RuleDescr [342].resregs   [0]  := { (Regst)-0};
     RuleDescr [342].changeregs[0]  := {};
           RuleDescr [342].op[1].nt   := ntBReg;
           RuleDescr [342].op[1].path := 1;              RuleDescr [342].op[1].calc := FALSE;

           RuleDescr [342].op[1].regs[0] := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [342].target   := 0;
     RuleDescr [342].closuretarget := FALSE;
     RuleDescr [342].result   := 0;
     RuleDescr [342].unique := FALSE;
     RuleDescr [342].commutative := FALSE;
     RuleDescr [342].srcline := 3545;
     RuleDescr [342].scrnum := 1;
     RuleDescr [342].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 343/3553  *)
           RuleDescr [343].register := RKRegister;
     RuleDescr [343].pscarity := 1;
     RuleDescr [343].resregs   [0]  := { (Regst)-0};
     RuleDescr [343].changeregs[0]  := {};
           RuleDescr [343].op[1].nt   := ntWReg;
           RuleDescr [343].op[1].path := 1;              RuleDescr [343].op[1].calc := FALSE;

           RuleDescr [343].op[1].regs[0] := { (Regax)-0,  (Regbx)-0,  (Regcx)-0,  (Regdx)-0,  (Regsi)-0,  (Regdi)-0};
     RuleDescr [343].target   := 0;
     RuleDescr [343].closuretarget := FALSE;
     RuleDescr [343].result   := 0;
     RuleDescr [343].unique := FALSE;
     RuleDescr [343].commutative := FALSE;
     RuleDescr [343].srcline := 3553;
     RuleDescr [343].scrnum := 1;
     RuleDescr [343].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 344/3561  *)
           RuleDescr [344].register := RKRegister;
     RuleDescr [344].pscarity := 1;
     RuleDescr [344].resregs   [0]  := { (Regst)-0};
     RuleDescr [344].changeregs[0]  := {};
           RuleDescr [344].op[1].nt   := ntLReg;
           RuleDescr [344].op[1].path := 1;              RuleDescr [344].op[1].calc := FALSE;

           RuleDescr [344].op[1].regs[0] := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
     RuleDescr [344].target   := 0;
     RuleDescr [344].closuretarget := FALSE;
     RuleDescr [344].result   := 0;
     RuleDescr [344].unique := FALSE;
     RuleDescr [344].commutative := FALSE;
     RuleDescr [344].srcline := 3561;
     RuleDescr [344].scrnum := 0;
 (*   RULE 345/3568  *)
           RuleDescr [345].register := RKRegister;
     RuleDescr [345].pscarity := 1;
     RuleDescr [345].resregs   [0]  := { (Regst)-0};
     RuleDescr [345].changeregs[0]  := {};
           RuleDescr [345].op[1].nt   := ntFXReg;
           RuleDescr [345].op[1].path := 1;              RuleDescr [345].op[1].calc := FALSE;

           RuleDescr [345].op[1].regs[0] := { (Regst)-0};
     RuleDescr [345].target   := 1;
     RuleDescr [345].closuretarget := FALSE;
     RuleDescr [345].result   := 0;
     RuleDescr [345].unique := FALSE;
     RuleDescr [345].commutative := FALSE;
     RuleDescr [345].srcline := 3568;
     RuleDescr [345].scrnum := 0;
 (*   RULE 346/3571  *)
           RuleDescr [346].register := RKRegister;
     RuleDescr [346].pscarity := 1;
     RuleDescr [346].resregs   [0]  := { (Regst)-0};
     RuleDescr [346].changeregs[0]  := {};
           RuleDescr [346].op[1].nt   := ntFXReg;
           RuleDescr [346].op[1].path := 1;              RuleDescr [346].op[1].calc := FALSE;

           RuleDescr [346].op[1].regs[0] := { (Regst)-0};
     RuleDescr [346].target   := 1;
     RuleDescr [346].closuretarget := FALSE;
     RuleDescr [346].result   := 0;
     RuleDescr [346].unique := FALSE;
     RuleDescr [346].commutative := FALSE;
     RuleDescr [346].srcline := 3571;
     RuleDescr [346].scrnum := 0;
 (*   RULE 347/3582  *)
           RuleDescr [347].register := RKMemory;
     RuleDescr [347].pscarity := 2;
     RuleDescr [347].resregs   [0]  := {};
     RuleDescr [347].changeregs[0]  := {};
           RuleDescr [347].op[1].nt   := ntMemory;
           RuleDescr [347].op[1].path := 1;              RuleDescr [347].op[1].calc := FALSE;

           RuleDescr [347].op[1].regs[0] := {};
           RuleDescr [347].op[2].nt   := ntMemory;
           RuleDescr [347].op[2].path := 18;              RuleDescr [347].op[2].calc := FALSE;

           RuleDescr [347].op[2].regs[0] := {};
     RuleDescr [347].target   := 0;
     RuleDescr [347].closuretarget := FALSE;
     RuleDescr [347].result   := 0;
     RuleDescr [347].unique := FALSE;
     RuleDescr [347].commutative := FALSE;
     RuleDescr [347].srcline := 3582;
     RuleDescr [347].scrnum := 1;
     RuleDescr [347].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
 (*   RULE 348/3595  *)
           RuleDescr [348].register := RKRegister;
     RuleDescr [348].pscarity := 2;
     RuleDescr [348].resregs   [0]  := { (Regst)-0};
     RuleDescr [348].changeregs[0]  := {};
           RuleDescr [348].op[1].nt   := ntFXReg;
           RuleDescr [348].op[1].path := 1;              RuleDescr [348].op[1].calc := FALSE;

           RuleDescr [348].op[1].regs[0] := { (Regst)-0};
           RuleDescr [348].op[2].nt   := ntAMem;
           RuleDescr [348].op[2].path := 2;              RuleDescr [348].op[2].calc := FALSE;

           RuleDescr [348].op[2].regs[0] := {};
     RuleDescr [348].target   := 1;
     RuleDescr [348].closuretarget := FALSE;
     RuleDescr [348].result   := 0;
     RuleDescr [348].unique := FALSE;
     RuleDescr [348].commutative := TRUE;
     RuleDescr [348].srcline := 3595;
     RuleDescr [348].scrnum := 0;
 (*   RULE 349/3595  *)
           RuleDescr [349].register := RKRegister;
     RuleDescr [349].pscarity := 2;
     RuleDescr [349].resregs   [0]  := { (Regst)-0};
     RuleDescr [349].changeregs[0]  := {};
           RuleDescr [349].op[1].nt   := ntAMem;
           RuleDescr [349].op[1].path := 1;              RuleDescr [349].op[1].calc := FALSE;

           RuleDescr [349].op[1].regs[0] := {};
           RuleDescr [349].op[2].nt   := ntFXReg;
           RuleDescr [349].op[2].path := 2;              RuleDescr [349].op[2].calc := FALSE;

           RuleDescr [349].op[2].regs[0] := { (Regst)-0};
     RuleDescr [349].target   := 2;
     RuleDescr [349].closuretarget := FALSE;
     RuleDescr [349].result   := 0;
     RuleDescr [349].unique := FALSE;
     RuleDescr [349].commutative := TRUE;
     RuleDescr [349].srcline := 3595;
     RuleDescr [349].scrnum := 0;
 (*   RULE 350/3600  *)
           RuleDescr [350].register := RKRegister;
     RuleDescr [350].pscarity := 2;
     RuleDescr [350].resregs   [0]  := { (Regst)-0};
     RuleDescr [350].changeregs[0]  := {};
           RuleDescr [350].op[1].nt   := ntAMem;
           RuleDescr [350].op[1].path := 1;              RuleDescr [350].op[1].calc := FALSE;

           RuleDescr [350].op[1].regs[0] := {};
           RuleDescr [350].op[2].nt   := ntFXReg;
           RuleDescr [350].op[2].path := 2;              RuleDescr [350].op[2].calc := FALSE;

           RuleDescr [350].op[2].regs[0] := { (Regst)-0};
     RuleDescr [350].target   := 2;
     RuleDescr [350].closuretarget := FALSE;
     RuleDescr [350].result   := 0;
     RuleDescr [350].unique := FALSE;
     RuleDescr [350].commutative := FALSE;
     RuleDescr [350].srcline := 3600;
     RuleDescr [350].scrnum := 0;
 (*   RULE 351/3605  *)
           RuleDescr [351].register := RKRegister;
     RuleDescr [351].pscarity := 2;
     RuleDescr [351].resregs   [0]  := { (Regst)-0};
     RuleDescr [351].changeregs[0]  := {};
           RuleDescr [351].op[1].nt   := ntFXReg;
           RuleDescr [351].op[1].path := 1;              RuleDescr [351].op[1].calc := FALSE;

           RuleDescr [351].op[1].regs[0] := { (Regst)-0};
           RuleDescr [351].op[2].nt   := ntAMem;
           RuleDescr [351].op[2].path := 2;              RuleDescr [351].op[2].calc := FALSE;

           RuleDescr [351].op[2].regs[0] := {};
     RuleDescr [351].target   := 1;
     RuleDescr [351].closuretarget := FALSE;
     RuleDescr [351].result   := 0;
     RuleDescr [351].unique := FALSE;
     RuleDescr [351].commutative := FALSE;
     RuleDescr [351].srcline := 3605;
     RuleDescr [351].scrnum := 0;
 (*   RULE 352/3611  *)
           RuleDescr [352].register := RKRegister;
     RuleDescr [352].pscarity := 2;
     RuleDescr [352].resregs   [0]  := { (Regst)-0};
     RuleDescr [352].changeregs[0]  := {};
           RuleDescr [352].op[1].nt   := ntFXReg;
           RuleDescr [352].op[1].path := 1;              RuleDescr [352].op[1].calc := FALSE;

           RuleDescr [352].op[1].regs[0] := { (Regst)-0};
           RuleDescr [352].op[2].nt   := ntAMem;
           RuleDescr [352].op[2].path := 18;              RuleDescr [352].op[2].calc := FALSE;

           RuleDescr [352].op[2].regs[0] := {};
     RuleDescr [352].target   := 1;
     RuleDescr [352].closuretarget := FALSE;
     RuleDescr [352].result   := 0;
     RuleDescr [352].unique := FALSE;
     RuleDescr [352].commutative := FALSE;
     RuleDescr [352].srcline := 3611;
     RuleDescr [352].scrnum := 0;
 (*   RULE 353/3611  *)
           RuleDescr [353].register := RKRegister;
     RuleDescr [353].pscarity := 2;
     RuleDescr [353].resregs   [0]  := { (Regst)-0};
     RuleDescr [353].changeregs[0]  := {};
           RuleDescr [353].op[1].nt   := ntAMem;
           RuleDescr [353].op[1].path := 17;              RuleDescr [353].op[1].calc := FALSE;

           RuleDescr [353].op[1].regs[0] := {};
           RuleDescr [353].op[2].nt   := ntFXReg;
           RuleDescr [353].op[2].path := 2;              RuleDescr [353].op[2].calc := FALSE;

           RuleDescr [353].op[2].regs[0] := { (Regst)-0};
     RuleDescr [353].target   := 2;
     RuleDescr [353].closuretarget := FALSE;
     RuleDescr [353].result   := 0;
     RuleDescr [353].unique := FALSE;
     RuleDescr [353].commutative := FALSE;
     RuleDescr [353].srcline := 3611;
     RuleDescr [353].scrnum := 0;
 (*   RULE 354/3621  *)
           RuleDescr [354].register := RKRegister;
     RuleDescr [354].pscarity := 2;
     RuleDescr [354].resregs   [0]  := { (Regst)-0};
     RuleDescr [354].changeregs[0]  := {};
           RuleDescr [354].op[1].nt   := ntAMem;
           RuleDescr [354].op[1].path := 17;              RuleDescr [354].op[1].calc := FALSE;

           RuleDescr [354].op[1].regs[0] := {};
           RuleDescr [354].op[2].nt   := ntFXReg;
           RuleDescr [354].op[2].path := 2;              RuleDescr [354].op[2].calc := FALSE;

           RuleDescr [354].op[2].regs[0] := { (Regst)-0};
     RuleDescr [354].target   := 2;
     RuleDescr [354].closuretarget := FALSE;
     RuleDescr [354].result   := 0;
     RuleDescr [354].unique := FALSE;
     RuleDescr [354].commutative := FALSE;
     RuleDescr [354].srcline := 3621;
     RuleDescr [354].scrnum := 0;
 (*   RULE 355/3631  *)
           RuleDescr [355].register := RKRegister;
     RuleDescr [355].pscarity := 2;
     RuleDescr [355].resregs   [0]  := { (Regst)-0};
     RuleDescr [355].changeregs[0]  := {};
           RuleDescr [355].op[1].nt   := ntFXReg;
           RuleDescr [355].op[1].path := 1;              RuleDescr [355].op[1].calc := FALSE;

           RuleDescr [355].op[1].regs[0] := { (Regst)-0};
           RuleDescr [355].op[2].nt   := ntAMem;
           RuleDescr [355].op[2].path := 18;              RuleDescr [355].op[2].calc := FALSE;

           RuleDescr [355].op[2].regs[0] := {};
     RuleDescr [355].target   := 1;
     RuleDescr [355].closuretarget := FALSE;
     RuleDescr [355].result   := 0;
     RuleDescr [355].unique := FALSE;
     RuleDescr [355].commutative := FALSE;
     RuleDescr [355].srcline := 3631;
     RuleDescr [355].scrnum := 0;
 (*   RULE 356/3642  *)
           RuleDescr [356].register := RKMemory;
     RuleDescr [356].pscarity := 3;
     RuleDescr [356].resregs   [0]  := {};
     RuleDescr [356].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [356].op[1].nt   := ntLab;
           RuleDescr [356].op[1].path := 17;              RuleDescr [356].op[1].calc := FALSE;

           RuleDescr [356].op[1].regs[0] := {};
           RuleDescr [356].op[2].nt   := ntFXReg;
           RuleDescr [356].op[2].path := 33;              RuleDescr [356].op[2].calc := FALSE;

           RuleDescr [356].op[2].regs[0] := { (Regst)-0};
           RuleDescr [356].op[3].nt   := ntAMem;
           RuleDescr [356].op[3].path := 49;              RuleDescr [356].op[3].calc := FALSE;

           RuleDescr [356].op[3].regs[0] := {};
     RuleDescr [356].target   := 0;
     RuleDescr [356].closuretarget := FALSE;
     RuleDescr [356].result   := 0;
     RuleDescr [356].unique := FALSE;
     RuleDescr [356].commutative := FALSE;
     RuleDescr [356].srcline := 3642;
     RuleDescr [356].scrnum := 0;
 (*   RULE 357/3654  *)
           RuleDescr [357].register := RKMemory;
     RuleDescr [357].pscarity := 3;
     RuleDescr [357].resregs   [0]  := {};
     RuleDescr [357].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [357].op[1].nt   := ntLab;
           RuleDescr [357].op[1].path := 17;              RuleDescr [357].op[1].calc := FALSE;

           RuleDescr [357].op[1].regs[0] := {};
           RuleDescr [357].op[2].nt   := ntAMem;
           RuleDescr [357].op[2].path := 33;              RuleDescr [357].op[2].calc := FALSE;

           RuleDescr [357].op[2].regs[0] := {};
           RuleDescr [357].op[3].nt   := ntFXReg;
           RuleDescr [357].op[3].path := 49;              RuleDescr [357].op[3].calc := FALSE;

           RuleDescr [357].op[3].regs[0] := { (Regst)-0};
     RuleDescr [357].target   := 0;
     RuleDescr [357].closuretarget := FALSE;
     RuleDescr [357].result   := 0;
     RuleDescr [357].unique := FALSE;
     RuleDescr [357].commutative := FALSE;
     RuleDescr [357].srcline := 3654;
     RuleDescr [357].scrnum := 0;
 (*   RULE 358/3667  *)
           RuleDescr [358].register := RKRegister;
     RuleDescr [358].pscarity := 3;
     RuleDescr [358].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [358].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [358].op[1].nt   := ntLab;
           RuleDescr [358].op[1].path := 273;              RuleDescr [358].op[1].calc := FALSE;

           RuleDescr [358].op[1].regs[0] := {};
           RuleDescr [358].op[2].nt   := ntFXReg;
           RuleDescr [358].op[2].path := 529;              RuleDescr [358].op[2].calc := FALSE;

           RuleDescr [358].op[2].regs[0] := { (Regst)-0};
           RuleDescr [358].op[3].nt   := ntAMem;
           RuleDescr [358].op[3].path := 785;              RuleDescr [358].op[3].calc := FALSE;

           RuleDescr [358].op[3].regs[0] := {};
     RuleDescr [358].target   := 0;
     RuleDescr [358].closuretarget := FALSE;
     RuleDescr [358].result   := 0;
     RuleDescr [358].unique := FALSE;
     RuleDescr [358].commutative := FALSE;
     RuleDescr [358].srcline := 3667;
     RuleDescr [358].scrnum := 0;
 (*   RULE 359/3679  *)
           RuleDescr [359].register := RKRegister;
     RuleDescr [359].pscarity := 3;
     RuleDescr [359].resregs   [0]  := { (Regal)-0,  (Regah)-0,  (Regbl)-0,  (Regbh)-0,  (Regcl)-0,  (Regch)-0,  (Regdl)-0,  (Regdh)-0};
     RuleDescr [359].changeregs[0]  := { (Regal)-0,  (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [359].op[1].nt   := ntLab;
           RuleDescr [359].op[1].path := 273;              RuleDescr [359].op[1].calc := FALSE;

           RuleDescr [359].op[1].regs[0] := {};
           RuleDescr [359].op[2].nt   := ntAMem;
           RuleDescr [359].op[2].path := 529;              RuleDescr [359].op[2].calc := FALSE;

           RuleDescr [359].op[2].regs[0] := {};
           RuleDescr [359].op[3].nt   := ntFXReg;
           RuleDescr [359].op[3].path := 785;              RuleDescr [359].op[3].calc := FALSE;

           RuleDescr [359].op[3].regs[0] := { (Regst)-0};
     RuleDescr [359].target   := 0;
     RuleDescr [359].closuretarget := FALSE;
     RuleDescr [359].result   := 0;
     RuleDescr [359].unique := FALSE;
     RuleDescr [359].commutative := FALSE;
     RuleDescr [359].srcline := 3679;
     RuleDescr [359].scrnum := 0;
 (*   RULE 360/3692  *)
           RuleDescr [360].register := RKRegister;
     RuleDescr [360].pscarity := 1;
     RuleDescr [360].resregs   [0]  := { (Regst)-0};
     RuleDescr [360].changeregs[0]  := { (Regah)-0,  (Regax)-0,  (Regeax)-0};
           RuleDescr [360].op[1].nt   := ntBReg;
           RuleDescr [360].op[1].path := 1;              RuleDescr [360].op[1].calc := FALSE;

           RuleDescr [360].op[1].regs[0] := { (Regal)-0};
     RuleDescr [360].target   := 0;
     RuleDescr [360].closuretarget := FALSE;
     RuleDescr [360].result   := 0;
     RuleDescr [360].unique := FALSE;
     RuleDescr [360].commutative := FALSE;
     RuleDescr [360].srcline := 3692;
     RuleDescr [360].scrnum := 0;
 (*   RULE 361/3700  *)
           RuleDescr [361].register := RKRegister;
     RuleDescr [361].pscarity := 1;
     RuleDescr [361].resregs   [0]  := { (Regst)-0};
     RuleDescr [361].changeregs[0]  := {};
           RuleDescr [361].op[1].nt   := ntAMem;
           RuleDescr [361].op[1].path := 1;              RuleDescr [361].op[1].calc := FALSE;

           RuleDescr [361].op[1].regs[0] := {};
     RuleDescr [361].target   := 0;
     RuleDescr [361].closuretarget := FALSE;
     RuleDescr [361].result   := 0;
     RuleDescr [361].unique := FALSE;
     RuleDescr [361].commutative := FALSE;
     RuleDescr [361].srcline := 3700;
     RuleDescr [361].scrnum := 1;
     RuleDescr [361].scrrs [1] [0]  := { (Regeax)-0,  (Regebx)-0,  (Regecx)-0,  (Regedx)-0,  (Regesi)-0,  (Regedi)-0};
(******* empty insertion IpGcgTabInit *******)
 END GcgTab.

