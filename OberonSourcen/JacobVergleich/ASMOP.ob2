MODULE ASMOP;

TYPE  tOper* = INTEGER;
CONST NoOper*            = 0;
      asciz*             = 1;
      byte*              = 2;
      long*              = 3;
      comm*              = 4;
      align*             = 5;
      data*              = 6;
      text*              = 7;
      globl*             = 8;
      label*             = 9;
      labelDef*          = 10;
      nop*               = 11;
      add*               = 12;
      and*               = 13;
      bound*             = 14;
      bt*                = 15;
      btr*               = 16;
      bts*               = 17;
      call*              = 18;
      cbw*               = 19;
      cdq*               = 20;
      cld*               = 21;
      cwd*               = 22;
      cwde*              = 23;
      cmp*               = 24;
      cmpsb*             = 25;
      dec*               = 26;
      enter*             = 27;
      idiv*              = 28;
      imul*              = 29;
      inc*               = 30;
      jmp*               = 31;
      jcxz*              = 32;
      jecxz*             = 33;
      ja*                = 34;
      jae*               = 35;
      jb*                = 36;
      jbe*               = 37;
      jc*                = 38;
      je*                = 39;
      jg*                = 40;
      jge*               = 41;
      jl*                = 42;
      jle*               = 43;
      jo*                = 44;
      jp*                = 45;
      js*                = 46;
      jz*                = 47;
      jna*               = 48;
      jnae*              = 49;
      jnb*               = 50;
      jnbe*              = 51;
      jnc*               = 52;
      jne*               = 53;
      jng*               = 54;
      jnge*              = 55;
      jnl*               = 56;
      jnle*              = 57;
      jno*               = 58;
      jnp*               = 59;
      jns*               = 60;
      jnz*               = 61;
      seta*              = 62;
      setae*             = 63;
      setb*              = 64;
      setbe*             = 65;
      setc*              = 66;
      sete*              = 67;
      setg*              = 68;
      setge*             = 69;
      setl*              = 70;
      setle*             = 71;
      seto*              = 72;
      setp*              = 73;
      sets*              = 74;
      setz*              = 75;
      setna*             = 76;
      setnae*            = 77;
      setnb*             = 78;
      setnbe*            = 79;
      setnc*             = 80;
      setne*             = 81;
      setng*             = 82;
      setnge*            = 83;
      setnl*             = 84;
      setnle*            = 85;
      setno*             = 86;
      setnp*             = 87;
      setns*             = 88;
      setnz*             = 89;
      lea*               = 90;
      leave*             = 91;
      lods*              = 92;
      loop*              = 93;
      loopnz*            = 94;
      mov*               = 95;
      movs*              = 96;
      movsbw*            = 97;
      movsbl*            = 98;
      movswl*            = 99;
      movzbl*            = 100;
      movzbw*            = 101;
      movzwl*            = 102;
      neg*               = 103;
      not*               = 104;
      or*                = 105;
      popl*              = 106;
      pushl*             = 107;
      popf*              = 108;
      pushf*             = 109;
      repz*              = 110;
      ret*               = 111;
      sahf*              = 112;
      stos*              = 113;
      sub*               = 114;
      test*              = 115;
      xor*               = 116;
      xchg*              = 117;
      rcl*               = 118;
      rcr*               = 119;
      rol*               = 120;
      ror*               = 121;
      sal*               = 122;
      sar*               = 123;
      shl*               = 124;
      shr*               = 125;
      shld*              = 126;
      shrd*              = 127;
      fstsw*             = 128;
      fdecstp*           = 129;
      fincstp*           = 130;
      fxch*              = 131;
      fld*               = 132;
      fild*              = 133;
      fst*               = 134;
      fist*              = 135;
      fadd*              = 136;
      fmul*              = 137;
      fdiv*              = 138;
      fdivr*             = 139;
      fsub*              = 140;
      fsubr*             = 141;
      fstp*              = 142;
      fistp*             = 143;
      faddp*             = 144;
      fmulp*             = 145;
      fdivp*             = 146;
      fdivrp*            = 147;
      fsubp*             = 148;
      fsubrp*            = 149;
      fiadd*             = 150;
      fimul*             = 151;
      ficomp*            = 152;
      fisub*             = 153;
      fisubr*            = 154;
      fidiv*             = 155;
      fidivr*            = 156;
      fcomp*             = 157;
      fcompp*            = 158;
      fabs*              = 159;
      fchs*              = 160;

CONST MIN_tOper* = 0;
      MAX_tOper* = 160;      
      
VAR   InvDirTab*      : ARRAY MAX_tOper+1 OF tOper;                (* {rc,ro,sa,sh}l <--> {rc,ro,sa,sh}r , shld <--> shrd      *)
      IsRotateOper*   : ARRAY MAX_tOper+1 OF BOOLEAN;              (* true for rcl,rcr,rol,ror                                 *)
      OperStrTab*     : ARRAY MAX_tOper+1 ,8 OF CHAR;          (* textual representation of an opcode                      *)

CONST FirstFOP*       = fstsw;
      LastFOP*        = fchs;
TYPE  FOPRange*       = INTEGER;
VAR   PopFloatTab*    : ARRAY MAX_tOper+1 OF tOper;             (* e.g. fadd --> faddp; if no "_p" exists: identity         *)
      UnpopFloatTab*  : ARRAY MAX_tOper+1 OF tOper;             (* UnpopFloatTab(PopFloatTab(x))=x                          *)
      RevFloatTab*    : ARRAY MAX_tOper+1 OF tOper;             (* e.g. fsub <--> fsubr; else identity                      *)
      IntFloatTab*    : ARRAY MAX_tOper+1 OF tOper;             (* e.g. fadd --> fiadd; else identity                       *)
      FloatChangeTab* : ARRAY MAX_tOper+1 OF LONGINT;           (* diff number of ndp elems; e.g. faddp --> -1              *)
      FloatDyOpTab*   : ARRAY MAX_tOper+1 OF BOOLEAN;           (* true for op-codes with two ndp elem operands; e.g. faddp *)

VAR oper:tOper;
BEGIN (* ASMOP *)
 FOR oper:=MIN_tOper TO MAX_tOper DO 
  InvDirTab[oper]:=oper; IsRotateOper[oper]:=FALSE; OperStrTab[oper]:='oper?'; 
 END; (* FOR *)
 
 InvDirTab[rcl ] := rcr ; IsRotateOper[rcl] := TRUE; 
 InvDirTab[rcr ] := rcl ; IsRotateOper[rcr] := TRUE; 
 InvDirTab[rol ] := ror ; IsRotateOper[rol] := TRUE; 
 InvDirTab[ror ] := rol ; IsRotateOper[ror] := TRUE; 
 InvDirTab[sal ] := sar ; 
 InvDirTab[sar ] := sal ; 
 InvDirTab[shl ] := shr ; 
 InvDirTab[shr ] := shl ; 
 InvDirTab[shld] := shrd; 
 InvDirTab[shrd] := shld; 

 OperStrTab[asciz  ] := '.asciz' ; 
 OperStrTab[byte   ] := '.byte'  ; 
 OperStrTab[long   ] := '.long'  ; 
 OperStrTab[comm   ] := '.comm'  ; 
 OperStrTab[align  ] := '.align' ; 
 OperStrTab[data   ] := '.data'  ; 
 OperStrTab[text   ] := '.text'  ; 
 OperStrTab[globl  ] := '.globl' ; 
 OperStrTab[nop    ] := 'nop'    ;
 OperStrTab[add    ] := 'add'    ;
 OperStrTab[and    ] := 'and'    ;
 OperStrTab[bound  ] := 'bound'  ;
 OperStrTab[bt     ] := 'bt'     ;
 OperStrTab[btr    ] := 'btr'    ;
 OperStrTab[bts    ] := 'bts'    ;
 OperStrTab[call   ] := 'call'   ;
 OperStrTab[cbw    ] := 'cbw'    ;
 OperStrTab[cdq    ] := 'cdq'    ;
 OperStrTab[cld    ] := 'cld'    ;
 OperStrTab[cwd    ] := 'cwd'    ;
 OperStrTab[cwde   ] := 'cwde'   ;
 OperStrTab[cmp    ] := 'cmp'    ;
 OperStrTab[cmpsb  ] := 'cmpsb'  ;
 OperStrTab[dec    ] := 'dec'    ;
 OperStrTab[enter  ] := 'enter'  ;
 OperStrTab[imul   ] := 'imul'   ;
 OperStrTab[idiv   ] := 'idiv'   ;
 OperStrTab[inc    ] := 'inc'    ;
 OperStrTab[jmp    ] := 'jmp'    ;
 OperStrTab[jcxz   ] := 'jcxz'   ;
 OperStrTab[jecxz  ] := 'jecxz'  ;
 OperStrTab[ja     ] := 'ja'     ;
 OperStrTab[jae    ] := 'jae'    ;
 OperStrTab[jb     ] := 'jb'     ;
 OperStrTab[jbe    ] := 'jbe'    ;
 OperStrTab[jc     ] := 'jc'     ;
 OperStrTab[je     ] := 'je'     ;
 OperStrTab[jg     ] := 'jg'     ;
 OperStrTab[jge    ] := 'jge'    ;
 OperStrTab[jl     ] := 'jl'     ;
 OperStrTab[jle    ] := 'jle'    ;
 OperStrTab[jo     ] := 'jo'     ;
 OperStrTab[jp     ] := 'jp'     ;
 OperStrTab[js     ] := 'js'     ;
 OperStrTab[jz     ] := 'jz'     ;
 OperStrTab[jna    ] := 'jna'    ;
 OperStrTab[jnae   ] := 'jnae'   ;
 OperStrTab[jnb    ] := 'jnb'    ;
 OperStrTab[jnbe   ] := 'jnbe'   ;
 OperStrTab[jnc    ] := 'jnc'    ;
 OperStrTab[jne    ] := 'jne'    ;
 OperStrTab[jng    ] := 'jng'    ;
 OperStrTab[jnge   ] := 'jnge'   ;
 OperStrTab[jnl    ] := 'jnl'    ;
 OperStrTab[jnle   ] := 'jnle'   ;
 OperStrTab[jno    ] := 'jno'    ;
 OperStrTab[jnp    ] := 'jnp'    ;
 OperStrTab[jns    ] := 'jns'    ;
 OperStrTab[jnz    ] := 'jnz'    ;
 OperStrTab[seta   ] := 'seta'   ;
 OperStrTab[setae  ] := 'setae'  ;
 OperStrTab[setb   ] := 'setb'   ;
 OperStrTab[setbe  ] := 'setbe'  ;
 OperStrTab[setc   ] := 'setc'   ;
 OperStrTab[sete   ] := 'sete'   ;
 OperStrTab[setg   ] := 'setg'   ;
 OperStrTab[setge  ] := 'setge'  ;
 OperStrTab[setl   ] := 'setl'   ;
 OperStrTab[setle  ] := 'setle'  ;
 OperStrTab[seto   ] := 'seto'   ;
 OperStrTab[setp   ] := 'setp'   ;
 OperStrTab[sets   ] := 'sets'   ;
 OperStrTab[setz   ] := 'setz'   ;
 OperStrTab[setna  ] := 'setna'  ;
 OperStrTab[setnae ] := 'setnae' ; 
 OperStrTab[setnb  ] := 'setnb'  ;
 OperStrTab[setnbe ] := 'setnbe' ; 
 OperStrTab[setnc  ] := 'setnc'  ;
 OperStrTab[setne  ] := 'setne'  ;
 OperStrTab[setng  ] := 'setng'  ;
 OperStrTab[setnge ] := 'setnge' ; 
 OperStrTab[setnl  ] := 'setnl'  ;
 OperStrTab[setnle ] := 'setnle' ; 
 OperStrTab[setno  ] := 'setno'  ;
 OperStrTab[setnp  ] := 'setnp'  ;
 OperStrTab[setns  ] := 'setns'  ;
 OperStrTab[setnz  ] := 'setnz'  ;
 OperStrTab[lea    ] := 'lea'    ; 
 OperStrTab[leave  ] := 'leave'  ; 
 OperStrTab[lods   ] := 'lods'   ; 
 OperStrTab[loop   ] := 'loop'   ; 
 OperStrTab[loopnz ] := 'loopnz' ; 
 OperStrTab[mov    ] := 'mov'    ; 
 OperStrTab[movs   ] := 'movs'   ; 
 OperStrTab[movsbw ] := 'movsbw' ; 
 OperStrTab[movsbl ] := 'movsbl' ; 
 OperStrTab[movswl ] := 'movswl' ; 
 OperStrTab[movzbl ] := 'movzbl' ; 
 OperStrTab[movzbw ] := 'movzbw' ; 
 OperStrTab[movzwl ] := 'movzwl' ; 
 OperStrTab[neg    ] := 'neg'    ; 
 OperStrTab[not    ] := 'not'    ; 
 OperStrTab[or     ] := 'or'     ; 
 OperStrTab[popl   ] := 'popl'   ; 
 OperStrTab[pushl  ] := 'pushl'  ; 
 OperStrTab[popf   ] := 'popf'   ; 
 OperStrTab[pushf  ] := 'pushf'  ; 
 OperStrTab[ret    ] := 'ret'    ; 
 OperStrTab[repz   ] := 'repz'   ; 
 OperStrTab[sahf   ] := 'sahf'   ; 
 OperStrTab[stos   ] := 'stos'   ; 
 OperStrTab[sub    ] := 'sub'    ; 
 OperStrTab[test   ] := 'test'   ; 
 OperStrTab[xor    ] := 'xor'    ; 
 OperStrTab[xchg   ] := 'xchg'   ; 

 OperStrTab[rcl    ] := 'rcl'    ; 
 OperStrTab[rcr    ] := 'rcr'    ; 
 OperStrTab[rol    ] := 'rol'    ; 
 OperStrTab[ror    ] := 'ror'    ; 
 OperStrTab[sal    ] := 'sal'    ; 
 OperStrTab[sar    ] := 'sar'    ; 
 OperStrTab[shl    ] := 'shl'    ; 
 OperStrTab[shr    ] := 'shr'    ; 
 OperStrTab[shld   ] := 'shld'   ; 
 OperStrTab[shrd   ] := 'shrd'   ; 
                   
 OperStrTab[fstsw  ] := 'fstsw'  ; 
 OperStrTab[fdecstp] := 'fdecstp'; 
 OperStrTab[fincstp] := 'fincstp'; 
 OperStrTab[fxch   ] := 'fxch'   ; 
 OperStrTab[fld    ] := 'fld'    ; 
 OperStrTab[fild   ] := 'fild'   ; 
 OperStrTab[fst    ] := 'fst'    ; OperStrTab[fstp  ] := 'fstp'   ; 
 OperStrTab[fist   ] := 'fist'   ; OperStrTab[fistp ] := 'fistp'  ; 
 OperStrTab[fadd   ] := 'fadd'   ; OperStrTab[faddp ] := 'faddp'  ; 
 OperStrTab[fmul   ] := 'fmul'   ; OperStrTab[fmulp ] := 'fmulp'  ; 
 OperStrTab[fdiv   ] := 'fdiv'   ; OperStrTab[fdivp ] := 'fdivp'  ; 
 OperStrTab[fdivr  ] := 'fdivr'  ; OperStrTab[fdivrp] := 'fdivrp' ; 
 OperStrTab[fsub   ] := 'fsub'   ; OperStrTab[fsubp ] := 'fsubp'  ; 
 OperStrTab[fsubr  ] := 'fsubr'  ; OperStrTab[fsubrp] := 'fsubrp' ; 
 OperStrTab[fiadd  ] := 'fiadd'  ; 
 OperStrTab[fimul  ] := 'fimul'  ; 
 OperStrTab[ficomp ] := 'ficomp' ; 
 OperStrTab[fisub  ] := 'fisub'  ; 
 OperStrTab[fisubr ] := 'fisubr' ; 
 OperStrTab[fidiv  ] := 'fidiv'  ; 
 OperStrTab[fidivr ] := 'fidivr' ; 
 OperStrTab[fcomp  ] := 'fcomp'  ; 
 OperStrTab[fcompp ] := 'fcompp' ; 
 OperStrTab[fabs   ] := 'fabs'   ; 
 OperStrTab[fchs   ] := 'fchs'   ; 
 
 FOR oper:=MIN(FOPRange) TO MAX(FOPRange) DO
  PopFloatTab   [oper] := oper; 
  UnpopFloatTab [oper] := oper; 
  RevFloatTab   [oper] := oper; 
  IntFloatTab   [oper] := oper; 
  FloatChangeTab[oper] := 0; 
  FloatDyOpTab  [oper] := FALSE; 
 END; (* FOR *)

 PopFloatTab[fst  ] := fstp  ; UnpopFloatTab[fstp  ] := fst  ; 
 PopFloatTab[fist ] := fistp ; UnpopFloatTab[fistp ] := fist ; 
 PopFloatTab[fadd ] := faddp ; UnpopFloatTab[faddp ] := fadd ; 
 PopFloatTab[fmul ] := fmulp ; UnpopFloatTab[fmulp ] := fmul ; 
 PopFloatTab[fdiv ] := fdivp ; UnpopFloatTab[fdivp ] := fdiv ; 
 PopFloatTab[fdivr] := fdivrp; UnpopFloatTab[fdivrp] := fdivr; 
 PopFloatTab[fsub ] := fsubp ; UnpopFloatTab[fsubp ] := fsub ; 
 PopFloatTab[fsubr] := fsubrp; UnpopFloatTab[fsubrp] := fsubr; 
 PopFloatTab[fcomp] := fcompp; UnpopFloatTab[fcompp] := fcomp; 
 
 RevFloatTab[fdiv  ] := fdivr ; RevFloatTab[fdivp ] := fdivrp; 
 RevFloatTab[fdivr ] := fdiv  ; RevFloatTab[fdivrp] := fdivp ; 
 RevFloatTab[fsub  ] := fsubr ; RevFloatTab[fsubp ] := fsubrp; 
 RevFloatTab[fsubr ] := fsub  ; RevFloatTab[fsubrp] := fsubp ; 
 RevFloatTab[fisub ] := fisubr; 
 RevFloatTab[fisubr] := fisub ; 
 RevFloatTab[fidiv ] := fidivr; 
 RevFloatTab[fidivr] := fidiv ; 

 IntFloatTab[fadd ] := fiadd ; 
 IntFloatTab[fmul ] := fimul ; 
 IntFloatTab[fcomp] := ficomp; 
 IntFloatTab[fsub ] := fisub ; 
 IntFloatTab[fsubr] := fisubr; 
 IntFloatTab[fdiv ] := fidiv ; 
 IntFloatTab[fdivr] := fidivr; 

 FloatChangeTab[fld   ] :=  1;
 FloatChangeTab[fild  ] :=  1; 
 FloatChangeTab[fstp  ] := -1;
 FloatChangeTab[fistp ] := -1;
 FloatChangeTab[faddp ] := -1; FloatDyOpTab[faddp ] := TRUE; 
 FloatChangeTab[fmulp ] := -1; FloatDyOpTab[fmulp ] := TRUE; 
 FloatChangeTab[fdivp ] := -1; FloatDyOpTab[fdivp ] := TRUE; 
 FloatChangeTab[fdivrp] := -1; FloatDyOpTab[fdivrp] := TRUE; 
 FloatChangeTab[fsubp ] := -1; FloatDyOpTab[fsubp ] := TRUE; 
 FloatChangeTab[fsubrp] := -1; FloatDyOpTab[fsubrp] := TRUE; 
 FloatChangeTab[fcomp ] := -1; FloatDyOpTab[fcomp ] := TRUE; 
 FloatChangeTab[fcompp] := -2; FloatDyOpTab[fcompp] := TRUE; 
END ASMOP.

